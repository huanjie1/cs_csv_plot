//搜索界面中的文字可得对应的控件名称

//buttonTestCCW_Click 逆转测试
//buttonTestStop_Click 停止测试
    //调用getprams类中的方法
    //DrawMap()

    //        调用DrawZhiJiao()

    //                建立Draws()线程，画刻度一次
    //        建立  getpamrs()线程，读取各频点的第一点
    //                调用Drawms()，画出各频点的第一小段线

//getpram2()传递参数

//仪器控制指令藏在这里AntCode.ocx（令人无语的后缀名。。）应搜索“define.SetSPAN = ”

//pictureBox1为曲线绘制区域 

//Drawm3D()曲线绘制函数，由ReadElec()调用。3D中的另一个维度为信号频率，只是一般情况下系统设置中只勾选了频点1，所以只有一条曲线。曲线由一小段一小段直线逐次绘制而成DrawLine
//  角度数据寄存在RvD3Angle数组中，由ReadElec()整理从serialPortRv_DataReceived得到的数据
//  电平数据寄存在D3Elec数组中，ReadElec()中读取并整理
//  ReadElec()为一独立线程，负责发送指令，读仪器取值，查当前角度；当前角度由串口侦听函数serialPortRv_DataReceived根据转台返回的信息实时更新
//Drawsn()坐标系绘制，由timer3D_Tick调用
//timerRefAngel_Tick为底部三个指针盘的绘制封装
//串口读取函数serialPortAz_DataReceived
public class Main : Form
{
    // Fields
    public static int a = 1;
    public int aaa = 0;
    private string[] aaData = new string[0x11];
    public static About AboutFrom;
    private string[] adata;
    private autoTestOption AutoTestForm;
    private int az;
    private float az0;
    public static float azAccel = 6000f;
    private int azCa = 0;
    private ContextMenuStrip AZcontextMenuText;
    private float[][] AzD3Angle = null;
    public static float azHighSpeed = 8000f;
    public static float azLowSpeed = 500f;
    private Bitmap BacksBitmap = null;
    private ToolStripPanel BottomToolStripPanel;
    private byte[] buffer = new byte[100];
    private const int BufferSize = 100;
    private Button button1;
    private Button button10;
    private Button button11;
    private Button button12;
    private Button button13;
    private Button button14;
    private Button button15;
    private Button button2;
    private Button button8;
    private Button button9;
    private Button buttonAuto;
    private Button buttonAutoTest;
    private Button buttonAzCa;
    private Button buttonAzCCW;
    private Button buttonAzCW;
    private Button buttonAzDW;
    private Button buttonAzStop;
    private Button buttonAzXL;
    private Button buttonAzYD;
    public Button buttonDnCa;
    private Button buttonDnCCW;
    private Button buttonDnCW;
    private Button buttonDnDW;
    private Button buttonDnStop;
    private Button buttonDnYD;
    private Button buttonElAutoStop;
    public Button buttonElCa;
    private Button buttonElCCW;
    private Button buttonElCW;
    private Button buttonElDN;
    private Button buttonElDW;
    private Button buttonElStop;
    private Button buttonElUP;
    private Button buttonElXL;
    private Button buttonElYD;
    private Button buttonFreq;
    private Button buttonFreq1;
    private Button buttonFreqPF;
    private Button buttonFreqSet;
    public Button buttonFsCa;
    private Button buttonFsCcw;
    private Button buttonFsCw;
    private Button buttonFsDW;
    private Button buttonFsStop;
    private Button buttonFsYD;
    private Button buttonHPDevice;
    private Button buttonMarkZero;
    private Button buttonNext;
    private Button buttonOn;
    private Button buttonOption;
    private Button buttonOrigin;
    public Button buttonPtCa;
    private Button buttonPtCCW;
    private Button buttonPtCW;
    private Button buttonPtDW;
    private Button buttonPtStop;
    private Button buttonPtYD;
    public Button buttonRvCa;
    private Button buttonRvCCW;
    private Button buttonRvCW;
    private Button buttonRvDW;
    private Button buttonRvStop;
    private Button buttonRvXL;
    private Button buttonRvYD;
    private Button buttonSave;
    public Button buttonSdCa;
    private Button buttonSdCCW;
    private Button buttonSdCW;
    private Button buttonSdDW;
    private Button buttonSdStop;
    private Button buttonSdXL;
    private Button buttonSdYD;
    private Button buttonSearch;
    private Button buttonSearchStop;
    private Button buttonSet;
    private Button buttonSpeedStar;
    private Button buttonSpeedStop;
    private Button buttonStartTest;
    private Button buttonStopAuto;
    private Button ButtonStopAutoTest;
    private Button buttonSwep;
    private Button buttonTestCCW;
    private Button buttonTestCW;
    private Button buttonTestStart;
    private Button buttonTestStart1;
    private Button buttonTestStop;
    private Button buttonVNAinit;
    private Button buttonVNAinit1;
    private VistaButton buttonXLStart;
    private VistaButton buttonXLStop;
    public static double CAccel;
    public static int CAxesNum;
    public static int CDis;
    public IPEndPoint ClientPoint = null;
    public Socket ClientSocket = null;
    public Socket ClientSocketRv = null;
    public static double CLowSpeed;
    private ColorSlider colorSlider1;
    private ColorSlider colorSliderAz;
    private ColorSlider colorSliderDn;
    private ColorSlider colorSliderEl;
    private ColorSlider colorSliderFS;
    private ColorSlider colorSliderPt;
    private ColorSlider colorSliderRv;
    private ColorSlider colorSliderSd;
    private ComboBox comboBox3;
    private ComboBox comboBoxFreq;
    public ComboBox comboBoxFreq1;
    private ComboBox comboBoxLNAN;
    private ComboBox comboBoxPNAN;
    private ComboBox comboBoxSet;
    public ComboBox comboBoxSwitchN;
    private ComboBox comboBoxVANPower;
    private ComboBox comboBoxVNAAverage;
    private IContainer components = null;
    private ToolStripContentPanel ContentPanel;
    public static double CurMaxSpeed;
    public static int CurTab;
    private float[][] D3Elec = null;
    public bool DataSearch = false;
    public int DataSearchInt = 1;
    private string DirStrPath = "";
    public static float dnAccel = 10000f;
    private int dnCa = 0;
    private ContextMenuStrip DNcontextMenuText;
    public static float dnHighSpeed = 40000f;
    public static float dnLowSpeed = 100f;
    private int el;
    private float el0;
    public static float elAccel = 8000f;
    private int elCa = 0;
    private ContextMenuStrip ELcontextMenuText;
    public static float elHighSpeed = 15000f;
    public static float elLowSpeed = 700f;
    private ToolStripButton ExitTestSystem;
    private int flag = -2;
    public static bool FlagLoading;
    private long flags = 0L;
    private string[] Freq = null;
    public static float fsAccel = 10000f;
    private int fsCa = 0;
    private ContextMenuStrip FscontextMenuText;
    public static float fsHighSpeed = 40000f;
    public static float fsLowSpeed = 100f;
    public static int glCardMajor;
    public static int glCardMinor1;
    public static int glCardtype;
    public static int glDllMajor;
    public static int glDllMinor1;
    public static int glDllMinor2;
    public static int glSysMajor;
    public static int glSysMinor1;
    public static int glSysMinor2;
    public static int glTotalAxes;
    public static int glTotalCards;
    private Grouper groupBoxAz;
    private Grouper groupBoxDn;
    private Grouper groupBoxEl;
    private GroupBox groupBoxElAuto;
    private GroupBox groupBoxLeft;
    private Grouper groupBoxPt;
    private Grouper groupBoxRv;
    private Grouper groupBoxSd;
    private GroupBox groupBoxSearchMax;
    private GroupBox groupBoxSpeed;
    private GroupBox groupBoxTimer;
    private Grouper grouper1;
    private Grouper grouper15;
    private Grouper grouper16;
    private Grouper grouper1Step;
    private Grouper grouper2;
    private Grouper grouper2Step;
    private Grouper grouper3;
    private Grouper grouper3Step;
    private Grouper grouper4;
    private Grouper grouper4Step;
    private Grouper grouper5;
    private Grouper grouper5Step;
    private Grouper grouper6;
    private Grouper grouper6Step;
    private Grouper grouper7Step;
    private Grouper grouperNewOperat;
    private Grouper grouperOther;
    private Grouper grouperParameter;
    private Grouper grouperTurntable;
    public getprams gs = new getprams();
    public static double IAccel;
    public static int IAxesNumType;
    public static double IConSpeed;
    public static double IHighSpeed;
    public static double ILowSpeed;
    private int IPendPoint = 0x21ee;
    public static int ISpeedType;
    private Label label1;
    private Label label10;
    private Label label11;
    private Label label12;
    private Label label126;
    private Label label127;
    private Label label13;
    private Label label14;
    private Label label15;
    private Label label16;
    private Label label17;
    private Label label18;
    private Label label19;
    private Label label2;
    private Label label20;
    private Label label21;
    private Label label22;
    private Label label23;
    private Label label24;
    private Label label25;
    private Label label26;
    private Label label27;
    private Label label28;
    private Label label29;
    private Label label3;
    private Label label30;
    private Label label31;
    private Label label32;
    private Label label33;
    private Label label34;
    private Label label35;
    private Label label36;
    private Label label37;
    private Label label38;
    private Label label39;
    private Label label4;
    private Label label40;
    private Label label41;
    private Label label42;
    private Label label43;
    private Label label44;
    private Label label45;
    private Label label46;
    private Label label47;
    private Label label48;
    private Label label49;
    private Label label5;
    private Label label50;
    private Label label51;
    private Label label52;
    private Label label53;
    private Label label54;
    private Label label55;
    private Label label56;
    private Label label57;
    private Label label58;
    private Label label59;
    private Label label6;
    private Label label60;
    private Label label61;
    private Label label62;
    private Label label63;
    private Label label64;
    private Label label65;
    private Label label66;
    private Label label67;
    private Label label7;
    private Label label71;
    private Label label72;
    private Label label73;
    private Label label75;
    private Label label77;
    private Label label78;
    private Label label8;
    private Label label9;
    private Label labelAzV;
    private PictureBox labelDnLimDn;
    private PictureBox labelDnLimTop;
    private Label labelDnV;
    private Label labelElDnLim;
    private PictureBox labelElLimDn;
    private PictureBox labelElLimTop;
    private Label labelElUpLim;
    private Label labelElV;
    private PictureBox labelFsLimTop;
    private PictureBox labelFsLimUP;
    private Label labelFsV;
    private PictureBox labelPtLimDn;
    private PictureBox labelPtLimTop;
    private Label labelPtV;
    private PictureBox labelRvLimDn;
    private PictureBox labelRvLimTop;
    private Label labelRvV;
    private PictureBox labelSdLimDn;
    private PictureBox labelSdLimTop;
    private Label labelSdV;
    private TextBox labelSpeedCpuT;
    private Label labelSpeedV;
    private Label lable45;
    private ToolStripPanel LeftToolStripPanel;
    private ListBox listBoxAutoTest;
    public ListBox listBoxNVA;
    private ListBox listBoxSystem;
    public static float MAccel;
    public static Main MainFrom = null;
    public const int MAX_AXES_NUM = 7;
    public static int MAxesNum;
    public static int MAxesNumType;
    public static int MDis;
    public static float MHighSpeed;
    public static float MLowSpeed;
    public static int MMoveType;
    public static int MSpeedType;
    private NumericUpDown numericUpDown2;
    private NumericUpDown numericUpDown3;
    private NumericUpDown numUpDownVNAAverage;
    private NumericUpDown numUpDownVNAPower;
    public const string PARAM_FILE = "MPC08D.dat";
    private PassWordMessage PasswordMessageForm;
    private PictureBox pictureBox1;
    private PictureBox pictureBox2;
    private PictureBox pictureBoxAz;
    private PictureBox pictureBoxDn;
    private PictureBox pictureBoxEl;
    private PictureBox pictureBoxFS;
    private PictureBox pictureBoxPt;
    private PictureBox pictureBoxRv;
    private PictureBox pictureBoxSd;
    private PictureBox pictureBoxSLD;
    private ProgressBarEx progressBarEx1;
    private ProgressBarEx progressBarEx2;
    public static float ptAccel = 10000f;
    private int ptCa = 0;
    private ContextMenuStrip PTcontextMenuText;
    public static float ptHighSpeed = 40000f;
    public static float ptLowSpeed = 100f;
    private RadioButton radButtonTestZhouAz;
    private RadioButton radButtonTestZhouEl;
    private RadioButton radButtonTestZhouSd;
    private RadioButton radioButton1;
    private RadioButton radioButton2;
    private RadioButton radioButtonSpeedAz;
    private RadioButton radioButtonSpeedDn;
    private RadioButton radioButtonSpeedEl;
    private RadioButton radioButtonSpeedRv;
    private RadioButton radioButtonSpeedSn;
    private string rData = "";
    public static ReadData readData;
    private ReadElec readElec;
    private int remoteIPEndPoint = 0x231d;
    private ToolStripPanel RightToolStripPanel;
    private RegistryKey rsg = null;
    private int rv;
    private float rv0;
    public static float rvAccel = 10000f;
    private int rvCa = 0;
    private ContextMenuStrip RVcontextMenuText;
    private float[][] RvD3Angle = null;
    public static float rvHighSpeed = 40000f;
    public static float rvLowSpeed = 100f;
    private float[][] saveAzD3Angle = null;
    private float[][] saveD3Elec = null;
    public static define.map[] savedata;
    private SaveFileDialog saveFileDialog1;
    private float[][] saveRvD3Angle = null;
    private Bitmap sBitmap = null;
    public Bitmap sBItmap = new Bitmap(0x7e, 0x7e);
    private int sd;
    private float sd0;
    public static float sdAccel = 10000f;
    private int sdCa = 0;
    private ContextMenuStrip SDcontextMenuText;
    public static float sdHighSpeed = 40000f;
    public static float sdLowSpeed = 100f;
    private SerialPort serialPortAz;
    private SerialPort serialPortDn;
    private SerialPort serialPortEl;
    private SerialPort serialPortGF;
    private SerialPort serialPortPt;
    private SerialPort serialPortRv;
    private SerialPort serialPortScm;
    private SerialPort serialPortSd;
    private SerialPort serialPortSignal;
    private SerialPort serialPortSwitch;
    private SerialPort serialPt;
    private SerialPort serialPtAngle;
    public IPEndPoint serverPoint = null;
    public Socket serverSocket = null;
    private int sj;
    private float sj0;
    private int sPointNum = 0;
    private SetMark sSetMark;
    private float StartAngle = 0f;
    private float StopAngle = 0f;
    private string str;
    private string[] strSplit = new string[] { "," };
    private string[] strSplits = new string[] { "," };
    private float stsAngle = 0f;
    private SystemOption systemOption;
    public const int TAB_ALT = 6;
    public const int TAB_ENCD = 2;
    public const int TAB_INTP = 1;
    public const int TAB_OTHER = 4;
    public const int TAB_PMVE = 3;
    public const int TAB_RND = 5;
    private TabControl tabControl1;
    private TabControl tabControl2;
    private TabPage tabPage1;
    private TabPage tabPage2;
    private TabPage tabPage3;
    private TabPage tabPageNew;
    private TabPage tabPageSet;
    private float[] Temp3DAngle = new float[10];
    private bool TestOver = false;
    private TextBox textBox1;
    private TextBox textBox2;
    private TextBox textBox3;
    private TextBox textBox4;
    private TextBox textBox5;
    private TextBox textBox6;
    private TextBox textBox7;
    private TextBox textBox8;
    private TextBox textBox9;
    private TextBox textBoxAzAngle;
    private TextBox textBoxAzDW;
    private TextBox textBoxAzYD;
    private TextBox textBoxDnAngle;
    private TextBox textBoxDnDW;
    private TextBox textBoxDnYD;
    private TextBox textBoxEL;
    private TextBox textBoxElAngle;
    private TextBox textBoxElDW;
    private TextBox textBoxElYD;
    private TextBox textBoxFsAngle;
    private TextBox textBoxFsDW;
    private TextBox textBoxFsYD;
    private TextBox textBoxPtAngle;
    private TextBox textBoxPtDW;
    private TextBox textBoxPtYD;
    private TextBox textBoxRrveFreq;
    private TextBox textBoxRvAngle;
    private TextBox textBoxRvDW;
    private TextBox textBoxRvYD;
    private TextBox textBoxSdAngle;
    private TextBox textBoxSdDW;
    private TextBox textBoxSdYD;
    private TextBox textBoxzhi;
    public int timeFlag;
    private Timer timer3D;
    private Timer timerAsk;
    private Timer timerAutoEl;
    public Timer timerAutoTestP2_Two;
    private Timer timerAutoTestP4_1_Four;
    public Timer timerAutoTestP4_2_Four;
    public Timer timerAutoTestP4_Four;
    public Timer timerAutoTestP8_eight;
    private Timer timerAZLimit;
    private Timer timerEl;
    public Timer timerQinJiao;
    private Timer timerRefAngel;
    private Timer timerRefState;
    private Timer timerShowGroup;
    private Timer timerStopAsk;
    private Timer timerTest;
    public int timeTestC;
    private ToolStrip toolStrip1;
    private ToolStripButton toolStripButton1;
    private ToolStripButton toolStripButton10;
    private ToolStripButton toolStripButton2;
    private ToolStripButton toolStripButton3;
    private ToolStripButton toolStripButton4;
    private ToolStripButton toolStripButton5;
    private ToolStripButton toolStripButton6;
    private ToolStripButton toolStripButton7;
    private ToolStripButton toolStripButton8;
    private ToolStripButton toolStripButton9;
    private ToolStripContainer toolStripContainer1;
    private ToolStripTextBox toolStripTextBox1;
    private ToolStripTextBox toolStripTextBox2;
    private ToolStripTextBox toolStripTextBox3;
    private ToolStripTextBox toolStripTextBox4;
    private ToolStripTextBox toolStripTextBox5;
    private ToolStripTextBox toolStripTextBox6;
    private ToolStripTextBox toolStripTextBox7;
    private ToolStripPanel TopToolStripPanel;
    private TrackBar trackBarAz;
    private TrackBar trackBarDn;
    private TrackBar trackBarEl;
    private TrackBar trackBarFS;
    private TrackBar trackBarPt;
    private TrackBar trackBarRv;
    private TrackBar trackBarSd;
    private float[] X_3D_1 = new float[10];
    private float[] X_3D_2 = new float[10];
    private int Xpy;
    private float Xpy0;
    private float[] Y_3D_1 = new float[10];
    private float[] Y_3D_2 = new float[10];
    private int Ypy;
    private float Ypy0;

    // Methods
    public Main()
    {
        try
        {
            this.ReadPassData();
            this.InitializeComponent();
            this.gs.ButtonClick += new getprams.ButtonEvent(this.buttonTestStop_Click);
            this.gs.ShowForm += new getprams.ButtonEvent(this.toolStripButton4_Click);
            base.SetStyle(ControlStyles.UserPaint, true);
            base.SetStyle(ControlStyles.OptimizedDoubleBuffer, true);
            base.SetStyle(ControlStyles.AllPaintingInWmPaint, true);
            base.SetStyle(ControlStyles.ResizeRedraw, true);
            base.SetStyle(ControlStyles.Opaque, true);
            base.SetStyle(ControlStyles.DoubleBuffer, true);
            base.UpdateStyles();
            MainFrom = this;
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void AddReceiveData(byte[] bs)
    {
        lock (this)
        {
            int num4;
            int num5;
            byte[] buffer = new byte[14];
            byte[] buffer2 = new byte[14];
            for (num4 = 0; num4 < 14; num4++)
            {
                if ((bs[num4] == 0xff) && (bs[num4 + 13] == 0xfe))
                {
                    for (num5 = 0; num5 < 14; num5++)
                    {
                        buffer[num5] = bs[num5 + num4];
                    }
                }
                if ((buffer[0] == 0xff) && (buffer[13] == 0xfe))
                {
                    break;
                }
            }
            for (num5 = 0; num5 < 14; num5++)
            {
                buffer2[num5] = buffer[num5];
            }
            if ((buffer2[0] == 0xff) && (buffer2[13] == 0xfe))
            {
                int num6 = buffer2[1];
                int num7 = buffer2[2];
                int num8 = buffer2[3];
                switch ((num6 & 0xc0))
                {
                    case 0x40:
                        SCM.azLimFlag = 2;
                        break;

                    case 0x80:
                        SCM.azLimFlag = 1;
                        break;

                    case 0xc0:
                        SCM.azLimFlag = 1;
                        SCM.azLimFlag = 2;
                        break;

                    default:
                        SCM.azLimFlag = 0;
                        break;
                }
                switch ((num7 & 0xc0))
                {
                    case 0x40:
                        SCM.elLimFlag = 2;
                        break;

                    case 0x80:
                        SCM.elLimFlag = 1;
                        break;

                    case 0xc0:
                        SCM.elLimFlag = 1;
                        SCM.elLimFlag = 2;
                        break;

                    default:
                        SCM.elLimFlag = 0;
                        break;
                }
                int num9 = 0;
                int num10 = 0;
                int num11 = 0x38;
                num9 += (num6 & num11) << 3;
                num9 += num7 & num11;
                num9 += (num8 & num11) >> 3;
                for (num4 = 0; num4 < 9; num4++)
                {
                    num10 = (num9 >> num4) & 1;
                    if (num10 == 1)
                    {
                        if (buffer2[(8 - num4) + 4] <= 1)
                        {
                            buffer2[(8 - num4) + 4] = Convert.ToByte((int) (0xff - buffer2[(8 - num4) + 4]));
                        }
                        else
                        {
                            goto Label_03B2;
                        }
                    }
                }
                int num = (buffer2[4] + (buffer2[5] * 0x100)) + (buffer2[6] * 0x10000);
                int num2 = (buffer2[7] + (buffer2[8] * 0x100)) + (buffer2[9] * 0x10000);
                int num3 = (buffer2[10] + (buffer2[11] * 0x100)) + (buffer2[12] * 0x10000);
                SCM.azAngle = Convert.ToSingle((float) ((num * 360f) / 800000f));
                if (SCM.azAngle > 180f)
                {
                    SCM.azAngle -= 360f;
                }
                if (SCM.azAngle < -180f)
                {
                    SCM.azAngle += 360f;
                }
                SCM.elAngle = Convert.ToSingle((float) ((num2 * 360f) / 320000f));
                if (SCM.elAngle > 180f)
                {
                    SCM.elAngle -= 360f;
                }
                if (SCM.elAngle < -180f)
                {
                    SCM.elAngle += 360f;
                }
                SCM.sdAngle = Convert.ToSingle((float) ((num3 * 360f) / 400000f));
                if (SCM.sdAngle > 180f)
                {
                    SCM.sdAngle -= 360f;
                }
                if (SCM.sdAngle < -180f)
                {
                    SCM.sdAngle += 360f;
                }
            Label_03B2:;
            }
        }
    }

    private void AngleTo180(ref float[] MainDataAngle, ref float[] MainRvDataAngle, ref float[] MainDataElec)
    {
        try
        {
            int num4;
            int num = 0;
            float[] array = null;
            float[] numArray2 = null;
            float[] numArray3 = null;
            Array.Resize<float>(ref array, 1);
            Array.Resize<float>(ref numArray2, 1);
            Array.Resize<float>(ref numArray3, 1);
            array[0] = MainDataAngle[0];
            numArray2[0] = MainRvDataAngle[0];
            numArray3[0] = MainDataElec[0];
            float num2 = (numArray3[0] + numArray3[array.Length - 1]) / 2f;
            numArray3[0] = num2;
            numArray3[array.Length - 1] = num2;
            for (num4 = 0; num4 < MainRvDataAngle.Length; num4++)
            {
                if (MainRvDataAngle[num4] > 180f)
                {
                    num = 1;
                }
                if (MainRvDataAngle[num4] < -180f)
                {
                    num = -1;
                }
            }
            switch (num)
            {
                case 1:
                    for (num4 = 0; num4 < MainRvDataAngle.Length; num4++)
                    {
                        MainRvDataAngle[num4] -= 180f;
                    }
                    break;

                case -1:
                    for (num4 = 0; num4 < MainRvDataAngle.Length; num4++)
                    {
                        MainRvDataAngle[num4] += 180f;
                    }
                    break;
            }
        }
        catch (Exception exception)
        {
            errLogFunction("AngleTo180 + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    public void AutoTest()
    {
        try
        {
            switch (SCM.Selecteditme)
            {
                case 1:
                    SCM.autoTestStart = 1;
                    SCM.autoTestend = 0;
                    this.timerAutoTestP2_Two.Enabled = true;
                    SCM.Selecteditme = 0;
                    return;

                case 2:
                    SCM.autoTestStart = 1;
                    SCM.autoTestend = 0;
                    this.timerAutoTestP4_1_Four.Enabled = true;
                    SCM.Selecteditme = 0;
                    return;

                case 3:
                    SCM.autoTestStart = 1;
                    SCM.autoTestend = 0;
                    this.timerAutoTestP8_eight.Enabled = true;
                    SCM.Selecteditme = 0;
                    return;
            }
            SCM.Selecteditme = 0;
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void AutoTestSetAntna(string port, string atname, string f, string a, string p, int num, string tx)
    {
        try
        {
            string str;
            define.saveFlag.Face = f;
            define.saveFlag.Across = a;
            define.saveFlag.Pol = p;
            define.saveFlag.port = num;
            if (f == "水平面")
            {
                if (a == "主极化")
                {
                    define.saveFlag.Dir = SCM.saveDir + @"\" + num.ToString() + @"\H.txt";
                }
                else
                {
                    define.saveFlag.Dir = SCM.saveDir + @"\" + num.ToString() + @"\Hxpd.txt";
                }
            }
            else if (tx == "")
            {
                define.saveFlag.Dir = SCM.saveDir + @"\" + num.ToString() + @"\E.txt";
            }
            else
            {
                define.saveFlag.Dir = SCM.saveDir + @"\" + num.ToString() + @"\E1.txt";
            }
            this.comboBoxSwitchN.SelectedIndex = num;
            if (SCM.testMode == 1)
            {
                str = SCM.freqCent + "MHZ";
            }
            else
            {
                str = SCM.freqStar + "-" + SCM.freqStop + "MHZ";
            }
            this.listBoxAutoTest.Items[2] = " 测试状态:正在进行自动化测试";
            if (this.timerAutoTestP2_Two.Enabled)
            {
                this.listBoxAutoTest.Items[3] = " 测试模板:2端口-宽频-双极化";
            }
            if (this.timerAutoTestP4_1_Four.Enabled || this.timerAutoTestP4_2_Four.Enabled)
            {
                this.listBoxAutoTest.Items[3] = " 测试模板:4端口-双频-双极化";
            }
            if (this.timerAutoTestP8_eight.Enabled)
            {
                this.listBoxAutoTest.Items[3] = " 测试模板:8端口-TDSCDMA-双极化";
            }
            this.listBoxAutoTest.Items[4] = " 测试频率:" + str;
            this.listBoxAutoTest.Items[5] = " 测试端口:" + define.saveFlag.port + "端口";
            this.listBoxAutoTest.Items[6] = " 测试平面:" + define.saveFlag.Face;
            this.listBoxAutoTest.Items[8] = " 极化方式:" + define.saveFlag.Pol;
            this.listBoxAutoTest.Items[7] = " 极化状态:" + define.saveFlag.Across;
            Thread.Sleep(100);
            if (SCM.autoTestStart > 0)
            {
                SCM.autoTestend++;
            }
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void azDisplay()
    {
        try
        {
            float num = this.pictureBoxAz.Height / 2;
            float num2 = this.pictureBoxAz.Height / 2;
            Bitmap image = new Bitmap(this.sBItmap);
            Graphics graphics = Graphics.FromImage(image);
            graphics.InterpolationMode = InterpolationMode.High;
            graphics.SmoothingMode = SmoothingMode.AntiAlias;
            graphics.TranslateTransform((float) (this.pictureBoxAz.Height / 2), (float) (this.pictureBoxAz.Height / 2));
            graphics.RotateTransform(SCM.azAngle);
            GraphicsPath path = new GraphicsPath();
            path.AddLine((float) -7f, (float) 0f, (float) 0f, (float) (0f - ((num / 6f) * 5f)));
            path.AddLine((float) 0f, (float) (0f - ((num / 6f) * 5f)), (float) 7f, (float) 0f);
            path.CloseFigure();
            PathGradientBrush brush = new PathGradientBrush(path);
            brush.CenterColor = Color.Black;
            brush.SurroundColors = new Color[] { Color.White };
            graphics.FillPath(brush, path);
            graphics.ResetTransform();
            SolidBrush brush2 = new SolidBrush(Color.LightBlue);
            graphics.FillEllipse(brush2, (float) (num - 10f), (float) (num - 10f), (float) 20f, (float) 20f);
            this.pictureBoxAz.Image = image;
            path.Dispose();
            brush.Dispose();
            graphics.Dispose();
        }
        catch (Exception exception)
        {
            errLogFunction("azDisplay + " + exception.ToString());
        }
    }

    private void bgWorker_DoWork(object sender, DoWorkEventArgs e)
    {
        byte[] argument = (byte[]) e.Argument;
        this.AddReceiveData(argument);
    }

    private void button1_Click(object sender, EventArgs e)
    {
        this.saveFileDialog1.Filter = "Text files (*.txt)|*.txt|Excel files (*.xls)|*.xls|All Files (*.*)|*.*";
        this.saveFileDialog1.FilterIndex = define.saveFlag.dataMode + 1;
        this.saveFileDialog1.RestoreDirectory = false;
        this.saveFileDialog1.OverwritePrompt = true;
        this.saveFileDialog1.Title = "保存数据";
        if (this.saveFileDialog1.ShowDialog() == DialogResult.OK)
        {
            this.textBox8.Text = this.saveFileDialog1.FileName.ToString();
            this.DirStrPath = this.textBox8.Text;
        }
    }

    private void button10_Click(object sender, EventArgs e)
    {
        try
        {
            if (define.SetCenter != "")
            {
                SCM.freqCent = this.textBox3.Text;
                string writeFmt = define.SetCenter + (Convert.ToSingle(SCM.freqCent) * 1000000f) + "\n";
                int num = visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
            }
            define.Sleep(30L);
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void button11_Click(object sender, EventArgs e)
    {
        try
        {
            string str;
            int num;
            if (define.SetPSET != "")
            {
                visa32.viPrintf(visa32.vi, define.SetPSET + "\n");
            }
            define.Sleep(30L);
            if (define.SetS21 != "")
            {
                str = define.SetS21 + "\n";
                num = visa32.viPrintf(visa32.vi, str, str.Length);
            }
            define.Sleep(30L);
            if (define.SetCenter != "")
            {
                SCM.freqCent = "806";
                str = define.SetCenter + (Convert.ToSingle(SCM.freqCent) * 1000000f) + "\n";
                num = visa32.viPrintf(visa32.vi, str, str.Length);
            }
            define.Sleep(30L);
            if (define.SetSPAN != "")
            {
                SCM.freqSpan = "0";
                str = define.SetSPAN + (Convert.ToSingle(SCM.freqSpan) * 1000000f) + "\n";
                num = visa32.viPrintf(visa32.vi, str, str.Length);
            }
            define.Sleep(30L);
            if ((Convert.ToInt32(this.textBox6.Text) != 0) && (define.SetRLEV != ""))
            {
                str = define.SetRLEV + Convert.ToInt32(this.textBox6.Text).ToString() + "\n";
                num = visa32.viPrintf(visa32.vi, str, str.Length);
            }
            define.Sleep(30L);
            if ((Convert.ToInt32(this.textBox6.Text) != 0) && (define.SetBAND != ""))
            {
                str = define.SetBAND + (Convert.ToInt32(this.textBox6.Text) * 0x3e8) + "\n";
                num = visa32.viPrintf(visa32.vi, str, str.Length);
            }
            SCM.VNAInitSucess = true;
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void button12_Click(object sender, EventArgs e)
    {
        try
        {
            string writeFmt = ":INIT1:CONT OFF\n";
            int num = visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
            writeFmt = define.SetSweep + "0.05\n";
            num = visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
            Thread.Sleep(100);
            writeFmt = define.SetSweep + this.textBox2.Text + "\n";
            num = visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
            SCM.azYDFlag = false;
            this.buttonAzStop_Click(sender, e);
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void button13_Click(object sender, EventArgs e)
    {
        try
        {
            this.timerTest.Enabled = true;
            this.button15.Enabled = false;
            define.Sleep(50L);
            this.timeTestC = 0;
            this.timeFlag = 1;
            SCM.azYDFlag = false;
            this.textBoxAzDW.Text = "182";
            SCM.azDwAngle = Convert.ToSingle(this.textBoxAzDW.Text);
            this.buttonAzCW_Click(sender, e);
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void button14_Click(object sender, EventArgs e)
    {
        try
        {
            string writeFmt = ":INIT1:CONT OFF\n";
            int num = visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
            writeFmt = define.SetSweep + "0.05\n";
            num = visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
            Thread.Sleep(100);
            writeFmt = define.SetSweep + this.textBox2.Text + "\n";
            num = visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
            SCM.azYDFlag = true;
            this.textBoxAzDW.Text = this.textBox4.Text;
            SCM.azDwAngle = Convert.ToSingle(this.textBoxAzDW.Text);
            this.buttonAzCCW_Click(sender, e);
            this.button13.Enabled = true;
        }
        catch (Exception exception)
        {
            errLogFunction("buttonTestStart_Click + " + exception.ToString());
        }
    }

    private void button15_Click(object sender, EventArgs e)
    {
        try
        {
            SCM.freqPoint = this.comboBox3.Text;
            string[] separator = new string[] { "," };
            float[][] array = null;
            float[][] numArray2 = null;
            string[] strArray3 = null;
            int newSize = Convert.ToInt32(SCM.freqPoint);
            Array.Resize<string>(ref strArray3, newSize);
            Array.Resize<float[]>(ref array, 2);
            Array.Resize<float[]>(ref numArray2, 2);
            Array.Resize<float>(ref array[1], newSize);
            Array.Resize<float>(ref numArray2[1], newSize);
            Array.Resize<define.map>(ref savedata, 2);
            Array.Resize<float>(ref savedata[1].Angle, newSize);
            Array.Resize<float>(ref savedata[1].Elec, newSize);
            string writeFmt = define.ActivePoint + "\n";
            int num2 = visa32.viPrintf(visa32.vi, writeFmt);
            num2 = visa32.viScanf(visa32.vi, "%s", visa32.BufferString);
            string[] strArray = visa32.BufferString.ToString().Split(separator, StringSplitOptions.None);
            for (int i = 0; i < newSize; i++)
            {
                numArray2[1][i] = Convert.ToSingle(strArray[i * 2]);
                if (newSize == 0x169)
                {
                    array[1][i] = -180 + i;
                }
                else
                {
                    array[1][i] = -180f + Convert.ToSingle((double) (i * 0.5));
                }
                savedata[1].Angle[i] = array[1][i];
                savedata[1].Elec[i] = numArray2[1][i];
            }
            SCM.testMode = 1;
            new SaveOption().Show();
        }
        catch (Exception exception)
        {
            errLogFunction("button15_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void button18_Click(object sender, EventArgs e)
    {
        try
        {
            if ((define.VNAConnect == "TCPIP") || (define.VNAConnect == "USB"))
            {
                if (this.buttonSwep.Text == "单次扫描")
                {
                    if (define.SetSwpSig != null)
                    {
                        visa32.viPrintf(visa32.vi, define.SetSwpSig + "\n");
                        define.Sleep(50L);
                        visa32.viPrintf(visa32.vi, "INIT\n");
                        define.Sleep(50L);
                        this.listBoxNVA.Items[8] = " 扫描状态:单次扫描";
                    }
                    this.buttonSwep.Text = "连续扫描";
                }
                else if (this.buttonSwep.Text == "连续扫描")
                {
                    if (define.SetSwpCon != null)
                    {
                        visa32.viPrintf(visa32.vi, define.SetSwpCon + "\n");
                        define.Sleep(50L);
                        visa32.viPrintf(visa32.vi, "INIT\n");
                        define.Sleep(50L);
                        this.listBoxNVA.Items[8] = " 扫描状态:连续扫描";
                    }
                    this.buttonSwep.Text = "单次扫描";
                }
            }
            if (define.VNAConnect == "NI")
            {
                if (this.buttonSwep.Text == "单次扫描")
                {
                    if (define.SetSwpSig != null)
                    {
                        SCM.device.Write(define.SetSwpSig + "\n");
                        define.Sleep(50L);
                        this.listBoxNVA.Items[8] = " 扫描状态:单次扫描";
                    }
                    this.buttonSwep.Text = "连续扫描";
                }
                else if (this.buttonSwep.Text == "连续扫描")
                {
                    if (define.SetSwpCon != null)
                    {
                        SCM.device.Write(define.SetSwpCon + "\n");
                        define.Sleep(50L);
                        this.listBoxNVA.Items[8] = " 扫描状态:连续扫描";
                    }
                    this.buttonSwep.Text = "单次扫描";
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void button2_Click(object sender, EventArgs e)
    {
        this.textBoxAzYD.Text = Convert.ToString(-180);
        this.buttonAzYD_Click(sender, e);
    }

    private void button7_Click(object sender, EventArgs e)
    {
        try
        {
            TimerTest test = new TimerTest();
            test.Show();
            test.Focus();
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void button8_Click(object sender, EventArgs e)
    {
        try
        {
            if (define.SetSweep != "")
            {
                string writeFmt = ":SENS1:SWE:TIME:AUTO OFF\n";
                int num = visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                writeFmt = define.SetSweep + this.textBox2.Text + "\n";
                num = visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
            }
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void button9_Click(object sender, EventArgs e)
    {
        try
        {
            if (define.SetPoint != "")
            {
                SCM.freqPoint = this.comboBox3.Text;
                string writeFmt = define.SetPoint + Convert.ToSingle(SCM.freqPoint) + "\n";
                int num = visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
            }
            define.Sleep(30L);
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void buttonAuto_Click(object sender, EventArgs e)
    {
        this.buttonAzStop_Click(sender, e);
        this.buttonElStop_Click(sender, e);
        SCM.testFreqArr[1] = "960";
        Array.Resize<string>(ref this.Freq, SCM.testFreqArr.Length);
        Array.Resize<float[]>(ref this.AzD3Angle, SCM.testFreqArr.Length);
        Array.Resize<float[]>(ref this.RvD3Angle, SCM.testFreqArr.Length);
        Array.Resize<float[]>(ref this.D3Elec, SCM.testFreqArr.Length);
        Array.Resize<float[]>(ref this.saveAzD3Angle, SCM.testFreqArr.Length);
        Array.Resize<float[]>(ref this.saveRvD3Angle, SCM.testFreqArr.Length);
        Array.Resize<float[]>(ref this.saveD3Elec, SCM.testFreqArr.Length);
        for (int i = 1; i < SCM.testFreqArr.Length; i++)
        {
            if ((SCM.testFreqArr[i] == "") || (SCM.testFreqArr == null))
            {
                break;
            }
            Array.Resize<float>(ref this.saveAzD3Angle[i], 1);
            Array.Resize<float>(ref this.saveRvD3Angle[i], 1);
            Array.Resize<float>(ref this.saveD3Elec[i], 1);
        }
        this.sBitmap = (Bitmap) this.pictureBox1.Image;
        this.BacksBitmap = (Bitmap) this.pictureBox1.Image;
        define.CutAngle = Convert.ToInt32(this.textBox7.Text);
        define.RvCutAngle = Convert.ToInt32(this.textBox9.Text);
        SCM.testAngleBound = 180f;
        SCM.testFX = 1;
        this.StartAngle = Convert.ToSingle(SCM.azAngle);
        if (Convert.ToSingle(SCM.azAngle.ToString("0.0")) == 0f)
        {
            this.stsAngle = -90f;
        }
        else
        {
            this.stsAngle = 90f;
        }
        SCM.autoTestStart = 2;
        SCM.autoTestend = 1;
        this.timer3D.Enabled = true;
        this.TestOver = false;
        this.sPointNum = 0;
        new Thread(new ThreadStart(this.ReadElec)).Start();
        this.listBoxAutoTest.Items[3] = " 当前动作:3D数据测试";
    }

    private void buttonAutoTest_Click(object sender, EventArgs e)
    {
        this.toolStripButton5_Click(sender, e);
    }

    private void buttonAzCa_Click(object sender, EventArgs e)
    {
        int num2 = 0;
        int num3 = 0;
        int num4 = 0;
        try
        {
            if (((this.toolStripTextBox1.Text == "0") || (this.toolStripTextBox1.Text == "")) || (this.toolStripTextBox1.Text == null))
            {
                SCM.AngleZeroText = 0f;
            }
            else
            {
                SCM.AngleZeroText = Convert.ToSingle(this.toolStripTextBox1.Text);
                if (SCM.AngleZeroText < 0f)
                {
                    SCM.AngleZeroText += 360f;
                }
            }
            if (!define.ScmAz)
            {
                SCM.azAngleZero = SCM.azAngleOld - SCM.AngleZeroText;
                if (SCM.azAngleZero > 180f)
                {
                    SCM.azAngleZero -= 360f;
                }
                if (SCM.azAngleZero < -180f)
                {
                    SCM.azAngleZero += 360f;
                }
                if (SCM.azAngleZero > 180f)
                {
                    SCM.azAngleZero -= 360f;
                }
                if (SCM.azAngleZero < -180f)
                {
                    SCM.azAngleZero += 360f;
                }
                WriteINI("AngleData", "azAngleZero", Convert.ToString(SCM.azAngleZero), "SystemOption.ini");
                SCM.Az_angle_Flag = 1;
                SCM.Dn_angle_Flag = 0;
                this.serialPortEl.Write("#01\r");
                Thread.Sleep(30);
                this.serialPortEl.Write("#01\r");
                SCM.limit_azangle = SCM.azAngleZero;
                SCM.Limit_CWazAngle = 0f;
            }
            else
            {
                SCM.Send_Cmd[1] = 1;
                this.serialPortScm.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
                define.Sleep(30L);
                SCM.AngleZeroText = (Math.Abs(SCM.AngleZeroText) * 800000f) / 360f;
                SCM.Send_Data[1] = 0x2c;
                SCM.Send_Data[3] = Convert.ToByte((int) (SCM.AngleZeroText / 65536f));
                SCM.Send_Data[4] = Convert.ToByte((int) ((SCM.AngleZeroText % 65536f) / 256f));
                SCM.Send_Data[5] = Convert.ToByte((int) ((SCM.AngleZeroText % 65536f) % 256f));
                if ((SCM.Send_Data[3] == 0xff) || (SCM.Send_Data[3] == 0xfe))
                {
                    SCM.Send_Data[3] = Convert.ToByte((int) (0xff - SCM.Send_Data[3]));
                    num2 = 1;
                }
                else
                {
                    num2 = 0;
                }
                if ((SCM.Send_Data[4] == 0xff) || (SCM.Send_Data[4] == 0xfe))
                {
                    SCM.Send_Data[4] = Convert.ToByte((int) (0xff - SCM.Send_Data[4]));
                    num3 = 1;
                }
                else
                {
                    num3 = 0;
                }
                if ((SCM.Send_Data[5] == 0xff) || (SCM.Send_Data[5] == 0xfe))
                {
                    SCM.Send_Data[5] = Convert.ToByte((int) (0xff - SCM.Send_Data[5]));
                    num4 = 1;
                }
                else
                {
                    num4 = 0;
                }
                int num = (num2 | num3) | num4;
                SCM.Send_Data[2] = Convert.ToByte(num);
                this.serialPortScm.Write(SCM.Send_Data, 0, SCM.Send_Data.Length);
                define.Sleep(30L);
                SCM.Az_angle_Flag = 1;
                SCM.limit_azangle = 0f;
                SCM.Limit_CWazAngle = 0f;
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonRvDW_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonAzCCW_Click(object sender, EventArgs e)
    {
        try
        {
            SCM.Limit_az = 2;
            if (this.serialPortScm.IsOpen)
            {
                SCM.Dn_angle_Flag = 0;
                this.OpenZero();
                this.buttonStop("AZ");
                this.trackBarAz_Scroll(sender, e);
                Thread.Sleep(30);
                SCM.Send_Cmd[1] = 0x21;
                this.serialPortScm.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
                SCM.Az_angle_Flag = 1;
                SCM.AzFxint = 2;
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonAzCCW_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonAzCW_Click(object sender, EventArgs e)
    {
        try
        {
            SCM.Limit_az = 1;
            if (this.serialPortScm.IsOpen)
            {
                SCM.Dn_angle_Flag = 0;
                this.OpenZero();
                this.buttonStop("AZ");
                this.trackBarAz_Scroll(sender, e);
                Thread.Sleep(30);
                SCM.Send_Cmd[1] = 0x20;
                this.serialPortScm.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
                SCM.Az_angle_Flag = 1;
                SCM.AzFxint = 1;
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonAzCW_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonAzDW_Click(object sender, EventArgs e)
    {
        if (this.serialPortScm.IsOpen)
        {
            try
            {
                float num = Convert.ToSingle(this.textBoxAzAngle.Text);
                float num2 = Convert.ToSingle(this.textBoxAzDW.Text);
                SCM.azDwAngle = num2;
                float num3 = num2 - num;
                if (num3 > 180f)
                {
                    num3 -= 360f;
                }
                if (num3 < -180f)
                {
                    num3 += 360f;
                }
                if (Math.Abs(num3) == 0f)
                {
                    if (SCM.autoTestStart > 0)
                    {
                        SCM.autoTestend++;
                    }
                }
                else
                {
                    if (Math.Abs(num3) < 4f)
                    {
                        this.trackBarAz.Value = this.trackBarAz.Minimum;
                        this.trackBarAz_Scroll(sender, e);
                    }
                    SCM.azYDFlag = true;
                    if (!define.ScmAz)
                    {
                        if (num3 > 0f)
                        {
                            this.buttonAzCW_Click(sender, e);
                        }
                        if (num3 < 0f)
                        {
                            this.buttonAzCCW_Click(sender, e);
                        }
                    }
                    else
                    {
                        SCM.Az_angle_Flag = 1;
                        this.OpenZero();
                        this.buttonStop("AZ");
                        SCM.Azbuttonflag = 1;
                        this.trackBarAz_Scroll(sender, e);
                        Thread.Sleep(50);
                        if (num3 > 0f)
                        {
                            SCM.Send_Data[1] = 50;
                            SCM.Limit_az = 1;
                            SCM.AzFxint = 1;
                        }
                        if (num3 < 0f)
                        {
                            SCM.Send_Data[1] = 0x38;
                            SCM.Limit_az = 2;
                            SCM.AzFxint = 2;
                        }
                        int num4 = Convert.ToInt32((float) ((Math.Abs(num3) * 800000f) / 360f));
                        SCM.Send_Data[2] = 0;
                        SCM.Send_Data[3] = Convert.ToByte((int) (num4 / 0x10000));
                        SCM.Send_Data[4] = Convert.ToByte((int) ((num4 % 0x10000) / 0x100));
                        SCM.Send_Data[5] = Convert.ToByte((int) ((num4 % 0x10000) % 0x100));
                        if ((SCM.Send_Data[3] == 0xff) || (SCM.Send_Data[3] == 0xfe))
                        {
                            SCM.Send_Data[3] = Convert.ToByte((int) (0xff - SCM.Send_Data[3]));
                            SCM.Send_Data[2] = Convert.ToByte((int) (SCM.Send_Data[2] | 4));
                        }
                        if ((SCM.Send_Data[4] == 0xff) || (SCM.Send_Data[4] == 0xfe))
                        {
                            SCM.Send_Data[4] = Convert.ToByte((int) (0xff - SCM.Send_Data[4]));
                            SCM.Send_Data[2] = Convert.ToByte((int) (SCM.Send_Data[2] | 2));
                        }
                        if ((SCM.Send_Data[5] == 0xff) || (SCM.Send_Data[5] == 0xfe))
                        {
                            SCM.Send_Data[5] = Convert.ToByte((int) (0xff - SCM.Send_Data[5]));
                            SCM.Send_Data[2] = Convert.ToByte((int) (SCM.Send_Data[2] | 1));
                        }
                        this.serialPortScm.Write(SCM.Send_Data, 0, SCM.Send_Data.Length);
                    }
                }
            }
            catch (Exception exception)
            {
                errLogFunction("buttonAzDW_Click + " + exception.ToString());
                MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
        }
    }

    private void buttonAzStop_Click(object sender, EventArgs e)
    {
        try
        {
            if (this.serialPortScm.IsOpen)
            {
                SCM.Send_Cmd[1] = 0x19;
                this.serialPortScm.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
                Thread.Sleep(30);
                this.serialPortScm.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
                SCM.azYDFlag = false;
                SCM.azjsFlag = 0;
                SCM.AzFxint = 0;
                define.Sleep(30L);
                SCM.Az_angle_Flag = 0;
                SCM.dnDwAngle2 = 0f;
                SCM.dnDnscm = false;
                this.buttonStart();
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonAzStop_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonAzXL_Click(object sender, EventArgs e)
    {
        try
        {
            if (this.serialPortScm.IsOpen)
            {
                this.OpenZero();
                this.buttonStop("AZ");
                SCM.Send_Data[1] = 0x62;
                SCM.Send_Data[2] = 0;
                float num = (Math.Abs(1) * 0xc3500L) / 360L;
                SCM.Send_Data[3] = Convert.ToByte((int) (num / 65536f));
                SCM.Send_Data[4] = Convert.ToByte((int) ((num % 65536f) / 256f));
                SCM.Send_Data[5] = Convert.ToByte((int) ((num % 65536f) % 256f));
                if ((SCM.Send_Data[3] == 0xff) || (SCM.Send_Data[3] == 0xfe))
                {
                    SCM.Send_Data[3] = Convert.ToByte((int) (0xff - SCM.Send_Data[3]));
                    SCM.Send_Data[2] = Convert.ToByte((int) (SCM.Send_Data[2] | 4));
                }
                if ((SCM.Send_Data[4] == 0xff) || (SCM.Send_Data[4] == 0xfe))
                {
                    SCM.Send_Data[4] = Convert.ToByte((int) (0xff - SCM.Send_Data[4]));
                    SCM.Send_Data[2] = Convert.ToByte((int) (SCM.Send_Data[2] | 2));
                }
                if ((SCM.Send_Data[5] == 0xff) || (SCM.Send_Data[5] == 0xfe))
                {
                    SCM.Send_Data[5] = Convert.ToByte((int) (0xff - SCM.Send_Data[5]));
                    SCM.Send_Data[2] = Convert.ToByte((int) (SCM.Send_Data[2] | 1));
                }
                this.serialPortScm.Write(SCM.Send_Data, 0, SCM.Send_Data.Length);
                define.Sleep(30L);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonAzXL_Click + " + exception.ToString());
        }
    }

    private void buttonAzYD_Click(object sender, EventArgs e)
    {
        try
        {
            float num = Convert.ToSingle(this.textBoxAzAngle.Text);
            float num2 = Convert.ToSingle(this.textBoxAzYD.Text);
            SCM.dnDwAngle2 = num2;
            SCM.azDwAngle = Convert.ToSingle((float) (num + num2));
            if (SCM.azDwAngle > 180f)
            {
                SCM.azDwAngle -= 360f;
            }
            if (SCM.azDwAngle < -180f)
            {
                SCM.azDwAngle += 360f;
            }
            if ((num2 > 0f) && (SCM.azDwAngle <= 0f))
            {
                SCM.azDwAngle += 360f;
            }
            if ((num2 < 0f) && (SCM.azDwAngle < 0f))
            {
                SCM.azDwAngle += 360f;
            }
            if (Math.Abs(num2) < 0.1)
            {
                if (SCM.autoTestStart > 0)
                {
                    SCM.autoTestend++;
                }
            }
            else
            {
                if (Math.Abs(num2) < 2f)
                {
                    this.trackBarAz.Value = this.trackBarAz.Minimum;
                    this.trackBarAz_Scroll(sender, e);
                }
                SCM.azYDFlag = true;
                if (!define.ScmAz)
                {
                    SCM.azYDFlag = true;
                    if (num2 > 0f)
                    {
                        this.buttonAzCW_Click(sender, e);
                    }
                    if (num2 < 0f)
                    {
                        this.buttonAzCCW_Click(sender, e);
                    }
                }
                else
                {
                    this.OpenZero();
                    this.buttonStop("AZ");
                    SCM.Azbuttonflag = 1;
                    this.trackBarAz_Scroll(sender, e);
                    Thread.Sleep(50);
                    if (num2 > 0f)
                    {
                        SCM.Send_Data[1] = 50;
                        SCM.Limit_az = 1;
                        SCM.AzFxint = 1;
                    }
                    if (num2 < 0f)
                    {
                        SCM.Send_Data[1] = 0x38;
                        SCM.Limit_az = 2;
                        SCM.AzFxint = 2;
                    }
                    int num7 = Convert.ToInt32((float) ((Math.Abs(num2) * 800000f) / 360f));
                    SCM.Send_Data[2] = 0;
                    SCM.Send_Data[3] = Convert.ToByte((int) (num7 / 0x10000));
                    SCM.Send_Data[4] = Convert.ToByte((int) ((num7 % 0x10000) / 0x100));
                    SCM.Send_Data[5] = Convert.ToByte((int) ((num7 % 0x10000) % 0x100));
                    if ((SCM.Send_Data[3] == 0xff) || (SCM.Send_Data[3] == 0xfe))
                    {
                        SCM.Send_Data[3] = Convert.ToByte((int) (0xff - SCM.Send_Data[3]));
                        SCM.Send_Data[2] = Convert.ToByte((int) (SCM.Send_Data[2] | 4));
                    }
                    if ((SCM.Send_Data[4] == 0xff) || (SCM.Send_Data[4] == 0xfe))
                    {
                        SCM.Send_Data[4] = Convert.ToByte((int) (0xff - SCM.Send_Data[4]));
                        SCM.Send_Data[2] = Convert.ToByte((int) (SCM.Send_Data[2] | 2));
                    }
                    if ((SCM.Send_Data[5] == 0xff) || (SCM.Send_Data[5] == 0xfe))
                    {
                        SCM.Send_Data[5] = Convert.ToByte((int) (0xff - SCM.Send_Data[5]));
                        SCM.Send_Data[2] = Convert.ToByte((int) (SCM.Send_Data[2] | 1));
                    }
                    this.serialPortScm.Write(SCM.Send_Data, 0, SCM.Send_Data.Length);
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonAzYD_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonDnCa_Click(object sender, EventArgs e)
    {
        try
        {
            if (((this.toolStripTextBox4.Text == "0") || (this.toolStripTextBox4.Text == "")) || (this.toolStripTextBox4.Text == null))
            {
                SCM.AngleZeroText = 0f;
            }
            else
            {
                SCM.AngleZeroText = Convert.ToSingle(this.toolStripTextBox4.Text);
                if (SCM.AngleZeroText < 0f)
                {
                    SCM.AngleZeroText += 360f;
                }
            }
            if (!define.ScmDn)
            {
                SCM.dnAngleZero = SCM.dnAngleOld - SCM.AngleZeroText;
                if (SCM.dnAngleZero > 180f)
                {
                    SCM.dnAngleZero -= 360f;
                }
                if (SCM.dnAngleZero < -180f)
                {
                    SCM.dnAngleZero += 360f;
                }
                if (SCM.dnAngleZero > 180f)
                {
                    SCM.dnAngleZero -= 360f;
                }
                if (SCM.dnAngleZero < -180f)
                {
                    SCM.dnAngleZero += 360f;
                }
                WriteINI("AngleData", "dnAngleZero", Convert.ToString(SCM.dnAngleZero), "SystemOption.ini");
                SCM.Dn_angle_Flag = 1;
                SCM.Az_angle_Flag = 0;
                this.serialPortAz.Write("#04\r");
                Thread.Sleep(30);
                this.serialPortAz.Write("#04\r");
            }
            else
            {
                this.GetMultAxesParam(0x33, 0f, 0f, 0f, Convert.ToInt32(0), 1);
                if (this.dnCa == 0)
                {
                    SCM.dnAngle = -1.5f;
                    this.dnCa++;
                }
                else
                {
                    this.dnCa = 0;
                    SCM.dnAngle = SCM.AngleZeroText;
                }
                SCM.Dn_angle_Flag = 1;
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonDnCa_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonDnCCW_Click(object sender, EventArgs e)
    {
        try
        {
            this.OpenZero();
            this.buttonStop("DN");
            this.buttonDnStop.Enabled = true;
            SCM.Dn_angle_Flag = 1;
            SCM.DnFxint = 2;
            Thread.Sleep(30);
            this.trackBarDn_Scroll(sender, e);
            this.GetMultAxesParam(define.dnZhou, dnLowSpeed, dnHighSpeed, dnAccel, Convert.ToInt32(0xf3fcf), 1);
        }
        catch (Exception exception)
        {
            errLogFunction("buttonDnCCW_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonDnCW_Click(object sender, EventArgs e)
    {
        try
        {
            this.OpenZero();
            this.buttonStop("DN");
            this.buttonDnStop.Enabled = true;
            SCM.Dn_angle_Flag = 1;
            SCM.DnFxint = 1;
            Thread.Sleep(30);
            this.trackBarDn_Scroll(sender, e);
            this.GetMultAxesParam(define.dnZhou, dnLowSpeed, dnHighSpeed, dnAccel, Convert.ToInt32(-999375), 1);
        }
        catch (Exception exception)
        {
            errLogFunction("buttonDnCW_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonDnDW_Click(object sender, EventArgs e)
    {
        try
        {
            float num = Convert.ToSingle(this.textBoxDnAngle.Text);
            float num2 = Convert.ToSingle(this.textBoxDnDW.Text);
            SCM.dnDwAngle = num2;
            float num3 = num2 - num;
            if (num3 > 180f)
            {
                num3 -= 360f;
            }
            if (num3 < -180f)
            {
                num3 += 360f;
            }
            if (Math.Abs(num3) == 0f)
            {
                if (SCM.autoTestStart > 0)
                {
                    SCM.autoTestend++;
                }
            }
            else
            {
                if (Math.Abs(num3) < 1f)
                {
                    this.trackBarDn.Value = this.trackBarDn.Minimum;
                    this.trackBarDn_Scroll(sender, e);
                }
                SCM.dnYDFlag = true;
                if (!(define.ScmDn || ((SCM.dnDwAngle == 360f) && (SCM.dnDwAngle == -360f))))
                {
                    SCM.dnYDFlag = true;
                    if (num3 > 0f)
                    {
                        this.buttonDnCW_Click(sender, e);
                    }
                    if (num3 < 0f)
                    {
                        this.buttonDnCCW_Click(sender, e);
                    }
                }
                else
                {
                    SCM.Dn_angle_Flag = 1;
                    this.OpenZero();
                    this.buttonStop("DN");
                    this.buttonDnStop.Enabled = true;
                    if (num3 >= 0f)
                    {
                        SCM.DnFxint = 1;
                    }
                    if (num3 < 0f)
                    {
                        SCM.DnFxint = 2;
                    }
                    this.trackBarDn_Scroll(sender, e);
                    this.GetMultAxesParam(define.dnZhou, dnLowSpeed, dnHighSpeed, dnAccel, Convert.ToInt32((float) ((num3 * 999375f) / 50f)), 1);
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonDnDW_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonDnStop_Click(object sender, EventArgs e)
    {
        try
        {
            this.GetMultAxesParam(0x34, 0f, 0f, 0f, Convert.ToInt32(0), 1);
            SCM.dnYDFlag = false;
            Thread.Sleep(30);
            SCM.Dn_angle_Flag = 0;
            SCM.DnFxint = 0;
            this.buttonStart();
        }
        catch (Exception exception)
        {
            errLogFunction("buttonDnStop_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonDnYD_Click(object sender, EventArgs e)
    {
        try
        {
            float num = Convert.ToSingle(this.textBoxDnAngle.Text);
            float num2 = Convert.ToSingle(this.textBoxDnYD.Text);
            SCM.dnDwAngle2 = num2;
            SCM.dnDwAngle = Convert.ToSingle((float) (num + num2));
            SCM.dnYDFlag = true;
            if (!define.ScmDn)
            {
                SCM.dnYDFlag = true;
                if (num2 > 0f)
                {
                    this.buttonDnCW_Click(sender, e);
                }
                if (num2 < 0f)
                {
                    this.buttonDnCCW_Click(sender, e);
                }
            }
            else
            {
                SCM.Dn_angle_Flag = 1;
                this.OpenZero();
                this.buttonStop("DN");
                this.buttonDnStop.Enabled = true;
                if (num2 >= 0f)
                {
                    SCM.DnFxint = 1;
                }
                if (num2 < 0f)
                {
                    SCM.DnFxint = 2;
                }
                this.trackBarDn_Scroll(sender, e);
                this.GetMultAxesParam(define.dnZhou, dnLowSpeed, dnHighSpeed, dnAccel, Convert.ToInt32((float) ((num2 * 999375f) / 50f)), 1);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonDnYD_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonElAutoStop_Click(object sender, EventArgs e)
    {
        try
        {
            SCM.autoTestStart = 0;
            SCM.autoTestend = 0;
            this.timerAutoEl.Enabled = false;
            this.buttonAzStop_Click(sender, e);
            this.buttonElStop_Click(sender, e);
            this.buttonDnStop_Click(sender, e);
            this.buttonRvStop_Click(sender, e);
            if (define.riseFX == 1)
            {
                this.buttonElUP.Enabled = false;
                this.buttonElDN.Enabled = true;
            }
            else if (define.riseFX == 2)
            {
                this.buttonElUP.Enabled = true;
                this.buttonElDN.Enabled = false;
            }
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void buttonElCa_Click(object sender, EventArgs e)
    {
        int num2 = 0;
        int num3 = 0;
        int num4 = 0;
        try
        {
            if (((this.toolStripTextBox2.Text == "0") || (this.toolStripTextBox2.Text == "")) || (this.toolStripTextBox2.Text == null))
            {
                SCM.AngleZeroText = 0f;
            }
            else
            {
                SCM.AngleZeroText = Convert.ToSingle(this.toolStripTextBox2.Text);
                if (SCM.AngleZeroText < 0f)
                {
                    SCM.AngleZeroText += 360f;
                }
            }
            if (!define.ScmEl)
            {
                SCM.elAngleZero = SCM.elAngleOld - SCM.AngleZeroText;
                if (SCM.elAngleZero > 180f)
                {
                    SCM.elAngleZero -= 360f;
                }
                if (SCM.elAngleZero < -180f)
                {
                    SCM.elAngleZero += 360f;
                }
                if (SCM.elAngleZero > 180f)
                {
                    SCM.elAngleZero -= 360f;
                }
                if (SCM.elAngleZero < -180f)
                {
                    SCM.elAngleZero += 360f;
                }
                WriteINI("AngleData", "elAngleZero", Convert.ToString(SCM.elAngleZero), "SystemOption.ini");
                SCM.El_angle_Flag = 1;
                this.serialPortEl.Write("#02\r");
                Thread.Sleep(30);
                this.serialPortEl.Write("#02\r");
            }
            else
            {
                SCM.El_angle_Flag = 1;
                SCM.Send_Cmd[1] = 2;
                this.serialPortScm.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
                define.Sleep(30L);
                SCM.AngleZeroText = (Math.Abs(SCM.AngleZeroText) * 320000f) / 360f;
                SCM.Send_Data[1] = 0x2d;
                SCM.Send_Data[3] = Convert.ToByte((int) (SCM.AngleZeroText / 65536f));
                SCM.Send_Data[4] = Convert.ToByte((int) ((SCM.AngleZeroText % 65536f) / 256f));
                SCM.Send_Data[5] = Convert.ToByte((int) ((SCM.AngleZeroText % 65536f) % 256f));
                if ((SCM.Send_Data[3] == 0xff) || (SCM.Send_Data[3] == 0xfe))
                {
                    SCM.Send_Data[3] = Convert.ToByte((int) (0xff - SCM.Send_Data[3]));
                    num2 = 1;
                }
                else
                {
                    num2 = 0;
                }
                if ((SCM.Send_Data[4] == 0xff) || (SCM.Send_Data[4] == 0xfe))
                {
                    SCM.Send_Data[4] = Convert.ToByte((int) (0xff - SCM.Send_Data[4]));
                    num3 = 1;
                }
                else
                {
                    num3 = 0;
                }
                if ((SCM.Send_Data[5] == 0xff) || (SCM.Send_Data[5] == 0xfe))
                {
                    SCM.Send_Data[5] = Convert.ToByte((int) (0xff - SCM.Send_Data[5]));
                    num4 = 1;
                }
                else
                {
                    num4 = 0;
                }
                int num = (num2 | num3) | num4;
                SCM.Send_Data[2] = Convert.ToByte(num);
                this.serialPortScm.Write(SCM.Send_Data, 0, SCM.Send_Data.Length);
                define.Sleep(30L);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonElCa_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonElCCW_Click(object sender, EventArgs e)
    {
        try
        {
            if (this.serialPortScm.IsOpen)
            {
                this.OpenZero();
                this.buttonStop("EL");
                this.buttonElStop.Enabled = true;
                this.trackBarEl_Scroll(sender, e);
                Thread.Sleep(30);
                SCM.Send_Cmd[1] = 0x23;
                this.serialPortScm.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
                SCM.El_angle_Flag = 1;
                SCM.ElFxint = 2;
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonElCCW_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonElCW_Click(object sender, EventArgs e)
    {
        try
        {
            if (this.serialPortScm.IsOpen)
            {
                this.OpenZero();
                this.buttonStop("EL");
                this.buttonElStop.Enabled = true;
                this.trackBarEl_Scroll(sender, e);
                Thread.Sleep(30);
                SCM.Send_Cmd[1] = 0x22;
                this.serialPortScm.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
                SCM.El_angle_Flag = 1;
                SCM.ElFxint = 1;
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonElCW_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonElDN_Click(object sender, EventArgs e)
    {
        try
        {
            SCM.autoTestStart = 1;
            SCM.autoTestend = 0;
            this.buttonElDN.Enabled = false;
            define.riseFX = 2;
            this.timerAutoEl.Enabled = true;
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void buttonElDW_Click(object sender, EventArgs e)
    {
        int num5 = 0;
        int num6 = 0;
        int num7 = 0;
        try
        {
            float num = Convert.ToSingle(this.textBoxElAngle.Text);
            float num2 = Convert.ToSingle(this.textBoxElDW.Text);
            SCM.elDwAngle = num2;
            float num3 = num2 - num;
            if (num3 > 180f)
            {
                num3 -= 360f;
            }
            if (num3 < -180f)
            {
                num3 += 360f;
            }
            if (Math.Abs(num3) < 0.1)
            {
                if (SCM.autoTestStart > 0)
                {
                    SCM.autoTestend++;
                }
            }
            else
            {
                if (Math.Abs(num3) < 1f)
                {
                    this.trackBarEl.Value = this.trackBarEl.Minimum;
                    this.trackBarEl_Scroll(sender, e);
                }
                SCM.elYDFlag = true;
                if (!define.ScmEl)
                {
                    SCM.elYDFlag = true;
                    if (num3 > 0f)
                    {
                        this.buttonElCW_Click(sender, e);
                    }
                    if (num3 < 0f)
                    {
                        this.buttonElCCW_Click(sender, e);
                    }
                }
                else
                {
                    SCM.El_angle_Flag = 1;
                    this.OpenZero();
                    this.buttonStop("EL");
                    this.buttonElStop.Enabled = true;
                    this.trackBarEl_Scroll(sender, e);
                    SCM.Elbuttonflag = 1;
                    define.Sleep(30L);
                    if (num3 > 0f)
                    {
                        SCM.Send_Data[1] = 0x33;
                        SCM.ElFxint = 1;
                    }
                    if (num3 < 0f)
                    {
                        SCM.Send_Data[1] = 0x39;
                        SCM.ElFxint = 2;
                    }
                    int num8 = Convert.ToInt32((float) ((Math.Abs(num3) * 320000f) / 360f));
                    SCM.Send_Data[3] = Convert.ToByte(Convert.ToInt16((int) (num8 / 0x10000)));
                    SCM.Send_Data[4] = Convert.ToByte((int) (Convert.ToInt16((int) (num8 / 0x100)) - (Convert.ToInt16((int) (num8 / 0x10000)) * 0x100)));
                    SCM.Send_Data[5] = Convert.ToByte((int) (num8 - (Convert.ToInt16((int) (num8 / 0x100)) * 0x100)));
                    if ((SCM.Send_Data[3] == 0xff) || (SCM.Send_Data[3] == 0xfe))
                    {
                        SCM.Send_Data[3] = Convert.ToByte((int) (0xff - SCM.Send_Data[3]));
                        num5 = 1;
                    }
                    if ((SCM.Send_Data[4] == 0xff) || (SCM.Send_Data[4] == 0xfe))
                    {
                        SCM.Send_Data[4] = Convert.ToByte((int) (0xff - SCM.Send_Data[4]));
                        num6 = 1;
                    }
                    if ((SCM.Send_Data[5] == 0xff) || (SCM.Send_Data[5] == 0xfe))
                    {
                        SCM.Send_Data[5] = Convert.ToByte((int) (0xff - SCM.Send_Data[5]));
                        num7 = 1;
                    }
                    int num4 = (num5 | num6) | num7;
                    SCM.Send_Data[2] = Convert.ToByte(num4);
                    this.serialPortScm.Write(SCM.Send_Data, 0, SCM.Send_Data.Length);
                    define.Sleep(50L);
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonElDW_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonElStop_Click(object sender, EventArgs e)
    {
        try
        {
            if (this.serialPortScm.IsOpen)
            {
                SCM.El_angle_Flag = 0;
                SCM.Send_Cmd[1] = 0x1a;
                this.serialPortScm.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
                Thread.Sleep(30);
                SCM.elYDFlag = false;
                SCM.ElFxint = 0;
                this.buttonStart();
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonElStop_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonElUP_Click(object sender, EventArgs e)
    {
        try
        {
            SCM.autoTestStart = 1;
            SCM.autoTestend = 0;
            this.buttonElUP.Enabled = false;
            define.riseFX = 1;
            this.timerAutoEl.Enabled = true;
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void buttonElXL_Click(object sender, EventArgs e)
    {
        try
        {
            if (this.serialPortScm.IsOpen)
            {
                this.OpenZero();
                this.buttonStop("EL");
                this.buttonElStop.Enabled = true;
                SCM.Send_Data[1] = 0x63;
                SCM.Send_Data[2] = 0;
                float num = (Math.Abs(1) * 0x4e200L) / 360L;
                SCM.Send_Data[3] = Convert.ToByte((int) (num / 65536f));
                SCM.Send_Data[4] = Convert.ToByte((int) ((num % 65536f) / 256f));
                SCM.Send_Data[5] = Convert.ToByte((int) ((num % 65536f) % 256f));
                if ((SCM.Send_Data[3] == 0xff) || (SCM.Send_Data[3] == 0xfe))
                {
                    SCM.Send_Data[3] = Convert.ToByte((int) (0xff - SCM.Send_Data[3]));
                    SCM.Send_Data[2] = Convert.ToByte((int) (SCM.Send_Data[2] | 4));
                }
                if ((SCM.Send_Data[4] == 0xff) || (SCM.Send_Data[4] == 0xfe))
                {
                    SCM.Send_Data[4] = Convert.ToByte((int) (0xff - SCM.Send_Data[4]));
                    SCM.Send_Data[2] = Convert.ToByte((int) (SCM.Send_Data[2] | 2));
                }
                if ((SCM.Send_Data[5] == 0xff) || (SCM.Send_Data[5] == 0xfe))
                {
                    SCM.Send_Data[5] = Convert.ToByte((int) (0xff - SCM.Send_Data[5]));
                    SCM.Send_Data[2] = Convert.ToByte((int) (SCM.Send_Data[2] | 1));
                }
                this.serialPortScm.Write(SCM.Send_Data, 0, SCM.Send_Data.Length);
                define.Sleep(30L);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonElXL_Click + " + exception.ToString());
        }
    }

    private void buttonElYD_Click(object sender, EventArgs e)
    {
        int num4 = 0;
        int num5 = 0;
        int num6 = 0;
        try
        {
            float num = Convert.ToSingle(this.textBoxElAngle.Text);
            float num2 = Convert.ToSingle(this.textBoxElYD.Text);
            SCM.elDwAngle = num + num2;
            if (SCM.elDwAngle > 180f)
            {
                SCM.elDwAngle -= 360f;
            }
            if (SCM.elDwAngle < -180f)
            {
                SCM.elDwAngle += 360f;
            }
            if (Math.Abs(num2) < 0.1)
            {
                if (SCM.autoTestStart > 0)
                {
                    SCM.autoTestend++;
                }
            }
            else
            {
                if (Math.Abs(num2) < 2f)
                {
                    this.trackBarEl.Value = this.trackBarEl.Minimum;
                    this.trackBarEl_Scroll(sender, e);
                }
                SCM.elYDFlag = true;
                if (!define.ScmEl)
                {
                    SCM.elYDFlag = true;
                    if (num2 > 0f)
                    {
                        this.buttonElCW_Click(sender, e);
                    }
                    if (num2 < 0f)
                    {
                        this.buttonElCCW_Click(sender, e);
                    }
                }
                else
                {
                    SCM.El_angle_Flag = 1;
                    this.OpenZero();
                    this.buttonStop("EL");
                    this.buttonElStop.Enabled = true;
                    SCM.Elbuttonflag = 1;
                    this.trackBarEl_Scroll(sender, e);
                    define.Sleep(30L);
                    if (num2 > 0f)
                    {
                        SCM.Send_Data[1] = 0x33;
                        SCM.ElFxint = 1;
                    }
                    if (num2 < 0f)
                    {
                        SCM.Send_Data[1] = 0x39;
                        SCM.ElFxint = 2;
                    }
                    int num7 = Convert.ToInt32((float) ((Math.Abs(num2) * 320000f) / 360f));
                    SCM.Send_Data[3] = Convert.ToByte(Convert.ToInt16((int) (num7 / 0x10000)));
                    SCM.Send_Data[4] = Convert.ToByte((int) (Convert.ToInt16((int) (num7 / 0x100)) - (Convert.ToInt16((int) (num7 / 0x10000)) * 0x100)));
                    SCM.Send_Data[5] = Convert.ToByte((int) (num7 - (Convert.ToInt16((int) (num7 / 0x100)) * 0x100)));
                    if ((SCM.Send_Data[3] == 0xff) || (SCM.Send_Data[3] == 0xfe))
                    {
                        SCM.Send_Data[3] = Convert.ToByte((int) (0xff - SCM.Send_Data[3]));
                        num4 = 1;
                    }
                    if ((SCM.Send_Data[4] == 0xff) || (SCM.Send_Data[4] == 0xfe))
                    {
                        SCM.Send_Data[4] = Convert.ToByte((int) (0xff - SCM.Send_Data[4]));
                        num5 = 1;
                    }
                    if ((SCM.Send_Data[5] == 0xff) || (SCM.Send_Data[5] == 0xfe))
                    {
                        SCM.Send_Data[5] = Convert.ToByte((int) (0xff - SCM.Send_Data[5]));
                        num6 = 1;
                    }
                    int num3 = (num4 | num5) | num6;
                    SCM.Send_Data[2] = Convert.ToByte(num3);
                    this.serialPortScm.Write(SCM.Send_Data, 0, SCM.Send_Data.Length);
                    define.Sleep(50L);
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonElYD_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonExit_Click(object sender, EventArgs e)
    {
        Application.Exit();
    }

    private void buttonFreq1_Click(object sender, EventArgs e)
    {
        try
        {
            SCM.newIndex = 2;
            this.ChangeColor();
            this.grouper2Step.BackgroundColor = Color.LightGreen;
            this.toolStripButton3_Click(sender, e);
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void buttonFreqPF_Click(object sender, EventArgs e)
    {
        try
        {
            string writeFmt = "";
            if ((define.VNAConnect == "TCPIP") || (define.VNAConnect == "USB"))
            {
                if (define.SetMKPK != null)
                {
                    writeFmt = define.SetMKPK + "\n";
                    visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                }
                if (define.SetMKCF != null)
                {
                    writeFmt = define.SetMKCF + "\n";
                    visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                }
            }
            if (define.VNAConnect == "NI")
            {
                if (define.SetMKPK != null)
                {
                    writeFmt = define.SetMKPK + "\n";
                    SCM.device.Write(writeFmt);
                }
                if (define.SetMKCF != null)
                {
                    writeFmt = define.SetMKCF + "\n";
                    SCM.device.Write(writeFmt);
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void buttonFreqSet_Click(object sender, EventArgs e)
    {
        try
        {
            string writeFmt = "";
            Array.Resize<string>(ref SCM.testFreqArr, 0);
            Array.Resize<string>(ref SCM.testFreqArr, 10);
            for (int i = 1; i < 10; i++)
            {
                SCM.testFreqArr[i] = "";
            }
            if ((define.VNAConnect == "TCPIP") || (define.VNAConnect == "USB"))
            {
                switch (this.comboBoxFreq.Text)
                {
                    case "中心频率(MHZ)":
                        if (define.SetCenter != null)
                        {
                            SCM.testFreqArr[1] = this.textBoxRrveFreq.Text.ToString();
                            if (define.SetCenter != null)
                            {
                                writeFmt = define.SetCenter + " " + this.textBoxRrveFreq.Text + "MHZ\n";
                                visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                                define.Sleep(50L);
                                this.listBoxNVA.Items[2] = " 测试频点:" + this.textBoxRrveFreq.Text + "MHZ";
                            }
                            if (define.SetMark[1] != null)
                            {
                                visa32.viPrintf(visa32.vi, define.SetMKPK + "\n");
                                define.Sleep(50L);
                                visa32.viPrintf(visa32.vi, define.SetMKCF + "\n");
                            }
                        }
                        break;

                    case "扫描带宽(KHZ)":
                        if (define.SetSPAN != null)
                        {
                            writeFmt = define.SetSPAN + " " + this.textBoxRrveFreq.Text + "KHZ\n";
                            visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                            define.Sleep(50L);
                            this.listBoxNVA.Items[4] = " 扫描带宽:" + this.textBoxRrveFreq.Text + "MHZ";
                        }
                        break;

                    case "中频带宽(KHZ)":
                        if (define.SetRBW != null)
                        {
                            writeFmt = define.SetRBW + " " + this.textBoxRrveFreq.Text + "KHZ\n";
                            visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                            define.Sleep(50L);
                            this.listBoxNVA.Items[5] = " 中频带宽:" + this.textBoxRrveFreq.Text + "KHZ";
                        }
                        break;

                    case "视频带宽(KHZ)":
                        if (define.SetVBW != null)
                        {
                            writeFmt = define.SetVBW + " " + this.textBoxRrveFreq.Text + "KHZ\n";
                            visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                            define.Sleep(50L);
                            this.listBoxNVA.Items[6] = " 视频带宽:" + this.textBoxRrveFreq.Text + "KHZ";
                        }
                        break;

                    case "参考电平(DB)":
                        if (define.SetRLEV != null)
                        {
                            writeFmt = define.SetRLEV + " " + this.textBoxRrveFreq.Text.Trim() + "\n";
                            visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                            define.Sleep(50L);
                            this.listBoxNVA.Items[3] = " 参考电平:" + this.textBoxRrveFreq.Text + "dB";
                        }
                        break;

                    case "扫描时间(MS)":
                        if (define.SetSweep != null)
                        {
                            writeFmt = define.SetSweep + " " + this.textBoxRrveFreq.Text + "MS\n";
                            visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                            define.Sleep(50L);
                            float num3 = Convert.ToSingle(this.textBoxRrveFreq.Text) / 1000f;
                            this.listBoxNVA.Items[7] = " 扫描时间:" + num3.ToString() + "S";
                        }
                        break;

                    case "仪器复位":
                        if (define.SetPSET != null)
                        {
                            writeFmt = define.SetPSET + "\n";
                            visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                            define.Sleep(50L);
                        }
                        break;
                }
            }
            if (define.VNAConnect == "NI")
            {
                switch (this.comboBoxFreq.SelectedItem.ToString())
                {
                    case "中心频率(MHZ)":
                        SCM.testFreqArr[1] = this.textBoxRrveFreq.Text.ToString();
                        if (define.SetCenter != null)
                        {
                            writeFmt = define.SetCenter + this.textBoxRrveFreq.Text + "MHZ\n";
                            SCM.device.Write(writeFmt);
                            define.Sleep(50L);
                            this.listBoxNVA.Items[2] = " 测试频点:" + this.textBoxRrveFreq.Text + "MHZ";
                        }
                        return;

                    case "扫描带宽(KHZ)":
                        if (define.SetSPAN != null)
                        {
                            writeFmt = define.SetSPAN + this.textBoxRrveFreq.Text + "KHZ\n";
                            SCM.device.Write(writeFmt);
                            define.Sleep(50L);
                            this.listBoxNVA.Items[4] = " 扫描带宽:" + this.textBoxRrveFreq.Text + "MHZ";
                        }
                        return;

                    case "中频带宽(KHZ)":
                        if (define.SetRBW != null)
                        {
                            writeFmt = define.SetRBW + this.textBoxRrveFreq.Text + "KHZ\n";
                            SCM.device.Write(writeFmt);
                            define.Sleep(50L);
                            this.listBoxNVA.Items[5] = " 中频带宽:" + this.textBoxRrveFreq.Text + "KHZ";
                        }
                        return;

                    case "视频带宽(KHZ)":
                        if (define.SetVBW != null)
                        {
                            writeFmt = define.SetVBW + this.textBoxRrveFreq.Text + "KHZ\n";
                            SCM.device.Write(writeFmt);
                            define.Sleep(50L);
                            this.listBoxNVA.Items[6] = " 视频带宽:" + this.textBoxRrveFreq.Text + "KHZ";
                        }
                        return;

                    case "参考电平(DB)":
                        if (define.SetRLEV != null)
                        {
                            writeFmt = define.SetRLEV + this.textBoxRrveFreq.Text + "DB\n";
                            SCM.device.Write(writeFmt);
                            define.Sleep(50L);
                            this.listBoxNVA.Items[3] = " 参考电平:" + this.textBoxRrveFreq.Text + "dB";
                        }
                        return;

                    case "扫描时间(MS)":
                        if (define.SetSweep != null)
                        {
                            writeFmt = define.SetSweep + this.textBoxRrveFreq.Text + "MS\n";
                            SCM.device.Write(writeFmt);
                            define.Sleep(50L);
                            this.listBoxNVA.Items[7] = " 扫描时间:" + ((Convert.ToSingle(this.textBoxRrveFreq.Text) / 1000f)).ToString() + "S";
                        }
                        return;

                    case "仪器复位":
                        if (define.SetPSET != null)
                        {
                            writeFmt = define.SetPSET + "\n";
                            SCM.device.Write(writeFmt);
                            define.Sleep(50L);
                        }
                        return;
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonFreqSet_Click + " + exception.ToString());
            MessageBox.Show(exception.ToString(), "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonFsCa_Click(object sender, EventArgs e)
    {
        try
        {
            if (((this.toolStripTextBox7.Text == "0") || (this.toolStripTextBox7.Text == "")) || (this.toolStripTextBox7.Text == null))
            {
                SCM.AngleZeroText = 0f;
            }
            else
            {
                SCM.AngleZeroText = Convert.ToSingle(this.toolStripTextBox7.Text);
                if (SCM.AngleZeroText < 0f)
                {
                    SCM.AngleZeroText += 360f;
                }
            }
            this.GetMultAxesParam(0x47, 0f, 0f, 0f, Convert.ToInt32(0), 1);
            if (this.fsCa == 0)
            {
                SCM.fsAngle = -1.5f;
                this.fsCa++;
            }
            else
            {
                this.fsCa = 0;
                SCM.fsAngle = SCM.AngleZeroText;
            }
            SCM.Fs_angle_Flag = 1;
        }
        catch (Exception exception)
        {
            errLogFunction("buttonRvCa_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonFsCcw_Click(object sender, EventArgs e)
    {
        try
        {
            this.OpenZero();
            this.buttonStop("FS");
            this.buttonFsStop.Enabled = true;
            SCM.Fs_angle_Flag = 1;
            SCM.FsFxint = 2;
            Thread.Sleep(30);
            this.trackBarFS_Scroll(sender, e);
            this.GetMultAxesParam(define.fsZhou, fsLowSpeed, fsHighSpeed, fsAccel, Convert.ToInt32((long) (-800000L)), 1);
        }
        catch (Exception exception)
        {
            errLogFunction("buttonFsCcw_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonFsCw_Click(object sender, EventArgs e)
    {
        try
        {
            this.OpenZero();
            this.buttonStop("FS");
            this.buttonFsStop.Enabled = true;
            SCM.Fs_angle_Flag = 1;
            Thread.Sleep(30);
            this.trackBarFS_Scroll(sender, e);
            SCM.FsFxint = 1;
            this.GetMultAxesParam(define.fsZhou, fsLowSpeed, fsHighSpeed, fsAccel, Convert.ToInt32((long) 0xc3500L), 1);
        }
        catch (Exception exception)
        {
            errLogFunction("buttonFsCw_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonFsDW_Click(object sender, EventArgs e)
    {
        try
        {
            float num = Convert.ToSingle(this.textBoxFsAngle.Text);
            float num2 = Convert.ToSingle(this.textBoxFsDW.Text);
            SCM.fsDwAngle = num2;
            float num3 = num2 - num;
            if (num3 > 180f)
            {
                num3 -= 360f;
            }
            if (num3 < -180f)
            {
                num3 += 360f;
            }
            if (Math.Abs(num3) < 0.1)
            {
                if (SCM.autoTestStart > 0)
                {
                    SCM.autoTestend++;
                }
            }
            else
            {
                if (Math.Abs(num3) < 2f)
                {
                    this.trackBarFS.Value = this.trackBarFS.Minimum;
                    this.trackBarFS_Scroll(sender, e);
                }
                SCM.fsYDFlag = true;
                SCM.Fs_angle_Flag = 1;
                this.OpenZero();
                this.buttonStop("FS");
                this.buttonFsStop.Enabled = true;
                if (num3 >= 0f)
                {
                    SCM.FsFxint = 1;
                }
                if (num3 < 0f)
                {
                    SCM.FsFxint = 2;
                }
                this.trackBarFS_Scroll(sender, e);
                this.GetMultAxesParam(define.fsZhou, fsLowSpeed, fsHighSpeed, fsAccel, Convert.ToInt32((float) ((num3 * 440000f) / 40f)), 1);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonFsDW_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonFsStop_Click(object sender, EventArgs e)
    {
        try
        {
            this.GetMultAxesParam(0x48, 0f, 0f, 0f, Convert.ToInt32(0), 1);
            SCM.fsYDFlag = false;
            SCM.FsFxint = 0;
            this.buttonStart();
            SCM.Fs_angle_Flag = 0;
        }
        catch (Exception exception)
        {
            errLogFunction("buttonFsStop_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonFsYD_Click(object sender, EventArgs e)
    {
        try
        {
            float num = Convert.ToSingle(this.textBoxFsAngle.Text);
            float num2 = Convert.ToSingle(this.textBoxFsYD.Text);
            SCM.fsDwAngle = Convert.ToSingle((float) (num + num2));
            if (SCM.fsDwAngle > 180f)
            {
                SCM.fsDwAngle -= 360f;
            }
            if (SCM.fsDwAngle < -180f)
            {
                SCM.fsDwAngle += 360f;
            }
            if ((num2 > 0f) && (SCM.fsDwAngle <= 0f))
            {
                SCM.fsDwAngle += 360f;
            }
            if ((num2 < 0f) && (SCM.fsDwAngle < 0f))
            {
                SCM.fsDwAngle += 360f;
            }
            if (Math.Abs(num2) == 0f)
            {
                if (SCM.autoTestStart > 0)
                {
                    SCM.autoTestend++;
                }
            }
            else
            {
                if (Math.Abs(num2) < 2f)
                {
                    this.trackBarFS.Value = this.trackBarFS.Minimum;
                    this.trackBarFS_Scroll(sender, e);
                }
                SCM.fsYDFlag = true;
                this.OpenZero();
                this.buttonStop("FS");
                this.buttonFsStop.Enabled = true;
                SCM.Fs_angle_Flag = 1;
                if (num2 >= 0f)
                {
                    SCM.FsFxint = 1;
                }
                if (num2 < 0f)
                {
                    SCM.FsFxint = 2;
                }
                this.trackBarFS_Scroll(sender, e);
                this.GetMultAxesParam(define.fsZhou, fsLowSpeed, fsHighSpeed, fsAccel, Convert.ToInt32((float) ((num2 * 440000f) / 40f)), 1);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonFsYD_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonHPDevice_Click(object sender, EventArgs e)
    {
        try
        {
            string writeFmt = "";
            if (SCM.PNARunning && !(define.VNAType == ""))
            {
                if ((define.VNAConnect == "TCPIP") || (define.VNAConnect == "USB"))
                {
                    Array.Resize<string>(ref SCM.testFreqArr, 0);
                    Array.Resize<string>(ref SCM.testFreqArr, 2);
                    if (define.SetPSET != null)
                    {
                        writeFmt = define.SetPSET + "\n";
                        visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                        define.Sleep(100L);
                    }
                    if (define.SetRLEV != null)
                    {
                        writeFmt = define.SetRLEV + " -10\n";
                        visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                        define.Sleep(50L);
                        this.listBoxNVA.Items[3] = " 参考电平:-10dB";
                    }
                    if (define.SetPowerOFF != null)
                    {
                        writeFmt = define.SetPowerOFF + "\n";
                        visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                        define.Sleep(50L);
                    }
                    if (define.SetS21 != null)
                    {
                        writeFmt = define.SetS21 + "\n";
                        visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                        define.Sleep(50L);
                    }
                    if (define.SetCenter != null)
                    {
                        writeFmt = define.SetCenter + " 12000MHZ\n";
                        visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                        define.Sleep(100L);
                        this.listBoxNVA.Items[2] = " 测试频点:12000MHZ";
                    }
                    if (define.SetPower != null)
                    {
                        writeFmt = define.SetPower + "10\n";
                        visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                        define.Sleep(50L);
                    }
                    if (define.SetSPAN != null)
                    {
                        writeFmt = define.SetSPAN + " 1MHZ\n";
                        visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                        define.Sleep(50L);
                        this.listBoxNVA.Items[4] = " 扫描带宽:1MHZ";
                    }
                    if (define.SetRBW != null)
                    {
                        writeFmt = define.SetRBW + " 10KHZ\n";
                        visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                        define.Sleep(50L);
                        this.listBoxNVA.Items[5] = " 中频带宽:30KHZ";
                    }
                    if (define.SetVBW != null)
                    {
                        writeFmt = define.SetVBW + " 3KHZ\n";
                        visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                        define.Sleep(50L);
                        this.listBoxNVA.Items[6] = " 视频带宽:10KHZ";
                    }
                    if (define.SetSweep != null)
                    {
                        writeFmt = define.SetSweep + " 30MS\n";
                        visa32.viPrintf(visa32.vi, writeFmt);
                        define.Sleep(50L);
                        this.listBoxNVA.Items[7] = " 扫描时间:30mS";
                    }
                    Thread.Sleep(50);
                    if (define.SetMark[1] != null)
                    {
                        define.Sleep(0x3e8L);
                        writeFmt = define.SetMKPK + "\n";
                        visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                        define.Sleep(50L);
                        writeFmt = define.SetMKCF + "\n";
                        visa32.viPrintf(visa32.vi, writeFmt);
                    }
                    if (define.SetAVER != null)
                    {
                        writeFmt = define.SetAVER + "2\n";
                        visa32.viPrintf(visa32.vi, writeFmt);
                        define.Sleep(50L);
                    }
                    if (define.SetAVERON != null)
                    {
                        writeFmt = define.SetAVERON + "\n";
                        visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                        define.Sleep(50L);
                    }
                    if (define.SetPowerON != null)
                    {
                        writeFmt = define.SetPowerON + "\n";
                        visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                        define.Sleep(50L);
                    }
                    SCM.testFreqArr[1] = this.textBoxRrveFreq.Text.ToString();
                }
                if (define.VNAConnect == "NI")
                {
                    Array.Resize<string>(ref SCM.testFreqArr, 0);
                    Array.Resize<string>(ref SCM.testFreqArr, 2);
                    if (define.SetPSET != null)
                    {
                        writeFmt = define.SetPSET + "\n";
                        SCM.device.Write(writeFmt);
                        define.Sleep(100L);
                    }
                    if (define.SetRLEV != null)
                    {
                        writeFmt = define.SetRLEV + "0\n";
                        SCM.device.Write(writeFmt);
                        define.Sleep(50L);
                        this.listBoxNVA.Items[3] = " 参考电平:10dB";
                    }
                    if (define.SetPowerOFF != null)
                    {
                        writeFmt = define.SetPowerOFF + "\n";
                        SCM.device.Write(writeFmt);
                        define.Sleep(50L);
                    }
                    if (define.SetS21 != null)
                    {
                        writeFmt = define.SetS21 + "\n";
                        SCM.device.Write(writeFmt);
                        define.Sleep(50L);
                    }
                    if (define.SetCenter != null)
                    {
                        writeFmt = define.SetCenter + "12000MHZ\n";
                        SCM.device.Write(writeFmt);
                        define.Sleep(100L);
                        this.listBoxNVA.Items[2] = " 测试频点:12000MHZ";
                    }
                    if (define.SetPower != null)
                    {
                        writeFmt = define.SetPower + "10\n";
                        SCM.device.Write(writeFmt);
                        define.Sleep(50L);
                    }
                    if (define.SetSPAN != null)
                    {
                        writeFmt = define.SetSPAN + "1000000\n";
                        SCM.device.Write(writeFmt);
                        define.Sleep(50L);
                        this.listBoxNVA.Items[4] = " 扫描带宽:1MHZ";
                    }
                    if (define.SetRBW != null)
                    {
                        writeFmt = define.SetRBW + "30000\n";
                        SCM.device.Write(writeFmt);
                        define.Sleep(50L);
                        this.listBoxNVA.Items[5] = " 中频带宽:30KHZ";
                    }
                    if (define.SetVBW != null)
                    {
                        writeFmt = define.SetVBW + "10000\n";
                        SCM.device.Write(writeFmt);
                        define.Sleep(50L);
                        this.listBoxNVA.Items[6] = " 视频带宽:10KHZ";
                    }
                    if (define.SetSweep != null)
                    {
                        writeFmt = define.SetSweep + "0.03\n";
                        SCM.device.Write(writeFmt);
                        define.Sleep(50L);
                        this.listBoxNVA.Items[7] = " 扫描时间:0.03S";
                    }
                    Thread.Sleep(30);
                    if (define.SetAVER != null)
                    {
                        writeFmt = define.SetAVER + "2\n";
                        SCM.device.Write(writeFmt);
                        define.Sleep(50L);
                    }
                    if (define.SetAVERON != null)
                    {
                        writeFmt = define.SetAVERON + "\n";
                        SCM.device.Write(writeFmt);
                        define.Sleep(50L);
                    }
                    if (define.SetPowerON != null)
                    {
                        writeFmt = define.SetPowerON + "\n";
                        visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                        define.Sleep(50L);
                    }
                    SCM.testFreqArr[1] = this.textBoxRrveFreq.Text.ToString();
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("button17_Click + " + exception.ToString());
            MessageBox.Show(exception.ToString(), "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonMarkZero_Click(object sender, EventArgs e)
    {
        try
        {
            SCM.newIndex = 4;
            this.ChangeColor();
            this.grouper4Step.BackgroundColor = Color.LightGreen;
            if (this.radButtonTestZhouAz.Checked)
            {
                this.buttonAzCa_Click(sender, e);
            }
            if (this.radButtonTestZhouSd.Checked)
            {
                this.buttonSdCa_Click(sender, e);
            }
            if (this.radButtonTestZhouEl.Checked)
            {
                this.buttonElCa_Click(sender, e);
            }
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void buttonNext_Click(object sender, EventArgs e)
    {
        try
        {
            switch (SCM.newIndex)
            {
                case 1:
                    SCM.newIndex = 2;
                    this.grouper1Step.BackgroundColor = Color.White;
                    this.grouper2Step.BackgroundColor = Color.LightGreen;
                    return;

                case 2:
                    SCM.newIndex = 3;
                    this.timerShowGroup.Enabled = true;
                    this.grouper2Step.BackgroundColor = Color.White;
                    this.grouper3Step.BackgroundColor = Color.LightGreen;
                    return;

                case 3:
                    SCM.newIndex = 4;
                    this.grouper3Step.BackgroundColor = Color.White;
                    this.grouper4Step.BackgroundColor = Color.LightGreen;
                    return;

                case 4:
                    SCM.newIndex = 5;
                    this.grouper4Step.BackgroundColor = Color.White;
                    this.grouper5Step.BackgroundColor = Color.LightGreen;
                    return;

                case 5:
                    SCM.newIndex = 6;
                    this.grouper5Step.BackgroundColor = Color.White;
                    this.grouper6Step.BackgroundColor = Color.LightGreen;
                    return;

                case 6:
                    SCM.newIndex = 7;
                    this.grouper6Step.BackgroundColor = Color.White;
                    this.grouper7Step.BackgroundColor = Color.LightGreen;
                    return;

                case 7:
                    MessageBox.Show("已经是最后一步了！", "提示", MessageBoxButtons.OK);
                    return;
            }
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void buttonOn_Click(object sender, EventArgs e)
    {
        try
        {
            switch (SCM.newIndex)
            {
                case 1:
                    MessageBox.Show("已经是第一步了！", "提示", MessageBoxButtons.OK);
                    return;

                case 2:
                    SCM.newIndex = 1;
                    this.grouper1Step.BackgroundColor = Color.LightGreen;
                    this.grouper2Step.BackgroundColor = Color.White;
                    return;

                case 3:
                    SCM.newIndex = 2;
                    this.grouper2Step.BackgroundColor = Color.LightGreen;
                    this.grouper3Step.BackgroundColor = Color.White;
                    return;

                case 4:
                    SCM.newIndex = 3;
                    this.timerShowGroup.Enabled = true;
                    this.grouper3Step.BackgroundColor = Color.LightGreen;
                    this.grouper4Step.BackgroundColor = Color.White;
                    return;

                case 5:
                    SCM.newIndex = 4;
                    this.grouper4Step.BackgroundColor = Color.LightGreen;
                    this.grouper5Step.BackgroundColor = Color.White;
                    return;

                case 6:
                    SCM.newIndex = 5;
                    this.grouper5Step.BackgroundColor = Color.LightGreen;
                    this.grouper6Step.BackgroundColor = Color.White;
                    return;

                case 7:
                    SCM.newIndex = 6;
                    this.grouper6Step.BackgroundColor = Color.LightGreen;
                    this.grouper7Step.BackgroundColor = Color.White;
                    return;
            }
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void buttonOption_Click(object sender, EventArgs e)
    {
        string s = "FF,0,0,0,0,0,0,FE";
        this.ClientSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
        IPEndPoint remoteEP = new IPEndPoint(IPAddress.Parse(define.ClientComIP), this.IPendPoint);
        this.ClientSocket.Connect(remoteEP);
        this.ClientSocket.Send(Encoding.UTF8.GetBytes(s));
        Thread.Sleep(30);
        this.ClientSocket.Close();
    }

    private void buttonOrigin_Click(object sender, EventArgs e)
    {
        try
        {
            SCM.newIndex = 7;
            this.ChangeColor();
            this.grouper7Step.BackgroundColor = Color.LightGreen;
            if (this.radButtonTestZhouAz.Checked)
            {
                this.textBoxAzYD.Text = Convert.ToString((float) (0f - SCM.azAngle));
                this.buttonAzYD_Click(sender, e);
            }
            if (this.radButtonTestZhouSd.Checked)
            {
                this.textBoxSdYD.Text = Convert.ToString((float) (0f - SCM.sdAngle));
                this.buttonSdYD_Click(sender, e);
            }
            if (this.radButtonTestZhouEl.Checked)
            {
                this.textBoxElYD.Text = Convert.ToString((float) (0f - SCM.elAngle));
                this.buttonElYD_Click(sender, e);
            }
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void buttonPtCa_Click(object sender, EventArgs e)
    {
        try
        {
            if (((this.toolStripTextBox6.Text == "0") || (this.toolStripTextBox6.Text == "")) || (this.toolStripTextBox6.Text == null))
            {
                SCM.AngleZeroText = 0f;
            }
            else
            {
                SCM.AngleZeroText = Convert.ToSingle(this.toolStripTextBox6.Text);
                if (SCM.AngleZeroText < 0f)
                {
                    SCM.AngleZeroText += 360f;
                }
            }
            this.GetMultAxesParam(0x3d, 0f, 0f, 0f, Convert.ToInt32(0), 1);
            if (this.ptCa == 0)
            {
                SCM.ptAngle = -1.5f;
                this.ptCa++;
            }
            else
            {
                this.ptCa = 0;
                SCM.ptAngle = SCM.AngleZeroText;
            }
            SCM.Pt_angle_Flag = 1;
        }
        catch (Exception exception)
        {
            errLogFunction("buttonPtCa_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonPtCCW_Click(object sender, EventArgs e)
    {
        try
        {
            this.OpenZero();
            this.buttonStop("PT");
            this.buttonPtStop.Enabled = true;
            SCM.Pt_angle_Flag = 1;
            SCM.PtFxint = 2;
            this.trackBarPt_Scroll(sender, e);
            this.GetMultAxesParam(define.ptZhou, ptLowSpeed, ptHighSpeed, ptAccel, Convert.ToInt32(-1002797), 1);
        }
        catch (Exception exception)
        {
            errLogFunction("buttonPtCCW_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonPtCW_Click(object sender, EventArgs e)
    {
        try
        {
            this.OpenZero();
            this.buttonStop("PT");
            this.buttonPtStop.Enabled = true;
            SCM.Pt_angle_Flag = 1;
            SCM.PtFxint = 1;
            this.trackBarPt_Scroll(sender, e);
            this.GetMultAxesParam(define.ptZhou, ptLowSpeed, ptHighSpeed, ptAccel, Convert.ToInt32(0xf4d2d), 1);
        }
        catch (Exception exception)
        {
            errLogFunction("buttonPtCW_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonPtDW_Click(object sender, EventArgs e)
    {
        try
        {
            float num = Convert.ToSingle(this.textBoxPtAngle.Text);
            float num2 = Convert.ToSingle(this.textBoxPtDW.Text);
            SCM.ptDwAngle = num2;
            float num3 = num2 - num;
            if (num3 != 0f)
            {
                if (Math.Abs(num3) < 1f)
                {
                    this.trackBarPt.Value = 0x3e8;
                    this.trackBarPt_Scroll(sender, e);
                }
                SCM.ptYDFlag = true;
                SCM.ptjsFlag = 0;
                SCM.Pt_angle_Flag = 1;
                this.OpenZero();
                this.buttonStop("PT");
                this.buttonPtStop.Enabled = true;
                if (num3 >= 0f)
                {
                    SCM.PtFxint = 1;
                }
                if (num3 < 0f)
                {
                    SCM.PtFxint = 2;
                }
                this.trackBarPt_Scroll(sender, e);
                this.GetMultAxesParam(define.ptZhou, ptLowSpeed, ptHighSpeed, ptAccel, Convert.ToInt32((float) ((num3 * 1002797f) / 51f)), 1);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonPtDW_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonPtStop_Click(object sender, EventArgs e)
    {
        try
        {
            this.GetMultAxesParam(0x3e, 0f, 0f, 0f, Convert.ToInt32(0), 1);
            SCM.Pt_angle_Flag = 0;
            SCM.ptYDFlag = false;
            this.buttonStart();
        }
        catch (Exception exception)
        {
            errLogFunction("buttonPtStop_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonPtYD_Click(object sender, EventArgs e)
    {
        try
        {
            float num = Convert.ToSingle(this.textBoxPtAngle.Text);
            float num2 = Convert.ToSingle(this.textBoxPtYD.Text);
            SCM.ptDwAngle = num + num2;
            if (num2 != 0f)
            {
                if (Math.Abs(num2) < 1f)
                {
                    this.trackBarPt.Value = this.trackBarPt.Minimum;
                    this.trackBarPt_Scroll(sender, e);
                }
                SCM.ptYDFlag = true;
                SCM.ptjsFlag = 0;
                SCM.Pt_angle_Flag = 1;
                this.OpenZero();
                this.buttonStop("PT");
                this.buttonPtStop.Enabled = true;
                if (num2 >= 0f)
                {
                    SCM.PtFxint = 1;
                }
                if (num2 < 0f)
                {
                    SCM.PtFxint = 2;
                }
                this.trackBarPt_Scroll(sender, e);
                this.GetMultAxesParam(define.ptZhou, ptLowSpeed, ptHighSpeed, ptAccel, Convert.ToInt32((float) ((num2 * 1002797f) / 51f)), 1);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonPtDW_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonReaddata_Click(object sender, EventArgs e)
    {
        try
        {
            int num = 0;
            string str = "";
            string[] strArray = null;
            string[] separator = new string[] { "," };
            if ((define.VNAConnect == "TCPIP") || (define.VNAConnect == "USB"))
            {
                num = visa32.viPrintf(visa32.vi, define.SetSwpTrg + "\n");
                define.Sleep(50L);
                num = visa32.viScanf(visa32.vi, define.ReadData, visa32.BufferString);
                define.Sleep(100L);
                strArray = Convert.ToString(visa32.BufferString).Split(separator, StringSplitOptions.None);
            }
            else if (define.VNAConnect == "GPIB")
            {
                SCM.device.Write(define.SetSwpTrg + "\n");
                define.Sleep(50L);
                str = SCM.device.ReadString(0x2710);
                define.Sleep(100L);
                strArray = str.Split(separator, StringSplitOptions.None);
            }
            Array.Resize<define.map>(ref savedata, 2);
            Array.Resize<float>(ref savedata[1].Angle, strArray.Length);
            Array.Resize<float>(ref savedata[1].Elec, strArray.Length);
            savedata[1].Angle[0] = Convert.ToSingle((float) (-SCM.testAngleBound / 2f));
            for (int i = 1; i < strArray.Length; i++)
            {
                savedata[1].Elec[i] = Convert.ToSingle(strArray[i]);
                savedata[1].Angle[i] = savedata[1].Angle[i - 1] + ((Convert.ToSingle(SCM.testAngleBound) / ((float) (strArray.Length - 1))) * i);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonReaddata_Click + " + exception.ToString());
            MessageBox.Show(exception.ToString(), "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonRestore_Click(object sender, EventArgs e)
    {
        try
        {
            if (this.buttonTestCCW.Enabled)
            {
                this.buttonTestCCW.Enabled = false;
                this.buttonTestCW.Enabled = true;
            }
            else if (this.buttonTestCW.Enabled)
            {
                this.buttonTestCCW.Enabled = true;
                this.buttonTestCW.Enabled = false;
            }
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void buttonRvCa_Click(object sender, EventArgs e)
    {
        try
        {
            if (((this.toolStripTextBox5.Text == "0") || (this.toolStripTextBox5.Text == "")) || (this.toolStripTextBox5.Text == null))
            {
                SCM.AngleZeroText = 0f;
            }
            else
            {
                SCM.AngleZeroText = Convert.ToSingle(this.toolStripTextBox5.Text);
                if (SCM.AngleZeroText < 0f)
                {
                    SCM.AngleZeroText += 360f;
                }
            }
            if (!define.ScmRv)
            {
                SCM.rvAngleZero = SCM.rvAngleOld - SCM.AngleZeroText;
                if (SCM.rvAngleZero > 180f)
                {
                    SCM.rvAngleZero -= 360f;
                }
                if (SCM.rvAngleZero < -180f)
                {
                    SCM.rvAngleZero += 360f;
                }
                if (SCM.rvAngleZero > 180f)
                {
                    SCM.rvAngleZero -= 360f;
                }
                if (SCM.rvAngleZero < -180f)
                {
                    SCM.rvAngleZero += 360f;
                }
                WriteINI("AngleData", "rvAngleZero", Convert.ToString(SCM.rvAngleZero), "SystemOption.ini");
                SCM.Rv_angle_Flag = 1;
                SCM.Sd_angle_Flag = 0;
                this.serialPortEl.Write("#05\r");
            }
            else
            {
                this.GetMultAxesParam(0x29, 0f, 0f, 0f, Convert.ToInt32(0), 1);
                if (this.rvCa == 0)
                {
                    SCM.rvAngle = -1.5f;
                    this.rvCa++;
                }
                else
                {
                    this.rvCa = 0;
                    SCM.rvAngle = SCM.AngleZeroText;
                }
                SCM.Rv_angle_Flag = 1;
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonRvCa_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonRvCCW_Click(object sender, EventArgs e)
    {
        try
        {
            this.OpenZero();
            this.buttonStop("RV");
            this.buttonRvStop.Enabled = true;
            SCM.Rv_angle_Flag = 1;
            SCM.RvFxint = 2;
            Thread.Sleep(30);
            this.trackBarRv_Scroll(sender, e);
            this.GetMultAxesParam(define.rvZhou, rvLowSpeed, rvHighSpeed, rvAccel, Convert.ToInt32((long) (-600000L)), 1);
        }
        catch (Exception exception)
        {
            errLogFunction("buttonRvCCW_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonRvCW_Click(object sender, EventArgs e)
    {
        try
        {
            this.OpenZero();
            this.buttonStop("RV");
            this.buttonRvStop.Enabled = true;
            SCM.Rv_angle_Flag = 1;
            Thread.Sleep(30);
            this.trackBarRv_Scroll(sender, e);
            SCM.RvFxint = 1;
            this.GetMultAxesParam(define.rvZhou, rvLowSpeed, rvHighSpeed, rvAccel, Convert.ToInt32((long) 0x927c0L), 1);
        }
        catch (Exception exception)
        {
            errLogFunction("buttonRvCW_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonRvDW_Click(object sender, EventArgs e)
    {
        try
        {
            float num = Convert.ToSingle(this.textBoxRvAngle.Text);
            float num2 = Convert.ToSingle(this.textBoxRvDW.Text);
            SCM.rvDwAngle = num2;
            float num3 = num2 - num;
            if (num3 > 180f)
            {
                num3 -= 360f;
            }
            if (num3 < -180f)
            {
                num3 += 360f;
            }
            if ((num3 > 0f) && (SCM.rvDwAngle <= 0f))
            {
                SCM.rvDwAngle += 360f;
            }
            if ((num3 < 0f) && (SCM.rvDwAngle < 0f))
            {
                SCM.rvDwAngle += 360f;
            }
            if (Math.Abs(num3) < 0.1)
            {
                if (SCM.autoTestStart > 0)
                {
                    SCM.autoTestend++;
                }
            }
            else
            {
                if (Math.Abs(num3) < 2f)
                {
                    this.trackBarRv.Value = this.trackBarRv.Minimum;
                    this.trackBarRv_Scroll(sender, e);
                }
                SCM.rvYDFlag = true;
                if (!define.ScmRv)
                {
                    SCM.rvYDFlag = true;
                    if (num3 > 0f)
                    {
                        this.buttonRvCW_Click(sender, e);
                    }
                    if (num3 < 0f)
                    {
                        this.buttonRvCCW_Click(sender, e);
                    }
                }
                else
                {
                    SCM.Rv_angle_Flag = 1;
                    this.OpenZero();
                    this.buttonStop("RV");
                    this.buttonRvStop.Enabled = true;
                    this.trackBarRv_Scroll(sender, e);
                    if (num3 > 0f)
                    {
                        SCM.RvFxint = 1;
                    }
                    if (num3 < 0f)
                    {
                        SCM.RvFxint = 2;
                    }
                    this.GetMultAxesParam(define.rvZhou, rvLowSpeed, rvHighSpeed, rvAccel, Convert.ToInt32((float) ((num3 * 600000f) / 360f)), 1);
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonRvDW_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonRvStop_Click(object sender, EventArgs e)
    {
        try
        {
            this.GetMultAxesParam(0x2a, 0f, 0f, 0f, Convert.ToInt32(0), 1);
            SCM.rvYDFlag = false;
            SCM.RvFxint = 0;
            this.buttonStart();
            SCM.Rv_angle_Flag = 0;
            SCM.dnDwAngle2 = 0f;
        }
        catch (Exception exception)
        {
            errLogFunction("buttonRvStop_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonRvXL_Click(object sender, EventArgs e)
    {
        try
        {
            this.OpenZero();
            this.buttonStop("RV");
            this.buttonRvStop.Enabled = true;
            SCM.Rv_angle_Flag = 1;
            SCM.rvHoming = true;
            this.GetMultAxesParam(define.rvZhou, rvLowSpeed, rvHighSpeed, rvAccel, Convert.ToInt32((long) 0x927c0L), 3);
        }
        catch (Exception exception)
        {
            errLogFunction("buttonRvXL_Click + " + exception.ToString());
        }
    }

    private void buttonRvYD_Click(object sender, EventArgs e)
    {
        try
        {
            float num = Convert.ToSingle(this.textBoxRvAngle.Text);
            float num2 = Convert.ToSingle(this.textBoxRvYD.Text);
            SCM.rvDwAngle = num + num2;
            if ((num2 > 0f) && (SCM.rvDwAngle <= 0f))
            {
                SCM.rvDwAngle += 360f;
            }
            if ((num2 < 0f) && (SCM.rvDwAngle < 0f))
            {
                SCM.rvDwAngle += 360f;
            }
            if (Math.Abs(num2) < 2f)
            {
                this.trackBarRv.Value = this.trackBarRv.Minimum;
                this.trackBarRv_Scroll(sender, e);
            }
            SCM.rvYDFlag = true;
            if (!define.ScmRv)
            {
                SCM.rvYDFlag = true;
                if (num2 > 0f)
                {
                    this.buttonRvCW_Click(sender, e);
                }
                if (num2 < 0f)
                {
                    this.buttonRvCCW_Click(sender, e);
                }
            }
            else
            {
                SCM.Rv_angle_Flag = 1;
                this.OpenZero();
                this.buttonStop("RV");
                this.buttonRvStop.Enabled = true;
                this.trackBarRv_Scroll(sender, e);
                if (num2 > 0f)
                {
                    SCM.RvFxint = 1;
                }
                if (num2 < 0f)
                {
                    SCM.RvFxint = 2;
                }
                this.GetMultAxesParam(define.rvZhou, rvLowSpeed, rvHighSpeed, rvAccel, Convert.ToInt32((float) ((num2 * 600000f) / 360f)), 1);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonRvYD_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonSave_Click(object sender, EventArgs e)
    {
        this.toolStripButton4_Click(sender, e);
    }

    private void buttonSdCa_Click(object sender, EventArgs e)
    {
        int num2 = 0;
        int num3 = 0;
        int num4 = 0;
        try
        {
            if (((this.toolStripTextBox3.Text == "0") || (this.toolStripTextBox3.Text == "")) || (this.toolStripTextBox3.Text == null))
            {
                SCM.AngleZeroText = 0f;
            }
            else
            {
                SCM.AngleZeroText = Convert.ToSingle(this.toolStripTextBox3.Text);
                if (SCM.AngleZeroText < 0f)
                {
                    SCM.AngleZeroText += 360f;
                }
            }
            if (!define.ScmNSd)
            {
                SCM.sdAngleZero = SCM.sdAngleOld - SCM.AngleZeroText;
                if (SCM.sdAngleZero > 180f)
                {
                    SCM.sdAngleZero -= 360f;
                }
                if (SCM.sdAngleZero < -180f)
                {
                    SCM.sdAngleZero += 360f;
                }
                if (SCM.sdAngleZero > 180f)
                {
                    SCM.sdAngleZero -= 360f;
                }
                if (SCM.sdAngleZero < -180f)
                {
                    SCM.sdAngleZero += 360f;
                }
                WriteINI("AngleData", "sdAngleZero", Convert.ToString(SCM.sdAngleZero), "SystemOption.ini");
                SCM.Sd_angle_Flag = 1;
                SCM.Rv_angle_Flag = 0;
                this.serialPortRv.Write("#03\r");
                Thread.Sleep(30);
                this.serialPortRv.Write("#03\r");
            }
            else
            {
                SCM.Sd_angle_Flag = 1;
                SCM.Send_Cmd[1] = 5;
                this.serialPortScm.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
                define.Sleep(30L);
                SCM.AngleZeroText = (Math.Abs(SCM.AngleZeroText) * 400000f) / 360f;
                SCM.Send_Data[1] = 0x30;
                SCM.Send_Data[3] = Convert.ToByte((int) (SCM.AngleZeroText / 65536f));
                SCM.Send_Data[4] = Convert.ToByte((int) ((SCM.AngleZeroText % 65536f) / 256f));
                SCM.Send_Data[5] = Convert.ToByte((int) ((SCM.AngleZeroText % 65536f) % 256f));
                if ((SCM.Send_Data[3] == 0xff) || (SCM.Send_Data[3] == 0xfe))
                {
                    SCM.Send_Data[3] = Convert.ToByte((int) (0xff - SCM.Send_Data[3]));
                    num2 = 1;
                }
                else
                {
                    num2 = 0;
                }
                if ((SCM.Send_Data[4] == 0xff) || (SCM.Send_Data[4] == 0xfe))
                {
                    SCM.Send_Data[4] = Convert.ToByte((int) (0xff - SCM.Send_Data[4]));
                    num3 = 1;
                }
                else
                {
                    num3 = 0;
                }
                if ((SCM.Send_Data[5] == 0xff) || (SCM.Send_Data[5] == 0xfe))
                {
                    SCM.Send_Data[5] = Convert.ToByte((int) (0xff - SCM.Send_Data[5]));
                    num4 = 1;
                }
                else
                {
                    num4 = 0;
                }
                int num = (num2 | num3) | num4;
                SCM.Send_Data[2] = Convert.ToByte(num);
                this.serialPortScm.Write(SCM.Send_Data, 0, SCM.Send_Data.Length);
                define.Sleep(30L);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonSdCa_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonSdCCW_Click(object sender, EventArgs e)
    {
        try
        {
            if (this.serialPortScm.IsOpen)
            {
                SCM.Send_Cmd[1] = 5;
                this.serialPortScm.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
                this.OpenZero();
                this.buttonStop("SD");
                this.buttonSdStop.Enabled = true;
                Thread.Sleep(30);
                this.trackBarSd_Scroll(sender, e);
                SCM.Send_Cmd[1] = 0x29;
                this.serialPortScm.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
                SCM.Sd_angle_Flag = 1;
                SCM.SdFxint = 2;
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonSdCCW_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonSdCW_Click(object sender, EventArgs e)
    {
        try
        {
            if (this.serialPortScm.IsOpen)
            {
                SCM.Send_Cmd[1] = 5;
                this.serialPortScm.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
                this.OpenZero();
                this.buttonStop("SD");
                this.buttonSdStop.Enabled = true;
                this.trackBarSd_Scroll(sender, e);
                Thread.Sleep(30);
                SCM.Send_Cmd[1] = 40;
                this.serialPortScm.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
                SCM.Sd_angle_Flag = 1;
                SCM.SdFxint = 1;
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonSdCW_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonSdDW_Click(object sender, EventArgs e)
    {
        int num5 = 0;
        int num6 = 0;
        int num7 = 0;
        try
        {
            float num = Convert.ToSingle(this.textBoxSdAngle.Text);
            float num2 = Convert.ToSingle(this.textBoxSdDW.Text);
            SCM.sdDwAngle = num2;
            float num3 = num2 - num;
            if (num3 > 180f)
            {
                num3 -= 360f;
            }
            if (num3 < -180f)
            {
                num3 += 360f;
            }
            if (Math.Abs(num3) < 0.1)
            {
                if (SCM.autoTestStart > 0)
                {
                    SCM.autoTestend++;
                }
            }
            else
            {
                if (Math.Abs(num3) < 1f)
                {
                    this.trackBarSd.Value = this.trackBarSd.Minimum;
                    this.trackBarSd_Scroll(sender, e);
                }
                SCM.sdYDFlag = true;
                if (!define.ScmNSd)
                {
                    SCM.sdYDFlag = true;
                    if (num3 > 0f)
                    {
                        this.buttonSdCW_Click(sender, e);
                    }
                    if (num3 < 0f)
                    {
                        this.buttonSdCCW_Click(sender, e);
                    }
                }
                else
                {
                    SCM.Sd_angle_Flag = 1;
                    this.OpenZero();
                    this.buttonStop("SD");
                    SCM.Sdbuttonflag = 1;
                    this.trackBarSd_Scroll(sender, e);
                    define.Sleep(30L);
                    if (num3 > 0f)
                    {
                        SCM.Send_Data[1] = 0x36;
                        SCM.SdFxint = 1;
                    }
                    if (num3 < 0f)
                    {
                        SCM.Send_Data[1] = 60;
                        SCM.SdFxint = 2;
                    }
                    int num8 = Convert.ToInt32((float) ((Math.Abs(num3) * 400000f) / 360f));
                    SCM.Send_Data[3] = Convert.ToByte(Convert.ToInt16((int) (num8 / 0x10000)));
                    SCM.Send_Data[4] = Convert.ToByte((int) (Convert.ToInt16((int) (num8 / 0x100)) - (Convert.ToInt16((int) (num8 / 0x10000)) * 0x100)));
                    SCM.Send_Data[5] = Convert.ToByte((int) (num8 - (Convert.ToInt16((int) (num8 / 0x100)) * 0x100)));
                    if ((SCM.Send_Data[3] == 0xff) || (SCM.Send_Data[3] == 0xfe))
                    {
                        SCM.Send_Data[3] = Convert.ToByte((int) (0xff - SCM.Send_Data[3]));
                        num5 = 1;
                    }
                    if ((SCM.Send_Data[4] == 0xff) || (SCM.Send_Data[4] == 0xfe))
                    {
                        SCM.Send_Data[4] = Convert.ToByte((int) (0xff - SCM.Send_Data[4]));
                        num6 = 1;
                    }
                    if ((SCM.Send_Data[5] == 0xff) || (SCM.Send_Data[5] == 0xfe))
                    {
                        SCM.Send_Data[5] = Convert.ToByte((int) (0xff - SCM.Send_Data[5]));
                        num7 = 1;
                    }
                    int num4 = (num5 | num6) | num7;
                    SCM.Send_Data[2] = Convert.ToByte(num4);
                    this.serialPortScm.Write(SCM.Send_Data, 0, SCM.Send_Data.Length);
                    define.Sleep(50L);
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonSdDW_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonSdStop_Click(object sender, EventArgs e)
    {
        try
        {
            if (this.serialPortScm.IsOpen)
            {
                SCM.Send_Cmd[1] = 0x1d;
                this.serialPortScm.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
                define.Sleep(30L);
                this.serialPortScm.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
                SCM.sdYDFlag = false;
                SCM.SdFxint = 0;
                this.buttonStart();
                SCM.SdFxint = 0;
                SCM.Sd_angle_Flag = 0;
                SCM.dnDwAngle2 = 0f;
                SCM.dnDnscm = false;
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonSdStop_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonSdXL_Click(object sender, EventArgs e)
    {
        try
        {
            if (this.serialPortScm.IsOpen)
            {
                this.OpenZero();
                this.buttonStop("SD");
                this.buttonSdStop.Enabled = true;
                SCM.Send_Data[1] = 0x6a;
                SCM.Send_Data[2] = 0;
                float num = ((float) (Math.Abs(1) * 0x61a80L)) / 360f;
                SCM.Send_Data[3] = Convert.ToByte((int) (num / 65536f));
                SCM.Send_Data[4] = Convert.ToByte((int) ((num % 65536f) / 256f));
                SCM.Send_Data[5] = Convert.ToByte((int) ((num % 65536f) % 256f));
                if ((SCM.Send_Data[3] == 0xff) || (SCM.Send_Data[3] == 0xfe))
                {
                    SCM.Send_Data[3] = Convert.ToByte((int) (0xff - SCM.Send_Data[3]));
                    SCM.Send_Data[2] = Convert.ToByte((int) (SCM.Send_Data[2] | 4));
                }
                if ((SCM.Send_Data[4] == 0xff) || (SCM.Send_Data[4] == 0xfe))
                {
                    SCM.Send_Data[4] = Convert.ToByte((int) (0xff - SCM.Send_Data[4]));
                    SCM.Send_Data[2] = Convert.ToByte((int) (SCM.Send_Data[2] | 2));
                }
                if ((SCM.Send_Data[5] == 0xff) || (SCM.Send_Data[5] == 0xfe))
                {
                    SCM.Send_Data[5] = Convert.ToByte((int) (0xff - SCM.Send_Data[5]));
                    SCM.Send_Data[2] = Convert.ToByte((int) (SCM.Send_Data[2] | 1));
                }
                this.serialPortScm.Write(SCM.Send_Data, 0, SCM.Send_Data.Length);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonSdXL_Click + " + exception.ToString());
        }
    }

    private void buttonSdYD_Click(object sender, EventArgs e)
    {
        int num4 = 0;
        int num5 = 0;
        int num6 = 0;
        try
        {
            float num = Convert.ToSingle(this.textBoxSdAngle.Text);
            float num2 = Convert.ToSingle(this.textBoxSdYD.Text);
            SCM.dnDwAngle2 = num2;
            SCM.sdDwAngle = num + num2;
            if (SCM.sdDwAngle > 180f)
            {
                SCM.sdDwAngle -= 360f;
            }
            if (SCM.sdDwAngle < -180f)
            {
                SCM.sdDwAngle += 360f;
            }
            if (Math.Abs(num2) < 4f)
            {
                this.trackBarSd.Value = this.trackBarSd.Minimum;
                this.trackBarSd_Scroll(sender, e);
            }
            SCM.sdYDFlag = true;
            if (!define.ScmNSd)
            {
                SCM.sdYDFlag = true;
                if (num2 > 0f)
                {
                    this.buttonSdCW_Click(sender, e);
                }
                if (num2 < 0f)
                {
                    this.buttonSdCCW_Click(sender, e);
                }
            }
            else
            {
                this.OpenZero();
                this.buttonStop("SD");
                SCM.Sdbuttonflag = 1;
                this.trackBarSd_Scroll(sender, e);
                define.Sleep(30L);
                if (num2 > 0f)
                {
                    SCM.Send_Data[1] = 0x36;
                    SCM.SdFxint = 1;
                }
                if (num2 < 0f)
                {
                    SCM.Send_Data[1] = 60;
                    SCM.SdFxint = 2;
                }
                int num7 = Convert.ToInt32((float) ((Math.Abs(num2) * 400000f) / 360f));
                SCM.Send_Data[3] = Convert.ToByte(Convert.ToInt16((int) (num7 / 0x10000)));
                SCM.Send_Data[4] = Convert.ToByte((int) (Convert.ToInt16((int) (num7 / 0x100)) - (Convert.ToInt16((int) (num7 / 0x10000)) * 0x100)));
                SCM.Send_Data[5] = Convert.ToByte((int) (num7 - (Convert.ToInt16((int) (num7 / 0x100)) * 0x100)));
                if ((SCM.Send_Data[3] == 0xff) || (SCM.Send_Data[3] == 0xfe))
                {
                    SCM.Send_Data[3] = Convert.ToByte((int) (0xff - SCM.Send_Data[3]));
                    num4 = 1;
                }
                if ((SCM.Send_Data[4] == 0xff) || (SCM.Send_Data[4] == 0xfe))
                {
                    SCM.Send_Data[4] = Convert.ToByte((int) (0xff - SCM.Send_Data[4]));
                    num5 = 1;
                }
                if ((SCM.Send_Data[5] == 0xff) || (SCM.Send_Data[5] == 0xfe))
                {
                    SCM.Send_Data[5] = Convert.ToByte((int) (0xff - SCM.Send_Data[5]));
                    num6 = 1;
                }
                int num3 = (num4 | num5) | num6;
                SCM.Send_Data[2] = Convert.ToByte(num3);
                this.serialPortScm.Write(SCM.Send_Data, 0, SCM.Send_Data.Length);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonSdYD_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonSearch_Click(object sender, EventArgs e)
    {
        this.DataSearch = true;
        new Thread(new ThreadStart(this.ThreadInvoke)).Start();
    }

    private void buttonSearchStop_Click(object sender, EventArgs e)
    {
        this.DataSearch = false;
    }

    private void buttonSet_Click(object sender, EventArgs e)
    {
        try
        {
            string writeFmt = "";
            int num = 0;
            string text = this.comboBoxSet.Text;
            if (text != null)
            {
                if (!(text == "带宽(kHz)"))
                {
                    if (text == "平滑次数")
                    {
                        goto Label_017A;
                    }
                    if (text == "参考电平(DB)")
                    {
                        goto Label_026F;
                    }
                    if (text == "扫描时间(MS)")
                    {
                        goto Label_0364;
                    }
                }
                else if ((define.VNAConnect == "TCPIP") || (define.VNAConnect == "USB"))
                {
                    if (define.SetBAND != "")
                    {
                        writeFmt = define.SetBAND + (Convert.ToInt32(this.textBox6.Text) * 0x3e8) + "\n";
                        num = visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                    }
                }
                else if (define.VNAConnect == "NI")
                {
                    SCM.testFreqArr[1] = Convert.ToInt32(this.textBox6.Text).ToString();
                    if (define.SetBAND != "")
                    {
                        writeFmt = define.SetBAND + (Convert.ToInt32(this.textBox6.Text) * 0x3e8) + "\n";
                        SCM.device.Write(writeFmt);
                    }
                }
            }
            return;
        Label_017A:
            if ((define.VNAConnect == "TCPIP") || (define.VNAConnect == "USB"))
            {
                if (define.SetSmooth != "")
                {
                    writeFmt = define.SetSmooth + Convert.ToInt32(this.textBox6.Text).ToString() + "\n";
                    num = visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                }
            }
            else if ((define.VNAConnect == "NI") && (define.SetSmooth != ""))
            {
                writeFmt = define.SetSmooth + Convert.ToInt32(this.textBox6.Text).ToString() + "\n";
                SCM.device.Write(writeFmt);
            }
            return;
        Label_026F:
            if ((define.VNAConnect == "TCPIP") || (define.VNAConnect == "USB"))
            {
                if (define.SetRLEV != "")
                {
                    writeFmt = define.SetRLEV + Convert.ToInt32(this.textBox6.Text).ToString() + "\n";
                    num = visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                }
            }
            else if ((define.VNAConnect == "NI") && (define.SetRLEV != ""))
            {
                writeFmt = define.SetRLEV + Convert.ToInt32(this.textBox6.Text).ToString() + "\n";
                SCM.device.Write(writeFmt);
            }
            return;
        Label_0364:
            if ((define.VNAConnect == "TCPIP") || (define.VNAConnect == "USB"))
            {
                if (define.SetSweep != "")
                {
                    writeFmt = define.SetSweep + "0.03\n";
                    num = visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                }
            }
            else if ((define.VNAConnect == "NI") && (define.SetSweep != ""))
            {
                writeFmt = define.SetSweep + "0.03\n";
                SCM.device.Write(writeFmt);
            }
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void buttonSpeedStar_Click(object sender, EventArgs e)
    {
        try
        {
            if (this.radioButtonSpeedAz.Checked)
            {
                define.speed_start_angle = SCM.azAngle;
            }
            if (this.radioButtonSpeedEl.Checked)
            {
                define.speed_start_angle = SCM.elAngle;
            }
            if (this.radioButtonSpeedSn.Checked)
            {
                define.speed_start_angle = SCM.sdAngle;
            }
            if (this.radioButtonSpeedDn.Checked)
            {
                define.speed_start_angle = SCM.dnAngle;
            }
            if (this.radioButtonSpeedRv.Checked)
            {
                define.speed_start_angle = SCM.rvAngle;
            }
            define.QueryPerformanceCounter(ref define.freq);
        }
        catch
        {
        }
    }

    private void buttonSpeedStop_Click(object sender, EventArgs e)
    {
        try
        {
            define.QueryPerformanceFrequency(ref define.frep);
            define.QueryPerformanceCounter(ref define.countq);
            if (this.radioButtonSpeedAz.Checked)
            {
                define.speed_end_angle = SCM.azAngle;
            }
            if (this.radioButtonSpeedEl.Checked)
            {
                define.speed_end_angle = SCM.elAngle;
            }
            if (this.radioButtonSpeedSn.Checked)
            {
                define.speed_end_angle = SCM.sdAngle;
            }
            if (this.radioButtonSpeedDn.Checked)
            {
                define.speed_end_angle = SCM.dnAngle;
            }
            if (this.radioButtonSpeedRv.Checked)
            {
                define.speed_end_angle = SCM.rvAngle;
            }
            float num = Math.Abs((float) (define.speed_end_angle - define.speed_start_angle)) / Convert.ToSingle(Math.Round((double) (((double) (define.countq - define.freq)) / ((double) define.frep)), 6));
            this.labelSpeedV.Text = "SpeedV:" + num.ToString("0.0000");
            if (num != 0f)
            {
                this.label61.Text = Convert.ToString(MPC08.get_rate(define.azZhou));
            }
        }
        catch
        {
        }
    }

    public void buttonStart()
    {
        try
        {
            this.buttonAzCW.Enabled = true;
            this.buttonAzCCW.Enabled = true;
            this.buttonAzDW.Enabled = true;
            this.buttonAzYD.Enabled = true;
            this.buttonAzStop.Enabled = true;
            this.buttonElCW.Enabled = true;
            this.buttonElCCW.Enabled = true;
            this.buttonElDW.Enabled = true;
            this.buttonElYD.Enabled = true;
            this.buttonElStop.Enabled = true;
            this.buttonDnCW.Enabled = true;
            this.buttonDnCCW.Enabled = true;
            this.buttonDnDW.Enabled = true;
            this.buttonDnYD.Enabled = true;
            this.buttonDnStop.Enabled = true;
            this.buttonRvCW.Enabled = true;
            this.buttonRvCCW.Enabled = true;
            this.buttonRvDW.Enabled = true;
            this.buttonRvYD.Enabled = true;
            this.buttonRvStop.Enabled = true;
            this.buttonSdCW.Enabled = true;
            this.buttonSdCCW.Enabled = true;
            this.buttonSdDW.Enabled = true;
            this.buttonSdYD.Enabled = true;
            this.buttonSdStop.Enabled = true;
            this.buttonPtCW.Enabled = true;
            this.buttonPtCCW.Enabled = true;
            this.buttonPtDW.Enabled = true;
            this.buttonPtYD.Enabled = true;
            this.buttonPtStop.Enabled = true;
            this.buttonFsCw.Enabled = true;
            this.buttonFsCcw.Enabled = true;
            this.buttonFsDW.Enabled = true;
            this.buttonFsYD.Enabled = true;
            this.buttonFsStop.Enabled = true;
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void ButtonStartAutoTest_Click(object sender, EventArgs e)
    {
        try
        {
            if (this.AutoTestForm != null)
            {
                if (this.AutoTestForm.IsDisposed)
                {
                    this.AutoTestForm = new autoTestOption();
                    this.AutoTestForm.Show();
                }
                else
                {
                    this.AutoTestForm.Show();
                }
            }
            else
            {
                this.AutoTestForm = new autoTestOption();
                this.AutoTestForm.Show();
            }
        }
        catch (Exception exception)
        {
            errLogFunction("自动化测试+ " + exception.ToString());
            MessageBox.Show(exception.ToString(), "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonStartTest_Click(object sender, EventArgs e)
    {
        try
        {
            SCM.newIndex = 6;
            this.ChangeColor();
            this.grouper6Step.BackgroundColor = Color.LightGreen;
            this.buttonTestCW_Click(sender, e);
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    public void buttonStop(string ch)
    {
        try
        {
            string str = ch;
            if (str != null)
            {
                if (!(str == "AZ"))
                {
                    if (str == "EL")
                    {
                        goto Label_008E;
                    }
                    if (str == "SD")
                    {
                        goto Label_00E0;
                    }
                }
                else
                {
                    this.buttonAzCW.Enabled = false;
                    this.buttonAzCCW.Enabled = false;
                    this.buttonAzDW.Enabled = false;
                    this.buttonAzYD.Enabled = false;
                    this.buttonAzCa.Enabled = false;
                    this.buttonAzXL.Enabled = false;
                }
            }
            return;
        Label_008E:
            this.buttonElCW.Enabled = false;
            this.buttonElCCW.Enabled = false;
            this.buttonElDW.Enabled = false;
            this.buttonElYD.Enabled = false;
            this.buttonElCa.Enabled = false;
            this.buttonElXL.Enabled = false;
            return;
        Label_00E0:
            this.buttonSdCW.Enabled = false;
            this.buttonSdCCW.Enabled = false;
            this.buttonSdDW.Enabled = false;
            this.buttonSdYD.Enabled = false;
            this.buttonSdCa.Enabled = false;
            this.buttonSdXL.Enabled = false;
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void buttonStopAuto_Click(object sender, EventArgs e)
    {
        SCM.autoTestStart = 0;
        SCM.autoTestend = 0;
        this.timer3D.Enabled = false;
        this.TestOver = true;
        this.sPointNum = 0;
        this.buttonAzStop_Click(sender, e);
        this.buttonRvStop_Click(sender, e);
        this.buttonSdStop_Click(sender, e);
    }

    private void ButtonStopAutoTest_Click(object sender, EventArgs e)
    {
        try
        {
            SCM.autoTestStart = 0;
            SCM.autoTestend = 0;
            if (this.timerAutoTestP2_Two.Enabled)
            {
                this.timerAutoTestP2_Two.Enabled = false;
            }
            if (this.timerAutoTestP4_1_Four.Enabled || this.timerAutoTestP4_2_Four.Enabled)
            {
                this.timerAutoTestP4_1_Four.Enabled = false;
                this.timerAutoTestP4_2_Four.Enabled = false;
            }
            if (this.timerAutoTestP8_eight.Enabled)
            {
                this.timerAutoTestP8_eight.Enabled = false;
            }
            this.buttonTestStop_Click(sender, e);
        }
        catch (Exception exception)
        {
            errLogFunction("ButtonStopAutoTest_Click + " + exception.ToString());
        }
    }

    private void buttonTestCCW_Click(object sender, EventArgs e)
    {
        try
        {
            if ((SCM.testFreqArr[1] == "") || (SCM.testFreqArr[1] == null))
            {
                MessageBox.Show("未设置频率，请先设置频率！", "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
            else
            {
                SCM.testAngleBound = Convert.ToSingle(this.textBox5.Text);
                this.buttonTestStart.Enabled = false;
                this.buttonTestCW.Enabled = false;
                this.buttonTestCCW.Enabled = false;
                SCM.DataTest = 1;
                SCM.testFX = 2;
                if (SCM.testMode != 3)
                {
                    this.gs.getpram2(this.pictureBox1, this.trackBarAz, SCM.testFX, SCM.testZhou, define.VNAConnect, SCM.testMode, SCM.testFreqArr);
                }
                else
                {
                    this.gs.getpram2(this.pictureBox1, this.trackBarAz, SCM.testFX, SCM.testZhou, define.VNAConnect, SCM.testMode, Convert.ToInt32(SCM.freqPoint), SCM.testFreqArr);
                }
                if (!this.gs.DrawMap())
                {
                    this.buttonTestStop_Click(sender, e);
                    MessageBox.Show("上传发生故障");
                }
                if (this.radButtonTestZhouAz.Checked)
                {
                    SCM.testZhou = 1;
                    SCM.Limit_az = 2;
                    this.gs.TrackbarScroll += new getprams.TrackbarEvent(this.trackBarAz_Scroll);
                    this.textBoxAzYD.Text = Convert.ToString(-SCM.testAngleBound);
                    this.buttonAzYD_Click(sender, e);
                }
                else if (this.radButtonTestZhouSd.Checked)
                {
                    SCM.testZhou = 3;
                    this.gs.TrackbarScroll += new getprams.TrackbarEvent(this.trackBarSd_Scroll);
                    this.buttonSdCCW_Click(sender, e);
                }
                else if (this.radButtonTestZhouEl.Checked)
                {
                    SCM.testZhou = 2;
                    this.gs.TrackbarScroll += new getprams.TrackbarEvent(this.trackBarEl_Scroll);
                    this.buttonElCCW_Click(sender, e);
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonTestCCW_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonTestCW_Click(object sender, EventArgs e)
    {
        try
        {
            SCM.testAngleBound = Convert.ToSingle(this.textBox5.Text);
            this.buttonTestStart.Enabled = false;
            this.buttonTestCW.Enabled = false;
            this.buttonTestCCW.Enabled = false;
            SCM.DataTest = 1;
            SCM.testFX = 1;
            if (this.radButtonTestZhouAz.Checked)
            {
                SCM.testZhou = 1;
            }
            else if (this.radButtonTestZhouSd.Checked)
            {
                SCM.testZhou = 3;
            }
            else if (this.radButtonTestZhouEl.Checked)
            {
                SCM.testZhou = 2;
            }
            if (SCM.testMode != 3)
            {
                this.gs.getpram2(this.pictureBox1, this.trackBarAz, SCM.testFX, SCM.testZhou, define.VNAConnect, SCM.testMode, SCM.testFreqArr);
            }
            else
            {
                this.gs.getpram2(this.pictureBox1, this.trackBarAz, SCM.testFX, SCM.testZhou, define.VNAConnect, SCM.testMode, Convert.ToInt32(SCM.freqPoint), SCM.testFreqArr);
            }
            if (!this.gs.DrawMap())
            {
                this.buttonTestStop_Click(sender, e);
                MessageBox.Show("上传发生故障");
            }
            if (this.radButtonTestZhouAz.Checked)
            {
                SCM.Limit_az = 1;
                this.gs.TrackbarScroll += new getprams.TrackbarEvent(this.trackBarAz_Scroll);
                this.textBoxAzYD.Text = Convert.ToString(SCM.testAngleBound);
                this.buttonAzYD_Click(sender, e);
            }
            else if (this.radButtonTestZhouSd.Checked)
            {
                this.gs.TrackbarScroll += new getprams.TrackbarEvent(this.trackBarSd_Scroll);
                this.buttonSdCW_Click(sender, e);
            }
            else if (this.radButtonTestZhouEl.Checked)
            {
                this.gs.TrackbarScroll += new getprams.TrackbarEvent(this.trackBarEl_Scroll);
                this.buttonElCW_Click(sender, e);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonTestCW_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonTestStart_Click(object sender, EventArgs e)
    {
        try
        {
            if (SCM.testFX == 1)
            {
                this.buttonTestCCW.Enabled = false;
                this.buttonTestCW.Enabled = true;
                SCM.testFX = 2;
            }
            else
            {
                this.buttonTestCCW.Enabled = true;
                this.buttonTestCW.Enabled = false;
                SCM.testFX = 1;
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonTestStart_Click + " + exception.ToString());
        }
    }

    private void buttonTestStart1_Click(object sender, EventArgs e)
    {
        try
        {
            SCM.testAngleBound = Convert.ToSingle(this.textBox5.Text);
            SCM.newIndex = 5;
            this.ChangeColor();
            this.grouper5Step.BackgroundColor = Color.LightGreen;
            if (this.radButtonTestZhouAz.Checked)
            {
                SCM.Limit_az = 2;
                this.textBoxAzYD.Text = Convert.ToString(-(SCM.testAngleBound / 2f));
                this.buttonAzYD_Click(sender, e);
            }
            if (this.radButtonTestZhouSd.Checked)
            {
                this.textBoxSdYD.Text = Convert.ToString(-(SCM.testAngleBound / 2f));
                this.buttonSdYD_Click(sender, e);
            }
            if (this.radButtonTestZhouEl.Checked)
            {
                this.textBoxElYD.Text = Convert.ToString(-(SCM.testAngleBound / 2f));
                this.buttonElYD_Click(sender, e);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonTestStart_Click + " + exception.ToString());
        }
    }

    private void buttonTestStop_Click(object sender, EventArgs e)
    {
        try
        {
            SCM.DataTest = 0;
            if (SCM.testZhou == 1)
            {
                this.buttonAzStop_Click(sender, e);
            }
            if (SCM.testZhou == 2)
            {
                this.buttonElStop_Click(sender, e);
            }
            if (SCM.testZhou == 3)
            {
                this.buttonSdStop_Click(sender, e);
            }
            if (SCM.testFX == 1)
            {
                this.buttonTestCCW.Enabled = true;
                this.buttonTestCW.Enabled = false;
                this.buttonTestStart.Enabled = true;
            }
            else
            {
                this.buttonTestCCW.Enabled = false;
                this.buttonTestCW.Enabled = true;
                this.buttonTestStart.Enabled = true;
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonTestStop_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void buttonVNAinit_Click(object sender, EventArgs e)
    {
        long num = -65535L;
        try
        {
            if (SCM.PNARunning && !(define.VNAType == ""))
            {
                string str;
                if (this.numUpDownVNAPower.Value > 30M)
                {
                    this.numUpDownVNAPower.Value = 0M;
                }
                if ((define.VNAConnect == "TCPIP") || (define.VNAConnect == "USB"))
                {
                    if (define.SetPSET != "")
                    {
                        visa32.viPrintf(visa32.vi, define.SetPSET + "\n");
                    }
                    define.Sleep(30L);
                    if (define.SetS21 != "")
                    {
                        str = define.SetS21 + "\n";
                        num = visa32.viPrintf(visa32.vi, str, str.Length);
                        if (define.SetWin1StateOFF != "")
                        {
                            str = define.SetWin1StateOFF + "\n";
                            visa32.viPrintf(visa32.vi, str, str.Length);
                        }
                        define.Sleep(30L);
                        if (define.SetWin2StateON != "")
                        {
                            str = define.SetWin2StateON + "\n";
                            visa32.viPrintf(visa32.vi, str, str.Length);
                        }
                        define.Sleep(30L);
                        if (define.SetWin2Para != "")
                        {
                            str = define.SetWin2Para + "\n";
                            visa32.viPrintf(visa32.vi, str, str.Length);
                        }
                        define.Sleep(30L);
                        if (define.SetWin2Trace2 != "")
                        {
                            str = define.SetWin2Trace2 + "\n";
                            visa32.viPrintf(visa32.vi, str, str.Length);
                        }
                        define.Sleep(30L);
                    }
                    define.Sleep(30L);
                    if ((this.numUpDownVNAPower.Value != 0M) && (define.SetPower != ""))
                    {
                        str = define.SetPower + this.numUpDownVNAPower.Value.ToString() + "\n";
                        num = visa32.viPrintf(visa32.vi, str, str.Length);
                    }
                    if ((this.numUpDownVNAAverage.Value != 0M) && (define.SetAVER != ""))
                    {
                        str = define.SetAVER + " " + this.numUpDownVNAAverage.Value.ToString() + "\n";
                        num = visa32.viPrintf(visa32.vi, str, str.Length);
                    }
                    if (define.SetAVERON != "")
                    {
                        str = define.SetAVERON + "\n";
                        num = visa32.viPrintf(visa32.vi, str, str.Length);
                    }
                    define.Sleep(30L);
                    if ((Convert.ToInt32(this.textBox6.Text) != 0) && (define.SetRLEV != ""))
                    {
                        str = define.SetRLEV + "-50\n";
                        num = visa32.viPrintf(visa32.vi, str, str.Length);
                    }
                    define.Sleep(30L);
                    if ((Convert.ToInt32(this.textBox6.Text) != 0) && (define.SetSmooth != null))
                    {
                        str = define.SetSmooth + Convert.ToInt32(this.textBox6.Text).ToString() + "\n";
                        num = visa32.viPrintf(visa32.vi, str, str.Length);
                    }
                    if (define.SetSmoothON != null)
                    {
                        str = define.SetSmoothON + "\n";
                        num = visa32.viPrintf(visa32.vi, str, str.Length);
                    }
                    define.Sleep(30L);
                    if ((Convert.ToInt32(this.textBox6.Text) != 0) && (define.SetBAND != ""))
                    {
                        str = define.SetBAND + "10000\n";
                        num = visa32.viPrintf(visa32.vi, str, str.Length);
                    }
                    if (define.SetStart != "")
                    {
                        SCM.freqStar = "1710";
                        str = define.SetStart + (Convert.ToSingle(SCM.freqStar) * 1000000f) + "\n";
                        num = visa32.viPrintf(visa32.vi, str, str.Length);
                    }
                    define.Sleep(30L);
                    if (define.SetStop != "")
                    {
                        SCM.freqStop = "2170";
                        str = define.SetStop + (Convert.ToSingle(SCM.freqStop) * 1000000f) + "\n";
                        num = visa32.viPrintf(visa32.vi, str, str.Length);
                    }
                    SCM.VNAInitSucess = true;
                }
                else if (define.VNAConnect == "NI")
                {
                    if (define.SetPSET != "")
                    {
                        SCM.device.Write(define.SetPSET);
                    }
                    define.Sleep(30L);
                    if (define.SetS21 != "")
                    {
                        SCM.device.Write(define.SetS21);
                    }
                    define.Sleep(30L);
                    if (define.SetRLEV != "")
                    {
                        SCM.device.Write(define.SetRLEV + Convert.ToInt32("-30").ToString());
                    }
                    if (define.SetPoint != "")
                    {
                        SCM.device.Write(define.SetPoint + "201");
                    }
                    if ((this.numUpDownVNAPower.Value != 0M) && (define.SetPower != ""))
                    {
                        SCM.device.Write(define.SetPower + this.numUpDownVNAPower.Value.ToString());
                    }
                    define.Sleep(30L);
                    if (define.SetStart != "")
                    {
                        str = define.SetStart + "806000000 \n";
                        SCM.device.Write(str);
                    }
                    define.Sleep(30L);
                    if (define.SetStop != "")
                    {
                        str = define.SetStop + "960000000 \n";
                        SCM.device.Write(str);
                    }
                    define.Sleep(30L);
                    if (define.SetSweep != "")
                    {
                        SCM.device.Write(define.SetSweep + "0.03 MS");
                    }
                    define.Sleep(30L);
                    if (define.SetSmooth != "")
                    {
                        str = define.SetSmooth + Convert.ToInt32("10").ToString() + "\n";
                        SCM.device.Write(str);
                    }
                    if (define.SetSmoothON != "")
                    {
                        str = define.SetSmoothON + "\n";
                        SCM.device.Write(str);
                    }
                    if ((this.numUpDownVNAAverage.Value != 0M) && (define.SetAVER != ""))
                    {
                        SCM.device.Write(define.SetAVER + this.numUpDownVNAAverage.Value.ToString() + "\n");
                    }
                    if (define.SetAVERON != "")
                    {
                        SCM.device.Write(define.SetAVERON);
                    }
                    if (define.SetPowerON != "")
                    {
                        SCM.device.Write(define.SetPowerON);
                    }
                    if (define.AntName == "8753")
                    {
                        SCM.device.Write("FORM4");
                    }
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("buttonVNAinit_Click + " + exception.ToString());
        }
    }

    private void buttonVNAinit1_Click(object sender, EventArgs e)
    {
        try
        {
            SCM.newIndex = 1;
            this.ChangeColor();
            this.grouper1Step.BackgroundColor = Color.LightGreen;
            this.buttonVNAinit_Click(sender, e);
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void buttonXLStart_Click(object sender, EventArgs e)
    {
        try
        {
            SCM.HomingFlag = 2;
            SCM.Az_angle_Flag = 1;
            SCM.El_angle_Flag = 1;
            SCM.Sd_angle_Flag = 1;
            SCM.Rv_angle_Flag = 1;
            MPC08.fast_hmove4(define.azZhou, this.GetDirFromDis(800000f), define.elZhou, this.GetDirFromDis(320000f), define.sdZhou, this.GetDirFromDis(400000f), define.rvZhou, this.GetDirFromDis(600000f));
        }
        catch (Exception exception)
        {
            errLogFunction("buttonXLStart_Click + " + exception.ToString());
        }
    }

    private void buttonXLStop_Click(object sender, EventArgs e)
    {
        try
        {
            SCM.HomingFlag = 0;
            SCM.Az_angle_Flag = 0;
            SCM.El_angle_Flag = 0;
            SCM.Sd_angle_Flag = 0;
            SCM.Rv_angle_Flag = 0;
            MPC08.decel_stop4(define.azZhou, define.elZhou, define.sdZhou, define.rvZhou);
        }
        catch (Exception exception)
        {
            errLogFunction("buttonXLStart_Click + " + exception.ToString());
        }
    }

    public void ChangeColor()
    {
        try
        {
            this.grouper1Step.BackgroundColor = Color.White;
            this.grouper2Step.BackgroundColor = Color.White;
            this.grouper3Step.BackgroundColor = Color.White;
            this.grouper4Step.BackgroundColor = Color.White;
            this.grouper5Step.BackgroundColor = Color.White;
            this.grouper6Step.BackgroundColor = Color.White;
            this.grouper7Step.BackgroundColor = Color.White;
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    public void ChangeGroupbox()
    {
        try
        {
            this.trackBarAz.BackColor = Color.White;
            this.groupBoxAz.BackgroundColor = Color.White;
            this.trackBarEl.BackColor = Color.White;
            this.groupBoxEl.BackgroundColor = Color.White;
            this.trackBarSd.BackColor = Color.White;
            this.groupBoxSd.BackgroundColor = Color.White;
            this.groupBoxDn.BackgroundColor = Color.White;
            this.groupBoxPt.BackgroundColor = Color.White;
            this.groupBoxRv.BackgroundColor = Color.White;
            this.trackBarDn.BackColor = Color.White;
            this.trackBarRv.BackColor = Color.White;
            this.trackBarPt.BackColor = Color.White;
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void CloseDevice()
    {
        try
        {
            if (SCM.Az_angle_Flag == 1)
            {
                SCM.Send_Cmd[1] = 0x19;
                this.serialPortScm.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
            }
            if (SCM.El_angle_Flag == 1)
            {
                SCM.Send_Cmd[1] = 0x1a;
                this.serialPortScm.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
            }
            if (SCM.Sd_angle_Flag == 1)
            {
                SCM.Send_Cmd[1] = 0x1d;
                this.serialPortScm.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
            }
            if (SCM.Dn_angle_Flag == 1)
            {
                SCM.Send_Cmd[1] = 0x1b;
                this.serialPortScm.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
            }
            if (SCM.Rv_angle_Flag == 1)
            {
                SCM.Send_Cmd[1] = 0x1c;
                this.serialPortScm.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
            }
            if (SCM.Pt_angle_Flag == 1)
            {
                SCM.Send_Cmd[1] = 2;
                this.serialPortScm.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
            }
            if (this.serialPortScm.IsOpen)
            {
                this.serialPortScm.Close();
            }
            if (this.serialPortAz.IsOpen)
            {
                this.serialPortAz.Close();
            }
            if (this.serialPortDn.IsOpen)
            {
                this.serialPortDn.Close();
            }
            if (this.serialPortEl.IsOpen)
            {
                this.serialPortEl.Close();
            }
            if (this.serialPortPt.IsOpen)
            {
                this.serialPortPt.Close();
            }
            if (this.serialPortSd.IsOpen)
            {
                this.serialPortSd.Close();
            }
            if (this.serialPortRv.IsOpen)
            {
                this.serialPortRv.Close();
            }
            if (this.serialPortSwitch.IsOpen)
            {
                this.serialPortSwitch.Close();
            }
            if (this.serialPortGF.IsOpen)
            {
                this.serialPortGF.Close();
            }
            if (this.serialPortSignal.IsOpen)
            {
                this.serialPortSignal.Close();
            }
            if (SCM.PNARunning && ((define.VNAConnect == "TCPIP") || (define.SigConnect == "TCPIP")))
            {
                visa32.viClose(visa32.vi);
                visa32.viClose(visa32.sesn);
            }
            else if (SCM.PNARunning && ((define.VNAConnect == "NI") || (define.SigConnect == "NI")))
            {
                SCM.device.Dispose();
            }
        }
        catch (Exception exception)
        {
            errLogFunction("Main--CloseDevice + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void colorSliderAz_Scroll(object sender, ScrollEventArgs e)
    {
        try
        {
            this.trackBarAz.Value = this.colorSliderAz.Value;
            this.trackBarAz_Scroll(sender, e);
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void colorSliderDn_Scroll(object sender, ScrollEventArgs e)
    {
        try
        {
            this.trackBarDn.Value = this.colorSliderDn.Value;
            this.trackBarDn_Scroll(sender, e);
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void colorSliderEl_Scroll(object sender, ScrollEventArgs e)
    {
        try
        {
            this.trackBarEl.Value = this.colorSliderEl.Value;
            this.trackBarEl_Scroll(sender, e);
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void colorSliderPt_Scroll(object sender, ScrollEventArgs e)
    {
        try
        {
            this.trackBarPt.Value = this.colorSliderPt.Value;
            this.trackBarPt_Scroll(sender, e);
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void colorSliderRv_Scroll(object sender, ScrollEventArgs e)
    {
        try
        {
            this.trackBarRv.Value = this.colorSliderRv.Value;
            this.trackBarRv_Scroll(sender, e);
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void colorSliderSd_Scroll(object sender, ScrollEventArgs e)
    {
        try
        {
            this.trackBarSd.Value = this.colorSliderSd.Value;
            this.trackBarSd_Scroll(sender, e);
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void comboBoxFreq_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            switch (this.comboBoxFreq.SelectedItem.ToString())
            {
                case "中心频率(MHZ)":
                    this.textBoxRrveFreq.Text = "824";
                    return;

                case "扫描带宽(KHZ)":
                    this.textBoxRrveFreq.Text = "500";
                    return;

                case "中频带宽(KHZ)":
                    this.textBoxRrveFreq.Text = "10";
                    return;

                case "视频带宽(KHZ)":
                    this.textBoxRrveFreq.Text = "10";
                    return;

                case "参考电平(DB)":
                    this.textBoxRrveFreq.Text = "-30";
                    return;

                case "扫描时间(MS)":
                    this.textBoxRrveFreq.Text = "30";
                    return;

                case "内存点数":
                    this.textBoxRrveFreq.Text = "1000";
                    return;
            }
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void comboBoxFreq1_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            int num = 0;
            for (int i = 1; i < SCM.testFreqArr.Length; i++)
            {
                if (SCM.testFreqArr[i] != "")
                {
                    num++;
                }
            }
            if (num == 0)
            {
                MessageBox.Show("请设置有效的频点", "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                return;
            }
            if ((this.comboBoxFreq1.SelectedIndex > num) || (this.comboBoxFreq1.SelectedIndex == 0))
            {
                this.DataSearchInt = 1;
                MessageBox.Show("请选择有效的频点", "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
            else
            {
                switch (this.comboBoxFreq1.SelectedIndex)
                {
                    case 1:
                        this.DataSearchInt = 1;
                        goto Label_0133;

                    case 2:
                        this.DataSearchInt = 2;
                        goto Label_0133;

                    case 3:
                        this.DataSearchInt = 3;
                        goto Label_0133;

                    case 4:
                        this.DataSearchInt = 4;
                        goto Label_0133;

                    case 5:
                        this.DataSearchInt = 5;
                        goto Label_0133;

                    case 6:
                        this.DataSearchInt = 6;
                        goto Label_0133;

                    case 7:
                        this.DataSearchInt = 7;
                        goto Label_0133;

                    case 8:
                        this.DataSearchInt = 8;
                        goto Label_0133;

                    case 9:
                        this.DataSearchInt = 9;
                        goto Label_0133;
                }
            }
        Label_0133:
            this.textBox1.Text = SCM.testFreqArr[this.DataSearchInt].ToString();
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void comboBoxLNAN_SelectedIndexChanged(object sender, EventArgs e)
    {
    }

    private void comboBoxPNAN_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            byte[] buffer = new byte[10];
            byte[] buffer2 = new byte[10];
            buffer[0] = 0x7e;
            buffer[1] = 15;
            buffer[2] = 0xff;
            buffer[3] = 0xe9;
            buffer[4] = 0;
            buffer[5] = 1;
            buffer[9] = 0x7f;
            buffer2[0] = 0x7e;
            buffer2[1] = 15;
            buffer2[2] = 0xff;
            buffer2[3] = 0x11;
            buffer2[4] = 0;
            buffer2[5] = 1;
            buffer2[6] = 0;
            buffer2[7] = 0x8e;
            buffer2[8] = 0xc1;
            buffer2[9] = 0x7f;
            string str = this.comboBoxPNAN.SelectedItem.ToString();
            if (str != null)
            {
                if (!(str == "1"))
                {
                    if (str == "2")
                    {
                        goto Label_00FF;
                    }
                    if (str == "3")
                    {
                        goto Label_0142;
                    }
                }
                else
                {
                    buffer[6] = 1;
                    buffer[7] = 0x21;
                    buffer[8] = 0xcb;
                    this.serialPortGF.Write(buffer, 0, buffer.Length);
                    Thread.Sleep(50);
                    this.serialPortGF.Write(buffer2, 0, buffer2.Length);
                    define.Gf_Ask = 1;
                }
            }
            return;
        Label_00FF:
            buffer[6] = 2;
            buffer[7] = 0x42;
            buffer[8] = 0xfb;
            this.serialPortGF.Write(buffer, 0, buffer.Length);
            Thread.Sleep(50);
            this.serialPortGF.Write(buffer2, 0, buffer2.Length);
            define.Gf_Ask = 2;
            return;
        Label_0142:
            buffer[6] = 3;
            buffer[7] = 0x63;
            buffer[8] = 0xeb;
            this.serialPortGF.Write(buffer, 0, buffer.Length);
            Thread.Sleep(50);
            this.serialPortGF.Write(buffer2, 0, buffer2.Length);
            define.Gf_Ask = 3;
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void comboBoxSet_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            string str = this.comboBoxSet.SelectedItem.ToString();
            if (str != null)
            {
                if (!(str == "平滑次数"))
                {
                    if (str == "带宽(kHz)")
                    {
                        goto Label_0062;
                    }
                    if (str == "参考电平(DB)")
                    {
                        goto Label_0075;
                    }
                    if (str == "扫描时间(MS)")
                    {
                        goto Label_0088;
                    }
                }
                else
                {
                    this.textBox6.Text = "15";
                }
            }
            return;
        Label_0062:
            this.textBox6.Text = "30";
            return;
        Label_0075:
            this.textBox6.Text = "-30";
            return;
        Label_0088:
            this.textBox6.Text = "30";
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void comboBoxSwitchN_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            if (!this.serialPortSwitch.IsOpen)
            {
                this.serialPortSwitch.Open();
            }
            if (SCM.autoTestStart == 0)
            {
                switch (this.comboBoxSwitchN.SelectedIndex)
                {
                    case 1:
                        this.comboBoxVANPower.Text = "OFF";
                        this.comboBoxVANPower_SelectedIndexChanged(sender, e);
                        this.serialPortSwitch.Write("b1#");
                        define.Sleep(30L);
                        this.serialPortSwitch.Write("b1#");
                        return;

                    case 2:
                        this.comboBoxVANPower.Text = "OFF";
                        this.comboBoxVANPower_SelectedIndexChanged(sender, e);
                        this.serialPortSwitch.Write("b2#");
                        define.Sleep(30L);
                        this.serialPortSwitch.Write("b2#");
                        return;

                    case 3:
                        this.comboBoxVANPower.Text = "OFF";
                        this.comboBoxVANPower_SelectedIndexChanged(sender, e);
                        this.serialPortSwitch.Write("b3#");
                        define.Sleep(30L);
                        this.serialPortSwitch.Write("b3#");
                        return;

                    case 4:
                        this.comboBoxVANPower.Text = "OFF";
                        this.comboBoxVANPower_SelectedIndexChanged(sender, e);
                        this.serialPortSwitch.Write("b4#");
                        define.Sleep(30L);
                        this.serialPortSwitch.Write("b4#");
                        return;

                    case 5:
                        this.comboBoxVANPower.Text = "OFF";
                        this.comboBoxVANPower_SelectedIndexChanged(sender, e);
                        this.serialPortSwitch.Write("b5#");
                        define.Sleep(30L);
                        this.serialPortSwitch.Write("b5#");
                        return;

                    case 6:
                        this.comboBoxVANPower.Text = "OFF";
                        this.comboBoxVANPower_SelectedIndexChanged(sender, e);
                        this.serialPortSwitch.Write("b6#");
                        define.Sleep(30L);
                        this.serialPortSwitch.Write("b6#");
                        return;

                    case 7:
                        this.comboBoxVANPower.Text = "OFF";
                        this.comboBoxVANPower_SelectedIndexChanged(sender, e);
                        this.serialPortSwitch.Write("b7#");
                        define.Sleep(30L);
                        this.serialPortSwitch.Write("b7#");
                        return;

                    case 8:
                        this.comboBoxVANPower.Text = "OFF";
                        this.comboBoxVANPower_SelectedIndexChanged(sender, e);
                        this.serialPortSwitch.Write("b8#");
                        define.Sleep(30L);
                        this.serialPortSwitch.Write("b8#");
                        return;

                    case 9:
                        this.comboBoxVANPower.Text = "OFF";
                        this.comboBoxVANPower_SelectedIndexChanged(sender, e);
                        this.serialPortSwitch.Write("b9#");
                        return;

                    case 10:
                        this.serialPortSwitch.Write("ba#");
                        return;
                }
                this.label5.Text = "选择端口:";
            }
            else
            {
                switch (this.comboBoxSwitchN.SelectedIndex)
                {
                    case 1:
                        this.serialPortSwitch.Write("b1#");
                        define.Sleep(30L);
                        this.serialPortSwitch.Write("b1#");
                        return;

                    case 2:
                        this.serialPortSwitch.Write("b2#");
                        define.Sleep(30L);
                        this.serialPortSwitch.Write("b2#");
                        return;

                    case 3:
                        this.serialPortSwitch.Write("b3#");
                        define.Sleep(30L);
                        this.serialPortSwitch.Write("b3#");
                        return;

                    case 4:
                        this.serialPortSwitch.Write("b4#");
                        define.Sleep(30L);
                        this.serialPortSwitch.Write("b4#");
                        return;

                    case 5:
                        this.serialPortSwitch.Write("b5#");
                        define.Sleep(30L);
                        this.serialPortSwitch.Write("b5#");
                        return;

                    case 6:
                        this.serialPortSwitch.Write("b6#");
                        define.Sleep(30L);
                        this.serialPortSwitch.Write("b6#");
                        return;

                    case 7:
                        this.serialPortSwitch.Write("b7#");
                        define.Sleep(30L);
                        this.serialPortSwitch.Write("b7#");
                        return;

                    case 8:
                        this.serialPortSwitch.Write("b8#");
                        define.Sleep(30L);
                        this.serialPortSwitch.Write("b8#");
                        return;

                    case 9:
                        this.serialPortSwitch.Write("b9#");
                        define.Sleep(30L);
                        this.serialPortSwitch.Write("b9#");
                        return;

                    case 10:
                        this.serialPortSwitch.Write("ba#");
                        return;
                }
                this.label5.Text = "选择端口:";
            }
        }
        catch (Exception exception)
        {
            MessageBox.Show(exception.ToString());
        }
    }

    private void comboBoxVANPower_SelectedIndexChanged(object sender, EventArgs e)
    {
        long num = -65535L;
        try
        {
            if (SCM.PNARunning && !(define.VNAType == ""))
            {
                string str;
                if (this.comboBoxVANPower.Text == "ON")
                {
                    if ((define.VNAConnect == "TCPIP") || (define.VNAConnect == "USB"))
                    {
                        if (define.SetPowerON != "")
                        {
                            str = define.SetPowerON + "\n";
                            num = visa32.viPrintf(visa32.vi, str, str.Length);
                        }
                    }
                    else if ((define.VNAConnect == "NI") && (define.SetPowerON != ""))
                    {
                        str = define.SetPowerON + "\n";
                        SCM.device.Write(str);
                    }
                }
                else if ((define.VNAConnect == "TCPIP") || (define.VNAConnect == "USB"))
                {
                    if (define.SetPowerOFF != "")
                    {
                        str = define.SetPowerOFF + "\n";
                        num = visa32.viPrintf(visa32.vi, str, str.Length);
                    }
                }
                else if ((define.VNAConnect == "NI") && (define.SetPowerOFF != ""))
                {
                    str = define.SetPowerOFF + "\n";
                    SCM.device.Write(str);
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("numUpDownVNAVBW_KeyDown + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void computeDownObEE(float[] MainDateAngle1, float[] MainDateElec1, float[] MainDateAngle2, float[] MainDateElec2, out float beamOffset1)
    {
        beamOffset1 = 0f;
        try
        {
            float ttMaxElec = 0f;
            float ttMaxAngle = 0f;
            float num3 = 0f;
            float[] array = new float[MainDateAngle1.Length];
            float[] numArray2 = new float[MainDateElec1.Length];
            MainDateAngle1.CopyTo(array, 0);
            MainDateElec1.CopyTo(numArray2, 0);
            this.computeMaxVAndDownOb(array, numArray2, out ttMaxAngle, out ttMaxElec);
            array = new float[MainDateAngle2.Length];
            numArray2 = new float[MainDateElec2.Length];
            MainDateAngle2.CopyTo(array, 0);
            MainDateElec2.CopyTo(numArray2, 0);
            this.computeMaxVAndDownOb(array, numArray2, out num3, out ttMaxElec);
            if (ttMaxAngle > num3)
            {
                beamOffset1 = (ttMaxAngle - num3) / 2f;
            }
            if (ttMaxAngle < num3)
            {
                beamOffset1 = (num3 - ttMaxAngle) / 2f;
            }
        }
        catch
        {
        }
    }

    private void computeMaxVAndDownOb(float[] MainDateAngle, float[] MainDateElec, out float ttMaxAngle, out float ttMaxElec)
    {
        ttMaxElec = 0f;
        ttMaxAngle = 0f;
        try
        {
            float[] array = new float[MainDateAngle.Length];
            float[] numArray2 = new float[MainDateElec.Length];
            float num = 0f;
            float num2 = 0f;
            float num3 = 0f;
            float num4 = 0f;
            MainDateAngle.CopyTo(array, 0);
            MainDateElec.CopyTo(numArray2, 0);
            num = numArray2[0];
            num2 = array[0];
            int index = 0;
            int num6 = 0;
            for (int i = 0; i < array.Length; i++)
            {
                if (num < numArray2[i])
                {
                    num = numArray2[i];
                    index = i;
                    num3 = array[i];
                }
            }
            for (int j = index; j < array.Length; j++)
            {
                if ((num == numArray2[j]) && (j < (array.Length - 1)))
                {
                    num4 = array[j];
                }
                if ((j - index) == 100)
                {
                    num6 = 1;
                    break;
                }
            }
            if ((num6 == 1) && (numArray2[index] == numArray2[index + 0x5f]))
            {
                num2 = 0f;
            }
            else
            {
                num2 = (num3 + num4) / 2f;
            }
            ttMaxAngle = num2;
            ttMaxElec = num;
        }
        catch
        {
        }
    }

    public void ComputeParameter()
    {
        try
        {
            for (int i = 1; i < 9; i++)
            {
                if (SCM.testPort[i].flag && SCM.testPort[i].V)
                {
                    for (int j = 0; j < savedata.Length; j++)
                    {
                        if (savedata[j].Freq != "")
                        {
                            Array.Resize<define.map>(ref savedata, 2);
                            Array.Resize<string>(ref define.sFileName, 2);
                            define.sFileName[0] = SCM.saveDir + @"\" + i.ToString() + @"\E-" + savedata[i].Freq.ToString() + ".txt";
                            define.sFileName[1] = SCM.saveDir + @"\" + i.ToString() + @"\E1-" + savedata[i].Freq.ToString() + ".txt";
                            this.OpenTxtData(define.sFileName[0], 0);
                            this.OpenTxtData(define.sFileName[1], 1);
                            this.computeDownObEE(savedata[0].Angle, savedata[0].Elec, savedata[1].Angle, savedata[1].Elec, out savedata[0].beamOffset1);
                            this.saveTxtDataOBL(savedata[0].Angle, savedata[0].Elec, 0, define.sFileName[0]);
                            File.Delete(define.sFileName[1]);
                        }
                    }
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("GetDataArr + " + exception.ToString());
        }
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing && (this.components != null))
        {
            this.components.Dispose();
        }
        base.Dispose(disposing);
    }

    private void dnDisplay()
    {
        try
        {
            float num = this.pictureBoxDn.Height / 2;
            float num2 = this.pictureBoxDn.Height / 2;
            Bitmap image = new Bitmap(this.sBItmap);
            Graphics graphics = Graphics.FromImage(image);
            Pen pen = new Pen(Color.Black);
            graphics.InterpolationMode = InterpolationMode.High;
            graphics.SmoothingMode = SmoothingMode.AntiAlias;
            graphics.TranslateTransform((float) (this.pictureBoxDn.Height / 2), (float) (this.pictureBoxDn.Height / 2));
            graphics.RotateTransform(SCM.dnAngle);
            GraphicsPath path = new GraphicsPath();
            path.AddLine((float) -7f, (float) 0f, (float) 0f, (float) (0f - ((num / 6f) * 5f)));
            path.AddLine((float) 0f, (float) (0f - ((num / 6f) * 5f)), (float) 7f, (float) 0f);
            path.CloseFigure();
            PathGradientBrush brush = new PathGradientBrush(path);
            brush.CenterColor = Color.Black;
            brush.SurroundColors = new Color[] { Color.White };
            graphics.FillPath(brush, path);
            graphics.ResetTransform();
            SolidBrush brush2 = new SolidBrush(Color.LightBlue);
            graphics.FillEllipse(brush2, (float) (num - 10f), (float) (num - 10f), (float) 20f, (float) 20f);
            this.pictureBoxDn.Image = image;
            pen.Dispose();
            graphics.Dispose();
        }
        catch (Exception exception)
        {
            errLogFunction("dnDisplay + " + exception.ToString());
        }
    }

    private void Drawm3D()
    {
        try
        {
            lock (this)
            {
                Pen pen = new Pen(Color.Red, 1f);
                Graphics graphics = Graphics.FromImage(this.sBitmap);
                graphics.InterpolationMode = InterpolationMode.High;
                graphics.SmoothingMode = SmoothingMode.HighQuality;
                graphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
                for (int i = 1; i < SCM.testFreqArr.Length; i++)
                {
                    if (SCM.testFreqArrColor[i] && ((SCM.testFreqArr[i] != "") || (SCM.testFreqArr[i] != null)))
                    {
                        pen = new Pen(getprams.MapColor[i], 1f);
                        float num2 = this.RvD3Angle[i][this.sPointNum] + 180f;
                        this.Y_3D_2[i] = this.D3Elec[i][this.sPointNum];
                        lock (this)
                        {
                            if (this.sPointNum == 0)
                            {
                                this.Temp3DAngle[i] = num2;
                                this.X_3D_1[i] = num2;
                                this.Y_3D_1[i] = this.Y_3D_2[i];
                            }
                            else
                            {
                                if (SCM.testFX == 1)
                                {
                                    if ((num2 - this.Temp3DAngle[i]) < 0f)
                                    {
                                        this.X_3D_2[i] = (num2 - this.Temp3DAngle[i]) + 360f;
                                    }
                                    else
                                    {
                                        this.X_3D_2[i] = num2 - this.Temp3DAngle[i];
                                    }
                                    if ((this.sPointNum > 2) && (Math.Abs((float) (this.X_3D_2[i] - this.X_3D_1[i])) < 100f))
                                    {
                                        graphics.DrawLine(pen, new PointF(((this.X_3D_1[i] * ((this.pictureBox1.Width - getprams.LeftMargin) - getprams.RightMargin)) / 360f) + getprams.LeftMargin, ((this.Y_3D_1[i] * ((this.pictureBox1.Height - getprams.TopMargin) - getprams.DownMargin)) / ((float) getprams.MinElec)) + getprams.TopMargin), new PointF(((this.X_3D_2[i] * ((this.pictureBox1.Width - getprams.LeftMargin) - getprams.RightMargin)) / 360f) + getprams.LeftMargin, ((this.Y_3D_2[i] * ((this.pictureBox1.Height - getprams.TopMargin) - getprams.DownMargin)) / ((float) getprams.MinElec)) + getprams.TopMargin));
                                    }
                                }
                                if (SCM.testFX == 2)
                                {
                                    if ((this.Temp3DAngle[i] - num2) < 0f)
                                    {
                                        this.X_3D_2[i] = (this.Temp3DAngle[i] - num2) + 360f;
                                    }
                                    else
                                    {
                                        this.X_3D_2[i] = this.Temp3DAngle[i] - num2;
                                    }
                                    if ((this.sPointNum > 2) && (Math.Abs((float) (this.X_3D_2[i] - this.X_3D_1[i])) < 100f))
                                    {
                                        graphics.DrawLine(pen, (float) ((this.pictureBox1.Width - getprams.RightMargin) - ((this.X_3D_1[i] * ((this.pictureBox1.Width - getprams.LeftMargin) - getprams.RightMargin)) / 360f)), (float) (((this.Y_3D_1[i] * ((this.pictureBox1.Height - getprams.TopMargin) - getprams.DownMargin)) / ((float) getprams.MinElec)) + getprams.TopMargin), (float) ((this.pictureBox1.Width - getprams.RightMargin) - ((this.X_3D_2[i] * ((this.pictureBox1.Width - getprams.LeftMargin) - getprams.RightMargin)) / 360f)), (float) (((this.Y_3D_2[i] * ((this.pictureBox1.Height - getprams.TopMargin) - getprams.DownMargin)) / ((float) getprams.MinElec)) + getprams.TopMargin));
                                    }
                                }
                                this.X_3D_1[i] = this.X_3D_2[i];
                                this.Y_3D_1[i] = this.Y_3D_2[i];
                            }
                        }
                    }
                }
                pen.Dispose();
                graphics.Dispose();
                this.pictureBox1.Image = this.sBitmap;
            }
        }
        catch (Exception exception)
        {
            errLogFunction("Drawm3D + " + exception.ToString());
        }
    }

    private void Drawsn()
    {
        try
        {
            int num2;
            PointF tf;
            string str;
            Pen pen = new Pen(getprams.LineColor, 1f);
            Graphics graphics = Graphics.FromImage(this.sBitmap);
            Font font = new Font("宋体", 9f);
            SolidBrush brush = new SolidBrush(Color.Black);
            graphics.InterpolationMode = InterpolationMode.High;
            graphics.SmoothingMode = SmoothingMode.HighQuality;
            for (num2 = 0; num2 <= 12; num2++)
            {
                int num3 = (((((this.pictureBox1.Width - getprams.LeftMargin) - getprams.RightMargin) * num2) * 30) / Convert.ToInt32(360)) + getprams.LeftMargin;
                graphics.DrawLine(pen, num3, getprams.TopMargin, num3, this.pictureBox1.Height - getprams.DownMargin);
                tf = new PointF((float) (num3 - 10), (float) ((this.pictureBox1.Height - getprams.DownMargin) + 5));
                str = Convert.ToString((int) ((num2 * 30) - 180));
                graphics.DrawString(str, font, brush, tf);
            }
            for (num2 = 0; num2 <= 10; num2++)
            {
                int num4 = (((((this.pictureBox1.Height - getprams.TopMargin) - getprams.DownMargin) * num2) * 10) / 100) + getprams.TopMargin;
                graphics.DrawLine(pen, getprams.LeftMargin, num4, this.pictureBox1.Width - getprams.RightMargin, num4);
                tf = new PointF((float) (getprams.LeftMargin - 0x1c), (float) (num4 - 7));
                str = Convert.ToString(-(num2 * 10));
                graphics.DrawString(str, font, brush, tf);
            }
            pen.Color = Color.Blue;
            pen.DashStyle = DashStyle.Dash;
            pen.DashPattern = new float[] { 6f, 6f };
            graphics.DrawLine(pen, getprams.LeftMargin, ((((this.pictureBox1.Height - getprams.TopMargin) - getprams.DownMargin) * 3) / 100) + getprams.TopMargin, this.pictureBox1.Width - getprams.RightMargin, ((((this.pictureBox1.Height - getprams.TopMargin) - getprams.DownMargin) * 3) / 100) + getprams.TopMargin);
            pen.Dispose();
            graphics.Dispose();
        }
        catch (Exception exception)
        {
            errLogFunction("Draws + " + exception.ToString());
        }
    }

    private void elDisplay()
    {
        try
        {
            float num = this.pictureBoxEl.Height / 2;
            float num2 = this.pictureBoxEl.Height / 2;
            Bitmap image = new Bitmap(this.sBItmap);
            Graphics graphics = Graphics.FromImage(image);
            Pen pen = new Pen(Color.Black);
            graphics.InterpolationMode = InterpolationMode.High;
            graphics.SmoothingMode = SmoothingMode.AntiAlias;
            graphics.TranslateTransform((float) (this.pictureBoxEl.Height / 2), (float) (this.pictureBoxEl.Height / 2));
            graphics.RotateTransform(SCM.elAngle);
            GraphicsPath path = new GraphicsPath();
            path.AddLine((float) -7f, (float) 0f, (float) 0f, (float) (0f - ((num / 6f) * 5f)));
            path.AddLine((float) 0f, (float) (0f - ((num / 6f) * 5f)), (float) 7f, (float) 0f);
            path.CloseFigure();
            PathGradientBrush brush = new PathGradientBrush(path);
            brush.CenterColor = Color.Black;
            brush.SurroundColors = new Color[] { Color.White };
            graphics.FillPath(brush, path);
            graphics.ResetTransform();
            SolidBrush brush2 = new SolidBrush(Color.LightBlue);
            graphics.FillEllipse(brush2, (float) (num - 10f), (float) (num - 10f), (float) 20f, (float) 20f);
            this.pictureBoxEl.Image = image;
            pen.Dispose();
            graphics.Dispose();
        }
        catch (Exception exception)
        {
            errLogFunction("elDisplay + " + exception.ToString());
        }
    }

    public static void errLogFunction(string errStr)
    {
        try
        {
            string baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
            string path = AppDomain.CurrentDomain.BaseDirectory + "errLog.log";
            FileInfo info = new FileInfo(baseDirectory + "errLog.log");
            if (info.Length > 0x186a0L)
            {
                info.CopyTo(baseDirectory + "errLog1.log", true);
                info.Delete();
            }
            StreamWriter writer = new StreamWriter(path, true, Encoding.Default);
            writer.WriteLine(DateTime.Now.ToString() + "  ---  " + errStr);
            writer.WriteLine("");
            writer.Close();
        }
        catch
        {
        }
    }

    private float fDistacse(Point A, Point B)
    {
        double d = Math.Pow((double) (A.X - B.X), 2.0) + Math.Pow((double) (A.Y - B.Y), 2.0);
        return (float) Math.Sqrt(d);
    }

    private void fsDisplay()
    {
        try
        {
            float num = this.pictureBoxFS.Height / 2;
            float num2 = this.pictureBoxFS.Height / 2;
            Bitmap image = new Bitmap(this.sBItmap);
            Graphics graphics = Graphics.FromImage(image);
            Pen pen = new Pen(Color.Black);
            graphics.InterpolationMode = InterpolationMode.High;
            graphics.SmoothingMode = SmoothingMode.AntiAlias;
            graphics.TranslateTransform((float) (this.pictureBoxFS.Height / 2), (float) (this.pictureBoxFS.Height / 2));
            graphics.RotateTransform(SCM.fsAngle);
            GraphicsPath path = new GraphicsPath();
            path.AddLine((float) -7f, (float) 0f, (float) 0f, (float) (0f - ((num / 6f) * 5f)));
            path.AddLine((float) 0f, (float) (0f - ((num / 6f) * 5f)), (float) 7f, (float) 0f);
            path.CloseFigure();
            PathGradientBrush brush = new PathGradientBrush(path);
            brush.CenterColor = Color.Black;
            brush.SurroundColors = new Color[] { Color.White };
            graphics.FillPath(brush, path);
            graphics.ResetTransform();
            SolidBrush brush2 = new SolidBrush(Color.LightBlue);
            graphics.FillEllipse(brush2, (float) (num - 10f), (float) (num - 10f), (float) 20f, (float) 20f);
            this.pictureBoxFS.Image = image;
            pen.Dispose();
            graphics.Dispose();
        }
        catch (Exception exception)
        {
            errLogFunction("ptDisplay + " + exception.ToString());
        }
    }

    public int GetDirFromDis(float Dist)
    {
        if (Dist >= 0f)
        {
            return 1;
        }
        return -1;
    }

    public void GetMultAxesParam(int AxesNum, float LowSpeed, float HighSpeed, float accel, int Dis, int MoveType)
    {
        try
        {
            MAxesNum = AxesNum;
            MLowSpeed = LowSpeed;
            MHighSpeed = HighSpeed;
            MAccel = accel;
            MDis = Dis;
            MSpeedType = 2;
            MMoveType = MoveType;
            MAxesNumType = 1;
            string s = "FF," + AxesNum.ToString() + "," + LowSpeed.ToString() + "," + HighSpeed.ToString() + "," + accel.ToString() + "," + Dis.ToString() + "," + MoveType.ToString() + ",FE";
            this.ClientSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            IPEndPoint remoteEP = new IPEndPoint(IPAddress.Parse(define.ClientComIP), this.IPendPoint);
            this.ClientSocket.Connect(remoteEP);
            this.ClientSocket.Send(Encoding.UTF8.GetBytes(s));
            Thread.Sleep(30);
            this.ClientSocket.Close();
        }
        catch (Exception exception)
        {
            this.ClientSocket.Close();
            errLogFunction("GetMultAxesParam + " + exception.ToString());
        }
    }

    public void InitBoard()
    {
        switch (this.SetBoard())
        {
            case -10:
                MessageBox.Show("多卡型号搭配错误,请检查MPC08运动控制卡型号是否正确\n    搭配型号错误");
                break;

            case -6:
                MessageBox.Show("型号错误,请检查MPC08运动控制卡型号是否正确\n    型号错误");
                break;

            case -5:
                MessageBox.Show("软件版本错误,请检查MPC08函数库与驱动程序版本\n    驱动程序版本错误");
                break;

            case -2:
                MessageBox.Show("初始化错误,请检查MPC08运动控制卡是否正确插入您的计算机,并检查卡的版本号\n    自动设置错误");
                break;

            case -1:
                MessageBox.Show("自动设置错误,请检查MPC08运动控制卡是否正确插入您的计算机" + glTotalAxes + "轴\n    自动设置错误");
                break;

            case 0:
                MessageBox.Show("初始化成功");
                FlagLoading = true;
                break;
        }
    }

    private void InitCom232()
    {
        int scm = 0;
        int num3 = 0;
        int num4 = 0;
        int num5 = 0;
        try
        {
            int num2;
            string str = "single";
            if (define.comScm)
            {
                scm = define.Scm;
                this.serialPortScm.PortName = "COM" + define.Scm.ToString();
                this.serialPortScm.BaudRate = 0x9600;
                this.serialPortScm.Parity = Parity.None;
                this.serialPortScm.DataBits = 8;
                this.serialPortScm.StopBits = StopBits.One;
                this.serialPortScm.ReceivedBytesThreshold = 0x1c;
                this.serialPortScm.Open();
                this.serialPortScm.RtsEnable = true;
                this.serialPortScm.DtrEnable = true;
                this.serialPortScm.DiscardInBuffer();
            }
            if (!(!define.comAz || define.ScmAz))
            {
                scm = define.Az;
                this.serialPortAz.PortName = "COM" + define.Az.ToString();
                this.serialPortAz.BaudRate = 0x2580;
                this.serialPortAz.Parity = Parity.None;
                this.serialPortAz.DataBits = 8;
                this.serialPortAz.StopBits = StopBits.One;
                this.serialPortAz.ReceivedBytesThreshold = 13;
                this.serialPortAz.Open();
                this.serialPortAz.RtsEnable = true;
                this.serialPortAz.DtrEnable = true;
                this.serialPortAz.DiscardInBuffer();
            }
            if (!(!define.comDn || define.ScmDn))
            {
            }
            if (!(!define.comEl || define.ScmEl))
            {
                scm = define.El;
                this.serialPortEl.PortName = "COM" + define.El.ToString();
                this.serialPortEl.BaudRate = 0x2580;
                this.serialPortEl.Parity = Parity.None;
                this.serialPortEl.DataBits = 8;
                this.serialPortEl.StopBits = StopBits.One;
                this.serialPortEl.ReceivedBytesThreshold = 13;
                this.serialPortEl.Open();
                this.serialPortEl.RtsEnable = true;
                this.serialPortEl.DtrEnable = true;
                this.serialPortEl.DiscardInBuffer();
            }
            if (define.comPt)
            {
                scm = define.Pt;
                this.serialPortPt.PortName = "COM" + define.Pt.ToString();
                this.serialPortPt.BaudRate = 0x2580;
                this.serialPortPt.Parity = Parity.None;
                this.serialPortPt.DataBits = 8;
                this.serialPortPt.StopBits = StopBits.One;
                this.serialPortPt.ReceivedBytesThreshold = 6;
                this.serialPortPt.Open();
                this.serialPortPt.RtsEnable = true;
                this.serialPortPt.DtrEnable = true;
                this.serialPortPt.DiscardInBuffer();
            }
            if (!(!define.comNSd || define.ScmNSd))
            {
            }
            if (!(!define.comRv || define.ScmRv))
            {
                scm = define.Rv;
                this.serialPortRv.PortName = "COM" + define.Rv.ToString();
                this.serialPortRv.BaudRate = 0x2580;
                this.serialPortRv.Parity = Parity.None;
                this.serialPortRv.DataBits = 8;
                this.serialPortRv.StopBits = StopBits.One;
                this.serialPortRv.ReceivedBytesThreshold = 13;
                this.serialPortRv.Open();
                this.serialPortRv.RtsEnable = true;
                this.serialPortRv.DtrEnable = true;
                this.serialPortRv.DiscardInBuffer();
            }
            if (define.comPt)
            {
                this.serialPtAngle.BaudRate = 0x2580;
                this.serialPtAngle.Parity = Parity.None;
                this.serialPtAngle.DataBits = 8;
                this.serialPtAngle.StopBits = StopBits.One;
                this.serialPtAngle.ReceivedBytesThreshold = 13;
                this.serialPtAngle.Open();
            }
            scm = 0;
            if (this.serialPortScm.IsOpen)
            {
                str = "bwa";
                SCM.Send_Data[1] = 7;
                SCM.Send_Data[3] = Convert.ToByte(12);
                SCM.Send_Data[4] = Convert.ToByte(0x35);
                SCM.Send_Data[5] = Convert.ToByte(0);
                if ((SCM.Send_Data[3] == 0xff) || (SCM.Send_Data[3] == 0xfe))
                {
                    SCM.Send_Data[3] = Convert.ToByte((int) (0xff - SCM.Send_Data[3]));
                    num3 = 1;
                }
                else
                {
                    num3 = 0;
                }
                if ((SCM.Send_Data[4] == 0xff) || (SCM.Send_Data[4] == 0xfe))
                {
                    SCM.Send_Data[4] = Convert.ToByte((int) (0xff - SCM.Send_Data[4]));
                    num4 = 1;
                }
                else
                {
                    num4 = 0;
                }
                if ((SCM.Send_Data[5] == 0xff) || (SCM.Send_Data[5] == 0xfe))
                {
                    SCM.Send_Data[5] = Convert.ToByte((int) (0xff - SCM.Send_Data[5]));
                    num5 = 1;
                }
                else
                {
                    num5 = 0;
                }
                num2 = (num3 & num4) & num5;
                SCM.Send_Data[2] = Convert.ToByte(num2);
                this.serialPortScm.Write(SCM.Send_Data, 0, SCM.Send_Data.Length);
                define.Sleep(50L);
                str = "bwe";
                SCM.Send_Data[1] = 8;
                SCM.Send_Data[3] = Convert.ToByte(4);
                SCM.Send_Data[4] = Convert.ToByte(0xe2);
                SCM.Send_Data[5] = Convert.ToByte(0);
                if ((SCM.Send_Data[3] == 0xff) || (SCM.Send_Data[3] == 0xfe))
                {
                    SCM.Send_Data[3] = Convert.ToByte((int) (0xff - SCM.Send_Data[3]));
                    num3 = 1;
                }
                else
                {
                    num3 = 0;
                }
                if ((SCM.Send_Data[4] == 0xff) || (SCM.Send_Data[4] == 0xfe))
                {
                    SCM.Send_Data[4] = Convert.ToByte((int) (0xff - SCM.Send_Data[4]));
                    num4 = 1;
                }
                else
                {
                    num4 = 0;
                }
                if ((SCM.Send_Data[5] == 0xff) || (SCM.Send_Data[5] == 0xfe))
                {
                    SCM.Send_Data[5] = Convert.ToByte((int) (0xff - SCM.Send_Data[5]));
                    num5 = 1;
                }
                else
                {
                    num5 = 0;
                }
                num2 = (num3 & num4) & num5;
                SCM.Send_Data[2] = Convert.ToByte(num2);
                this.serialPortScm.Write(SCM.Send_Data, 0, SCM.Send_Data.Length);
                define.Sleep(50L);
                str = "bwsn";
                SCM.Send_Data[1] = 0x11;
                SCM.Send_Data[3] = Convert.ToByte(6);
                SCM.Send_Data[4] = Convert.ToByte(0x1a);
                SCM.Send_Data[5] = Convert.ToByte(0x80);
                if ((SCM.Send_Data[3] == 0xff) || (SCM.Send_Data[3] == 0xfe))
                {
                    SCM.Send_Data[3] = Convert.ToByte((int) (0xff - SCM.Send_Data[3]));
                    num3 = 1;
                }
                else
                {
                    num3 = 0;
                }
                if ((SCM.Send_Data[4] == 0xff) || (SCM.Send_Data[4] == 0xfe))
                {
                    SCM.Send_Data[4] = Convert.ToByte((int) (0xff - SCM.Send_Data[4]));
                    num4 = 1;
                }
                else
                {
                    num4 = 0;
                }
                if ((SCM.Send_Data[5] == 0xff) || (SCM.Send_Data[5] == 0xfe))
                {
                    SCM.Send_Data[5] = Convert.ToByte((int) (0xff - SCM.Send_Data[5]));
                    num5 = 1;
                }
                else
                {
                    num5 = 0;
                }
                num2 = (num3 & num4) & num5;
                SCM.Send_Data[2] = Convert.ToByte(num2);
                this.serialPortScm.Write(SCM.Send_Data, 0, SCM.Send_Data.Length);
                define.Sleep(50L);
            }
            if (define.ScmAz)
            {
                if (SCM.azAngle < 0f)
                {
                    SCM.azAngle += 360f;
                }
                SCM.Send_Data[1] = 0x2c;
                SCM.Send_Data[3] = Convert.ToByte((int) (((SCM.azAngle / 360f) * 800000f) / 65536f));
                SCM.Send_Data[4] = Convert.ToByte((int) ((((SCM.azAngle / 360f) * 800000f) % 65536f) / 256f));
                SCM.Send_Data[5] = Convert.ToByte((int) ((((SCM.azAngle / 360f) * 800000f) % 65536f) % 256f));
                if ((SCM.Send_Data[3] == 0xff) || (SCM.Send_Data[3] == 0xfe))
                {
                    SCM.Send_Data[3] = Convert.ToByte((int) (0xff - SCM.Send_Data[3]));
                    num3 = 1;
                }
                if ((SCM.Send_Data[4] == 0xff) || (SCM.Send_Data[4] == 0xfe))
                {
                    SCM.Send_Data[4] = Convert.ToByte((int) (0xff - SCM.Send_Data[4]));
                    num4 = 1;
                }
                if ((SCM.Send_Data[5] == 0xff) || (SCM.Send_Data[5] == 0xfe))
                {
                    SCM.Send_Data[5] = Convert.ToByte((int) (0xff - SCM.Send_Data[5]));
                    num5 = 1;
                }
                num2 = (num3 & num4) & num5;
                SCM.Send_Data[2] = Convert.ToByte(num2);
                this.serialPortScm.Write(SCM.Send_Data, 0, SCM.Send_Data.Length);
                define.Sleep(50L);
                if (SCM.azAngle > 180f)
                {
                    SCM.azAngle -= 360f;
                }
            }
            else
            {
                this.serialPortAz.Write("#01\r");
            }
            if (define.ScmEl)
            {
                if (SCM.elAngle < 0f)
                {
                    SCM.elAngle += 360f;
                }
                SCM.Send_Data[1] = 0x2d;
                SCM.Send_Data[3] = Convert.ToByte((int) (((SCM.elAngle / 360f) * 320000f) / 65536f));
                SCM.Send_Data[4] = Convert.ToByte((int) ((((SCM.elAngle / 360f) * 320000f) % 65536f) / 256f));
                SCM.Send_Data[5] = Convert.ToByte((int) ((((SCM.elAngle / 360f) * 320000f) % 65536f) % 256f));
                if ((SCM.Send_Data[3] == 0xff) || (SCM.Send_Data[3] == 0xfe))
                {
                    SCM.Send_Data[3] = Convert.ToByte((int) (0xff - SCM.Send_Data[3]));
                    num3 = 1;
                }
                else
                {
                    num3 = 0;
                }
                if ((SCM.Send_Data[4] == 0xff) || (SCM.Send_Data[4] == 0xfe))
                {
                    SCM.Send_Data[4] = Convert.ToByte((int) (0xff - SCM.Send_Data[4]));
                    num4 = 1;
                }
                else
                {
                    num4 = 0;
                }
                if ((SCM.Send_Data[5] == 0xff) || (SCM.Send_Data[5] == 0xfe))
                {
                    SCM.Send_Data[5] = Convert.ToByte((int) (0xff - SCM.Send_Data[5]));
                    num5 = 1;
                }
                else
                {
                    num5 = 0;
                }
                num2 = (num3 & num4) & num5;
                SCM.Send_Data[2] = Convert.ToByte(num2);
                this.serialPortScm.Write(SCM.Send_Data, 0, SCM.Send_Data.Length);
                define.Sleep(50L);
                if (SCM.elAngle > 180f)
                {
                    SCM.elAngle -= 360f;
                }
            }
            else
            {
                this.serialPortEl.Write("#02\r");
            }
            if (define.ScmNSd)
            {
                if (SCM.sdAngle < 0f)
                {
                    SCM.sdAngle += 360f;
                }
                SCM.Send_Data[1] = 0x30;
                SCM.Send_Data[3] = Convert.ToByte((int) (((SCM.sdAngle / 360f) * 400000f) / 65536f));
                SCM.Send_Data[4] = Convert.ToByte((int) ((((SCM.sdAngle / 360f) * 400000f) % 65536f) / 256f));
                SCM.Send_Data[5] = Convert.ToByte((int) ((((SCM.sdAngle / 360f) * 400000f) % 65536f) % 256f));
                if ((SCM.Send_Data[3] == 0xff) || (SCM.Send_Data[3] == 0xfe))
                {
                    SCM.Send_Data[3] = Convert.ToByte((int) (0xff - SCM.Send_Data[3]));
                    num3 = 1;
                }
                else
                {
                    num3 = 0;
                }
                if ((SCM.Send_Data[4] == 0xff) || (SCM.Send_Data[4] == 0xfe))
                {
                    SCM.Send_Data[4] = Convert.ToByte((int) (0xff - SCM.Send_Data[4]));
                    num4 = 1;
                }
                else
                {
                    num4 = 0;
                }
                if ((SCM.Send_Data[5] == 0xff) || (SCM.Send_Data[5] == 0xfe))
                {
                    SCM.Send_Data[5] = Convert.ToByte((int) (0xff - SCM.Send_Data[5]));
                    num5 = 1;
                }
                else
                {
                    num5 = 0;
                }
                num2 = (num3 & num4) & num5;
                SCM.Send_Data[2] = Convert.ToByte(num2);
                this.serialPortScm.Write(SCM.Send_Data, 0, SCM.Send_Data.Length);
                define.Sleep(50L);
                if (SCM.sdAngle > 180f)
                {
                    SCM.sdAngle -= 360f;
                }
            }
            else
            {
                this.serialPortRv.Write("#03\r");
            }
            if (this.serialPortScm.IsOpen && define.comScm)
            {
                this.listBoxSystem.Items[2] = " 系统状态: 设备已连接成功";
            }
            else
            {
                this.listBoxSystem.Items[2] = " 系统状态: 设备未连接成功";
            }
        }
        catch (Exception exception)
        {
            errLogFunction("Main--InitCom232 + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void InitDevice()
    {
        string text = "";
        long num = -1L;
        try
        {
            if (define.VNA)
            {
                if ((define.VNAConnect == "NI") || (define.Signal && (define.VNAConnect == "NI")))
                {
                    text = "NI";
                    SCM.device = new Device(0, (byte) define.VNANI, 0);
                    SCM.PNARunning = true;
                }
                if (define.VNA && ((define.VNAConnect == "TCPIP") || (define.VNAConnect == "USB")))
                {
                    if (define.VNAConnect == "TCPIP")
                    {
                        text = "TCPIP";
                        num = visa32.viOpenDefaultRM(out visa32.sesn);
                        num = visa32.viOpen(visa32.sesn, "TCPIP0::" + define.VNATcpIP + "::inst0::INSTR", 0, 0, out visa32.vi);
                    }
                    if (define.VNAConnect == "USB")
                    {
                        text = "USB";
                        num = visa32.viOpenDefaultRM(out visa32.sesn);
                        num = visa32.viOpen(visa32.sesn, "GPIB0::" + define.VNAUSB + "::INSTR", 0, 0, out visa32.vi);
                    }
                    if (num == 0L)
                    {
                        SCM.PNARunning = true;
                        this.listBoxSystem.Items[3] = " 仪表状态: 仪表连接成功";
                    }
                    else
                    {
                        SCM.PNARunning = false;
                        if (text == "")
                        {
                            text = "未选择仪表连接方式，请在系统设置中选择对应的连接方式";
                            errLogFunction("InitDevice + " + text);
                            MessageBox.Show(text, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                        }
                        else
                        {
                            errLogFunction("InitDevice + " + text);
                            MessageBox.Show("仪表连接方式为" + text + ",初始化失败，请检查", "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                        }
                        this.listBoxSystem.Items[3] = " 仪表状态: 仪表未连接成功";
                    }
                }
            }
            if (define.Signal)
            {
                if (define.SigConnect == "COM")
                {
                    text = "Single-COM";
                    this.serialPortSignal.PortName = "com" + define.SigCom.ToString();
                    this.serialPortSignal.BaudRate = 0x2580;
                    this.serialPortSignal.Parity = Parity.None;
                    this.serialPortSignal.DataBits = 8;
                    this.serialPortSignal.StopBits = StopBits.One;
                    this.serialPortSignal.ReceivedBytesThreshold = 13;
                    this.serialPortSignal.Open();
                }
                if (define.SigConnect == "TCPIP")
                {
                    text = "TCPIP";
                    num = visa32.viOpenDefaultRM(out visa32.sesn);
                    num = visa32.viOpen(visa32.sesn, "TCPIP0::" + define.VNATcpIP + "::INSTR", 0, 300, out visa32.vi);
                }
                if (num == 0L)
                {
                    SCM.PSGRunning = true;
                }
                else
                {
                    SCM.PSGRunning = false;
                    if (text == "")
                    {
                        text = "未选择信号源的连接方式，请在系统设置中选择对应的连接方式";
                        errLogFunction("InitDevice + " + text);
                        MessageBox.Show(text, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                    }
                    else
                    {
                        errLogFunction("InitDevice + " + text);
                        MessageBox.Show("信号源的连接方式为" + text + ",初始化失败，请检查", "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                    }
                }
            }
            if (define.B7130)
            {
                text = "7130";
                int num2 = W7130.W_7130_Initial(0, 0x300, 0, 0);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("Main--InitDevice + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void InitializeComponent()
    {
        this.components = new Container();
        ComponentResourceManager manager = new ComponentResourceManager(typeof(Main));
        this.label52 = new Label();
        this.label53 = new Label();
        this.label54 = new Label();
        this.label55 = new Label();
        this.label56 = new Label();
        this.label57 = new Label();
        this.label58 = new Label();
        this.serialPortScm = new SerialPort(this.components);
        this.timerRefAngel = new Timer(this.components);
        this.serialPortAz = new SerialPort(this.components);
        this.serialPortDn = new SerialPort(this.components);
        this.serialPortEl = new SerialPort(this.components);
        this.serialPortPt = new SerialPort(this.components);
        this.serialPortSd = new SerialPort(this.components);
        this.serialPortRv = new SerialPort(this.components);
        this.serialPortSwitch = new SerialPort(this.components);
        this.serialPortGF = new SerialPort(this.components);
        this.serialPortSignal = new SerialPort(this.components);
        this.timerAsk = new Timer(this.components);
        this.timerRefState = new Timer(this.components);
        this.saveFileDialog1 = new SaveFileDialog();
        this.timerAutoTestP2_Two = new Timer(this.components);
        this.BottomToolStripPanel = new ToolStripPanel();
        this.TopToolStripPanel = new ToolStripPanel();
        this.RightToolStripPanel = new ToolStripPanel();
        this.LeftToolStripPanel = new ToolStripPanel();
        this.ContentPanel = new ToolStripContentPanel();
        this.timerAutoTestP4_Four = new Timer(this.components);
        this.timerAutoTestP8_eight = new Timer(this.components);
        this.serialPt = new SerialPort(this.components);
        this.serialPtAngle = new SerialPort(this.components);
        this.timerAutoEl = new Timer(this.components);
        this.timerStopAsk = new Timer(this.components);
        this.timerAutoTestP4_1_Four = new Timer(this.components);
        this.timerAutoTestP4_2_Four = new Timer(this.components);
        this.timerQinJiao = new Timer(this.components);
        this.timerEl = new Timer(this.components);
        this.timerTest = new Timer(this.components);
        this.timerAZLimit = new Timer(this.components);
        this.timerShowGroup = new Timer(this.components);
        this.AZcontextMenuText = new ContextMenuStrip(this.components);
        this.toolStripTextBox1 = new ToolStripTextBox();
        this.ELcontextMenuText = new ContextMenuStrip(this.components);
        this.toolStripTextBox2 = new ToolStripTextBox();
        this.SDcontextMenuText = new ContextMenuStrip(this.components);
        this.toolStripTextBox3 = new ToolStripTextBox();
        this.DNcontextMenuText = new ContextMenuStrip(this.components);
        this.toolStripTextBox4 = new ToolStripTextBox();
        this.RVcontextMenuText = new ContextMenuStrip(this.components);
        this.toolStripTextBox5 = new ToolStripTextBox();
        this.PTcontextMenuText = new ContextMenuStrip(this.components);
        this.toolStripTextBox6 = new ToolStripTextBox();
        this.FscontextMenuText = new ContextMenuStrip(this.components);
        this.toolStripTextBox7 = new ToolStripTextBox();
        this.timer3D = new Timer(this.components);
        this.toolStripContainer1 = new ToolStripContainer();
        this.listBoxNVA = new ListBox();
        this.tabControl2 = new TabControl();
        this.tabPageSet = new TabPage();
        this.grouper2 = new Grouper();
        this.buttonSave = new Button();
        this.buttonOption = new Button();
        this.grouper4 = new Grouper();
        this.button2 = new Button();
        this.radioButton2 = new RadioButton();
        this.radioButton1 = new RadioButton();
        this.textBox9 = new TextBox();
        this.label67 = new Label();
        this.label62 = new Label();
        this.buttonStopAuto = new Button();
        this.button1 = new Button();
        this.textBox8 = new TextBox();
        this.textBox7 = new TextBox();
        this.buttonAuto = new Button();
        this.label49 = new Label();
        this.grouper16 = new Grouper();
        this.radButtonTestZhouSd = new RadioButton();
        this.buttonTestStop = new Button();
        this.radButtonTestZhouEl = new RadioButton();
        this.buttonTestCCW = new Button();
        this.radButtonTestZhouAz = new RadioButton();
        this.buttonTestCW = new Button();
        this.buttonTestStart = new Button();
        this.label50 = new Label();
        this.textBox5 = new TextBox();
        this.grouperParameter = new Grouper();
        this.comboBoxSet = new ComboBox();
        this.textBox6 = new TextBox();
        this.label2 = new Label();
        this.numericUpDown2 = new NumericUpDown();
        this.numericUpDown3 = new NumericUpDown();
        this.label4 = new Label();
        this.buttonSet = new Button();
        this.buttonFreq = new Button();
        this.buttonVNAinit = new Button();
        this.comboBoxVANPower = new ComboBox();
        this.numUpDownVNAPower = new NumericUpDown();
        this.label75 = new Label();
        this.numUpDownVNAAverage = new NumericUpDown();
        this.comboBoxVNAAverage = new ComboBox();
        this.label71 = new Label();
        this.grouper1 = new Grouper();
        this.comboBoxFreq = new ComboBox();
        this.buttonFreqSet = new Button();
        this.buttonFreqPF = new Button();
        this.textBoxRrveFreq = new TextBox();
        this.buttonHPDevice = new Button();
        this.tabPageNew = new TabPage();
        this.grouperNewOperat = new Grouper();
        this.buttonNext = new Button();
        this.buttonOn = new Button();
        this.grouper7Step = new Grouper();
        this.label126 = new Label();
        this.label127 = new Label();
        this.ButtonStopAutoTest = new Button();
        this.buttonOrigin = new Button();
        this.grouper6Step = new Grouper();
        this.label22 = new Label();
        this.label21 = new Label();
        this.buttonAutoTest = new Button();
        this.buttonStartTest = new Button();
        this.grouper5Step = new Grouper();
        this.label15 = new Label();
        this.buttonTestStart1 = new Button();
        this.grouper4Step = new Grouper();
        this.label10 = new Label();
        this.buttonMarkZero = new Button();
        this.grouper3Step = new Grouper();
        this.label9 = new Label();
        this.label77 = new Label();
        this.label78 = new Label();
        this.grouper2Step = new Grouper();
        this.label8 = new Label();
        this.buttonFreq1 = new Button();
        this.grouper1Step = new Grouper();
        this.label1 = new Label();
        this.buttonVNAinit1 = new Button();
        this.grouperOther = new Grouper();
        this.comboBoxLNAN = new ComboBox();
        this.label42 = new Label();
        this.comboBoxPNAN = new ComboBox();
        this.label41 = new Label();
        this.label16 = new Label();
        this.label5 = new Label();
        this.label25 = new Label();
        this.label37 = new Label();
        this.label19 = new Label();
        this.label28 = new Label();
        this.comboBoxSwitchN = new ComboBox();
        this.label7 = new Label();
        this.tabControl1 = new TabControl();
        this.tabPage1 = new TabPage();
        this.groupBoxSd = new Grouper();
        this.buttonSdXL = new Button();
        this.label23 = new Label();
        this.label24 = new Label();
        this.labelSdLimTop = new PictureBox();
        this.labelSdLimDn = new PictureBox();
        this.trackBarSd = new TrackBar();
        this.colorSliderSd = new ColorSlider();
        this.buttonSdCa = new Button();
        this.buttonSdCW = new Button();
        this.labelSdV = new Label();
        this.label36 = new Label();
        this.pictureBoxSd = new PictureBox();
        this.buttonSdStop = new Button();
        this.buttonSdDW = new Button();
        this.buttonSdYD = new Button();
        this.textBoxSdAngle = new TextBox();
        this.textBoxSdYD = new TextBox();
        this.buttonSdCCW = new Button();
        this.textBoxSdDW = new TextBox();
        this.label29 = new Label();
        this.label35 = new Label();
        this.groupBoxAz = new Grouper();
        this.buttonAzXL = new Button();
        this.trackBarAz = new TrackBar();
        this.colorSliderAz = new ColorSlider();
        this.labelAzV = new Label();
        this.buttonAzCa = new Button();
        this.label12 = new Label();
        this.buttonAzDW = new Button();
        this.textBoxAzAngle = new TextBox();
        this.textBoxAzDW = new TextBox();
        this.buttonAzCCW = new Button();
        this.buttonAzYD = new Button();
        this.label13 = new Label();
        this.label14 = new Label();
        this.buttonAzStop = new Button();
        this.buttonAzCW = new Button();
        this.pictureBoxAz = new PictureBox();
        this.textBoxAzYD = new TextBox();
        this.groupBoxEl = new Grouper();
        this.buttonElXL = new Button();
        this.labelElUpLim = new Label();
        this.labelElDnLim = new Label();
        this.labelElLimTop = new PictureBox();
        this.labelElLimDn = new PictureBox();
        this.trackBarEl = new TrackBar();
        this.colorSliderEl = new ColorSlider();
        this.buttonElCa = new Button();
        this.labelElV = new Label();
        this.label18 = new Label();
        this.buttonElDW = new Button();
        this.textBoxElAngle = new TextBox();
        this.textBoxElDW = new TextBox();
        this.label17 = new Label();
        this.label11 = new Label();
        this.buttonElCCW = new Button();
        this.textBoxElYD = new TextBox();
        this.buttonElYD = new Button();
        this.buttonElStop = new Button();
        this.buttonElCW = new Button();
        this.pictureBoxEl = new PictureBox();
        this.tabPage2 = new TabPage();
        this.groupBoxPt = new Grouper();
        this.progressBarEx2 = new ProgressBarEx();
        this.label34 = new Label();
        this.label39 = new Label();
        this.labelPtLimTop = new PictureBox();
        this.labelPtLimDn = new PictureBox();
        this.trackBarPt = new TrackBar();
        this.colorSliderPt = new ColorSlider();
        this.buttonPtStop = new Button();
        this.buttonPtCa = new Button();
        this.buttonPtCW = new Button();
        this.label64 = new Label();
        this.labelPtV = new Label();
        this.buttonPtYD = new Button();
        this.textBoxPtYD = new TextBox();
        this.buttonPtDW = new Button();
        this.buttonPtCCW = new Button();
        this.textBoxPtAngle = new TextBox();
        this.label38 = new Label();
        this.label63 = new Label();
        this.textBoxPtDW = new TextBox();
        this.groupBoxRv = new Grouper();
        this.buttonRvXL = new Button();
        this.label32 = new Label();
        this.label33 = new Label();
        this.labelRvLimTop = new PictureBox();
        this.labelRvLimDn = new PictureBox();
        this.trackBarRv = new TrackBar();
        this.colorSliderRv = new ColorSlider();
        this.buttonRvYD = new Button();
        this.textBoxRvAngle = new TextBox();
        this.buttonRvCa = new Button();
        this.textBoxRvYD = new TextBox();
        this.labelRvV = new Label();
        this.textBoxRvDW = new TextBox();
        this.label73 = new Label();
        this.buttonRvStop = new Button();
        this.pictureBoxRv = new PictureBox();
        this.buttonRvCCW = new Button();
        this.buttonRvDW = new Button();
        this.label72 = new Label();
        this.buttonRvCW = new Button();
        this.label66 = new Label();
        this.groupBoxDn = new Grouper();
        this.progressBarEx1 = new ProgressBarEx();
        this.label30 = new Label();
        this.label31 = new Label();
        this.labelDnLimTop = new PictureBox();
        this.labelDnLimDn = new PictureBox();
        this.trackBarDn = new TrackBar();
        this.colorSliderDn = new ColorSlider();
        this.textBoxDnDW = new TextBox();
        this.buttonDnYD = new Button();
        this.textBoxDnYD = new TextBox();
        this.textBoxDnAngle = new TextBox();
        this.buttonDnCW = new Button();
        this.buttonDnStop = new Button();
        this.buttonDnCa = new Button();
        this.buttonDnCCW = new Button();
        this.labelDnV = new Label();
        this.label20 = new Label();
        this.label27 = new Label();
        this.label26 = new Label();
        this.buttonDnDW = new Button();
        this.tabPage3 = new TabPage();
        this.grouper3 = new Grouper();
        this.colorSlider1 = new ColorSlider();
        this.label40 = new Label();
        this.label45 = new Label();
        this.labelFsLimTop = new PictureBox();
        this.labelFsLimUP = new PictureBox();
        this.trackBarFS = new TrackBar();
        this.colorSliderFS = new ColorSlider();
        this.buttonFsStop = new Button();
        this.buttonFsCa = new Button();
        this.buttonFsCw = new Button();
        this.label48 = new Label();
        this.labelFsV = new Label();
        this.buttonFsYD = new Button();
        this.textBoxFsYD = new TextBox();
        this.buttonFsDW = new Button();
        this.buttonFsCcw = new Button();
        this.textBoxFsAngle = new TextBox();
        this.label59 = new Label();
        this.label60 = new Label();
        this.textBoxFsDW = new TextBox();
        this.groupBoxSearchMax = new GroupBox();
        this.textBox1 = new TextBox();
        this.label44 = new Label();
        this.comboBoxFreq1 = new ComboBox();
        this.label43 = new Label();
        this.buttonSearchStop = new Button();
        this.buttonSearch = new Button();
        this.textBoxEL = new TextBox();
        this.groupBoxElAuto = new GroupBox();
        this.buttonElUP = new Button();
        this.buttonElAutoStop = new Button();
        this.buttonElDN = new Button();
        this.groupBoxTimer = new GroupBox();
        this.buttonSwep = new Button();
        this.button12 = new Button();
        this.button13 = new Button();
        this.button15 = new Button();
        this.button14 = new Button();
        this.comboBox3 = new ComboBox();
        this.label65 = new Label();
        this.textBox4 = new TextBox();
        this.textBox2 = new TextBox();
        this.textBox3 = new TextBox();
        this.label46 = new Label();
        this.label47 = new Label();
        this.button8 = new Button();
        this.button9 = new Button();
        this.button10 = new Button();
        this.button11 = new Button();
        this.groupBoxLeft = new GroupBox();
        this.grouper6 = new Grouper();
        this.label51 = new Label();
        this.label3 = new Label();
        this.label6 = new Label();
        this.pictureBoxSLD = new PictureBox();
        this.grouper5 = new Grouper();
        this.listBoxSystem = new ListBox();
        this.grouperTurntable = new Grouper();
        this.listBoxAutoTest = new ListBox();
        this.grouper15 = new Grouper();
        this.buttonXLStop = new VistaButton();
        this.buttonXLStart = new VistaButton();
        this.pictureBox2 = new PictureBox();
        this.groupBoxSpeed = new GroupBox();
        this.label61 = new Label();
        this.lable45 = new Label();
        this.labelSpeedCpuT = new TextBox();
        this.textBoxzhi = new TextBox();
        this.buttonSpeedStop = new Button();
        this.buttonSpeedStar = new Button();
        this.labelSpeedV = new Label();
        this.radioButtonSpeedDn = new RadioButton();
        this.radioButtonSpeedRv = new RadioButton();
        this.radioButtonSpeedEl = new RadioButton();
        this.radioButtonSpeedSn = new RadioButton();
        this.radioButtonSpeedAz = new RadioButton();
        this.pictureBoxPt = new PictureBox();
        this.pictureBoxFS = new PictureBox();
        this.pictureBox1 = new PictureBox();
        this.pictureBoxDn = new PictureBox();
        this.toolStrip1 = new ToolStrip();
        this.toolStripButton1 = new ToolStripButton();
        this.toolStripButton2 = new ToolStripButton();
        this.toolStripButton3 = new ToolStripButton();
        this.toolStripButton9 = new ToolStripButton();
        this.toolStripButton10 = new ToolStripButton();
        this.toolStripButton4 = new ToolStripButton();
        this.toolStripButton5 = new ToolStripButton();
        this.toolStripButton7 = new ToolStripButton();
        this.toolStripButton8 = new ToolStripButton();
        this.ExitTestSystem = new ToolStripButton();
        this.toolStripButton6 = new ToolStripButton();
        Timer timer = new Timer(this.components);
        this.AZcontextMenuText.SuspendLayout();
        this.ELcontextMenuText.SuspendLayout();
        this.SDcontextMenuText.SuspendLayout();
        this.DNcontextMenuText.SuspendLayout();
        this.RVcontextMenuText.SuspendLayout();
        this.PTcontextMenuText.SuspendLayout();
        this.FscontextMenuText.SuspendLayout();
        this.toolStripContainer1.ContentPanel.SuspendLayout();
        this.toolStripContainer1.TopToolStripPanel.SuspendLayout();
        this.toolStripContainer1.SuspendLayout();
        this.tabControl2.SuspendLayout();
        this.tabPageSet.SuspendLayout();
        this.grouper2.SuspendLayout();
        this.grouper4.SuspendLayout();
        this.grouper16.SuspendLayout();
        this.grouperParameter.SuspendLayout();
        this.numericUpDown2.BeginInit();
        this.numericUpDown3.BeginInit();
        this.numUpDownVNAPower.BeginInit();
        this.numUpDownVNAAverage.BeginInit();
        this.grouper1.SuspendLayout();
        this.tabPageNew.SuspendLayout();
        this.grouperNewOperat.SuspendLayout();
        this.grouper7Step.SuspendLayout();
        this.grouper6Step.SuspendLayout();
        this.grouper5Step.SuspendLayout();
        this.grouper4Step.SuspendLayout();
        this.grouper3Step.SuspendLayout();
        this.grouper2Step.SuspendLayout();
        this.grouper1Step.SuspendLayout();
        this.grouperOther.SuspendLayout();
        this.tabControl1.SuspendLayout();
        this.tabPage1.SuspendLayout();
        this.groupBoxSd.SuspendLayout();
        ((ISupportInitialize) this.labelSdLimTop).BeginInit();
        ((ISupportInitialize) this.labelSdLimDn).BeginInit();
        this.trackBarSd.BeginInit();
        ((ISupportInitialize) this.pictureBoxSd).BeginInit();
        this.groupBoxAz.SuspendLayout();
        this.trackBarAz.BeginInit();
        ((ISupportInitialize) this.pictureBoxAz).BeginInit();
        this.groupBoxEl.SuspendLayout();
        ((ISupportInitialize) this.labelElLimTop).BeginInit();
        ((ISupportInitialize) this.labelElLimDn).BeginInit();
        this.trackBarEl.BeginInit();
        ((ISupportInitialize) this.pictureBoxEl).BeginInit();
        this.tabPage2.SuspendLayout();
        this.groupBoxPt.SuspendLayout();
        ((ISupportInitialize) this.labelPtLimTop).BeginInit();
        ((ISupportInitialize) this.labelPtLimDn).BeginInit();
        this.trackBarPt.BeginInit();
        this.groupBoxRv.SuspendLayout();
        ((ISupportInitialize) this.labelRvLimTop).BeginInit();
        ((ISupportInitialize) this.labelRvLimDn).BeginInit();
        this.trackBarRv.BeginInit();
        ((ISupportInitialize) this.pictureBoxRv).BeginInit();
        this.groupBoxDn.SuspendLayout();
        ((ISupportInitialize) this.labelDnLimTop).BeginInit();
        ((ISupportInitialize) this.labelDnLimDn).BeginInit();
        this.trackBarDn.BeginInit();
        this.tabPage3.SuspendLayout();
        this.grouper3.SuspendLayout();
        ((ISupportInitialize) this.labelFsLimTop).BeginInit();
        ((ISupportInitialize) this.labelFsLimUP).BeginInit();
        this.trackBarFS.BeginInit();
        this.groupBoxSearchMax.SuspendLayout();
        this.groupBoxElAuto.SuspendLayout();
        this.groupBoxTimer.SuspendLayout();
        this.groupBoxLeft.SuspendLayout();
        this.grouper6.SuspendLayout();
        ((ISupportInitialize) this.pictureBoxSLD).BeginInit();
        this.grouper5.SuspendLayout();
        this.grouperTurntable.SuspendLayout();
        this.grouper15.SuspendLayout();
        ((ISupportInitialize) this.pictureBox2).BeginInit();
        this.groupBoxSpeed.SuspendLayout();
        ((ISupportInitialize) this.pictureBoxPt).BeginInit();
        ((ISupportInitialize) this.pictureBoxFS).BeginInit();
        ((ISupportInitialize) this.pictureBox1).BeginInit();
        ((ISupportInitialize) this.pictureBoxDn).BeginInit();
        this.toolStrip1.SuspendLayout();
        base.SuspendLayout();
        timer.Interval = 20;
        timer.Tick += new EventHandler(this.timerMPC08_Tick);
        this.label52.AutoSize = true;
        this.label52.Font = new Font("宋体", 10f);
        this.label52.Location = new Point(2, 0x4e);
        this.label52.Name = "label52";
        this.label52.Size = new Size(0x1c, 14);
        this.label52.TabIndex = 0x2f;
        this.label52.Text = "-90";
        this.label53.AutoSize = true;
        this.label53.Font = new Font("宋体", 10f);
        this.label53.Location = new Point(0x38, 0x88);
        this.label53.Name = "label53";
        this.label53.Size = new Size(0x2a, 14);
        this.label53.TabIndex = 0x2e;
        this.label53.Text = "\x00b1180";
        this.label54.AutoSize = true;
        this.label54.Font = new Font("宋体", 10f);
        this.label54.Location = new Point(0x7f, 0x4f);
        this.label54.Name = "label54";
        this.label54.Size = new Size(0x15, 14);
        this.label54.TabIndex = 0x2d;
        this.label54.Text = "90";
        this.label55.AutoSize = true;
        this.label55.Font = new Font("宋体", 10f);
        this.label55.Location = new Point(70, 0x16);
        this.label55.Name = "label55";
        this.label55.Size = new Size(14, 14);
        this.label55.TabIndex = 0x2c;
        this.label55.Text = "0";
        this.label56.AutoSize = true;
        this.label56.Font = new Font("宋体", 10f);
        this.label56.Location = new Point(0x1c, 0x9d);
        this.label56.Name = "label56";
        this.label56.Size = new Size(0x31, 14);
        this.label56.TabIndex = 0x2b;
        this.label56.Text = "速度：";
        this.label57.AutoSize = true;
        this.label57.Font = new Font("宋体", 10f);
        this.label57.Location = new Point(0x91, 0x37);
        this.label57.Name = "label57";
        this.label57.Size = new Size(0x3f, 14);
        this.label57.TabIndex = 0x15;
        this.label57.Text = "引导角度";
        this.label58.AutoSize = true;
        this.label58.Font = new Font("宋体", 10f);
        this.label58.Location = new Point(0x90, 0x17);
        this.label58.Name = "label58";
        this.label58.Size = new Size(0x3f, 14);
        this.label58.TabIndex = 0x13;
        this.label58.Text = "当前角度";
        this.serialPortScm.DataReceived += new SerialDataReceivedEventHandler(this.serialPortScm_DataReceived);
        this.serialPortScm.ErrorReceived += new SerialErrorReceivedEventHandler(this.serialPortScm_ErrorReceived);
        this.timerRefAngel.Enabled = true;
        this.timerRefAngel.Interval = 20;
        this.timerRefAngel.Tick += new EventHandler(this.timerRefAngel_Tick);
        this.serialPortAz.DataReceived += new SerialDataReceivedEventHandler(this.serialPortAz_DataReceived);
        this.serialPortDn.DataReceived += new SerialDataReceivedEventHandler(this.serialPortDn_DataReceived);
        this.serialPortEl.DataReceived += new SerialDataReceivedEventHandler(this.serialPortEl_DataReceived);
        this.serialPortPt.DataReceived += new SerialDataReceivedEventHandler(this.serialPortPt_DataReceived);
        this.serialPortSd.DataReceived += new SerialDataReceivedEventHandler(this.serialPortSd_DataReceived);
        this.serialPortRv.DataReceived += new SerialDataReceivedEventHandler(this.serialPortRv_DataReceived);
        this.serialPortSwitch.DataReceived += new SerialDataReceivedEventHandler(this.serialPortSwitch_DataReceived);
        this.serialPortGF.DataReceived += new SerialDataReceivedEventHandler(this.serialPortGF_DataReceived);
        this.timerAsk.Interval = 0x2d;
        this.timerAsk.Tick += new EventHandler(this.timerAsk_Tick);
        this.timerRefState.Enabled = true;
        this.timerRefState.Tick += new EventHandler(this.timerRefState_Tick);
        this.timerAutoTestP2_Two.Interval = 0x3e8;
        this.timerAutoTestP2_Two.Tick += new EventHandler(this.timerAutoTestP2_Two_Tick);
        this.BottomToolStripPanel.Location = new Point(0, 0);
        this.BottomToolStripPanel.Name = "BottomToolStripPanel";
        this.BottomToolStripPanel.Orientation = Orientation.Horizontal;
        this.BottomToolStripPanel.RowMargin = new Padding(3, 0, 0, 0);
        this.BottomToolStripPanel.Size = new Size(0, 0);
        this.TopToolStripPanel.Location = new Point(0, 0);
        this.TopToolStripPanel.Name = "TopToolStripPanel";
        this.TopToolStripPanel.Orientation = Orientation.Horizontal;
        this.TopToolStripPanel.RowMargin = new Padding(3, 0, 0, 0);
        this.TopToolStripPanel.Size = new Size(0, 0);
        this.RightToolStripPanel.Location = new Point(0, 0);
        this.RightToolStripPanel.Name = "RightToolStripPanel";
        this.RightToolStripPanel.Orientation = Orientation.Horizontal;
        this.RightToolStripPanel.RowMargin = new Padding(3, 0, 0, 0);
        this.RightToolStripPanel.Size = new Size(0, 0);
        this.LeftToolStripPanel.Location = new Point(0, 0);
        this.LeftToolStripPanel.Name = "LeftToolStripPanel";
        this.LeftToolStripPanel.Orientation = Orientation.Horizontal;
        this.LeftToolStripPanel.RowMargin = new Padding(3, 0, 0, 0);
        this.LeftToolStripPanel.Size = new Size(0, 0);
        this.ContentPanel.AutoScroll = true;
        this.ContentPanel.Size = new Size(0x52f, 720);
        this.timerAutoTestP4_Four.Interval = 0x3e8;
        this.timerAutoTestP4_Four.Tick += new EventHandler(this.timerAutoTestP4_Four_Tick);
        this.timerAutoTestP8_eight.Interval = 0x3e8;
        this.timerAutoTestP8_eight.Tick += new EventHandler(this.timerAutoTestP8_eight_Tick);
        this.serialPtAngle.DataReceived += new SerialDataReceivedEventHandler(this.serialPtAngle_DataReceived);
        this.timerAutoEl.Interval = 0x3e8;
        this.timerAutoEl.Tick += new EventHandler(this.timerAutoEl_Tick);
        this.timerStopAsk.Interval = 0x3e8;
        this.timerStopAsk.Tick += new EventHandler(this.timerStopAsk_Tick);
        this.timerAutoTestP4_1_Four.Interval = 0x3e8;
        this.timerAutoTestP4_1_Four.Tick += new EventHandler(this.timerAutoTestP4_1_Four_Tick);
        this.timerAutoTestP4_2_Four.Interval = 0x3e8;
        this.timerAutoTestP4_2_Four.Tick += new EventHandler(this.timerAutoTestP4_2_Four_Tick);
        this.timerQinJiao.Interval = 0x3e8;
        this.timerQinJiao.Tick += new EventHandler(this.timerQinJiao_Tick);
        this.timerEl.Interval = 0x3e8;
        this.timerEl.Tick += new EventHandler(this.timerEl_Tick);
        this.timerTest.Interval = 10;
        this.timerTest.Tick += new EventHandler(this.timerTest_Tick);
        this.timerAZLimit.Interval = 20;
        this.timerAZLimit.Tick += new EventHandler(this.timerAZLimit_Tick);
        this.timerShowGroup.Interval = 500;
        this.timerShowGroup.Tick += new EventHandler(this.timer5_Tick);
        this.AZcontextMenuText.Items.AddRange(new ToolStripItem[] { this.toolStripTextBox1 });
        this.AZcontextMenuText.Name = "contextMenuText";
        this.AZcontextMenuText.Size = new Size(0xa1, 0x1d);
        this.toolStripTextBox1.Font = new Font("宋体", 10f);
        this.toolStripTextBox1.Name = "toolStripTextBox1";
        this.toolStripTextBox1.Size = new Size(100, 0x17);
        this.toolStripTextBox1.Text = "0";
        this.toolStripTextBox1.TextBoxTextAlign = HorizontalAlignment.Center;
        this.ELcontextMenuText.Items.AddRange(new ToolStripItem[] { this.toolStripTextBox2 });
        this.ELcontextMenuText.Name = "contextMenuText";
        this.ELcontextMenuText.Size = new Size(0xa1, 0x1d);
        this.toolStripTextBox2.Font = new Font("宋体", 10f);
        this.toolStripTextBox2.Name = "toolStripTextBox2";
        this.toolStripTextBox2.Size = new Size(100, 0x17);
        this.toolStripTextBox2.Text = "0";
        this.toolStripTextBox2.TextBoxTextAlign = HorizontalAlignment.Center;
        this.SDcontextMenuText.Items.AddRange(new ToolStripItem[] { this.toolStripTextBox3 });
        this.SDcontextMenuText.Name = "contextMenuText";
        this.SDcontextMenuText.Size = new Size(0xa1, 0x1d);
        this.toolStripTextBox3.Font = new Font("宋体", 10f);
        this.toolStripTextBox3.Name = "toolStripTextBox3";
        this.toolStripTextBox3.Size = new Size(100, 0x17);
        this.toolStripTextBox3.Text = "0";
        this.toolStripTextBox3.TextBoxTextAlign = HorizontalAlignment.Center;
        this.DNcontextMenuText.Items.AddRange(new ToolStripItem[] { this.toolStripTextBox4 });
        this.DNcontextMenuText.Name = "contextMenuText";
        this.DNcontextMenuText.Size = new Size(0xa1, 0x1d);
        this.toolStripTextBox4.Font = new Font("宋体", 10f);
        this.toolStripTextBox4.Name = "toolStripTextBox4";
        this.toolStripTextBox4.Size = new Size(100, 0x17);
        this.toolStripTextBox4.Text = "0";
        this.toolStripTextBox4.TextBoxTextAlign = HorizontalAlignment.Center;
        this.RVcontextMenuText.Items.AddRange(new ToolStripItem[] { this.toolStripTextBox5 });
        this.RVcontextMenuText.Name = "contextMenuText";
        this.RVcontextMenuText.Size = new Size(0xa1, 0x1d);
        this.toolStripTextBox5.Font = new Font("宋体", 10f);
        this.toolStripTextBox5.Name = "toolStripTextBox5";
        this.toolStripTextBox5.Size = new Size(100, 0x17);
        this.toolStripTextBox5.Text = "0";
        this.toolStripTextBox5.TextBoxTextAlign = HorizontalAlignment.Center;
        this.PTcontextMenuText.Items.AddRange(new ToolStripItem[] { this.toolStripTextBox6 });
        this.PTcontextMenuText.Name = "contextMenuText";
        this.PTcontextMenuText.Size = new Size(0xa1, 0x1d);
        this.toolStripTextBox6.Font = new Font("宋体", 10f);
        this.toolStripTextBox6.Name = "toolStripTextBox6";
        this.toolStripTextBox6.Size = new Size(100, 0x17);
        this.toolStripTextBox6.Text = "0";
        this.toolStripTextBox6.TextBoxTextAlign = HorizontalAlignment.Center;
        this.FscontextMenuText.Items.AddRange(new ToolStripItem[] { this.toolStripTextBox7 });
        this.FscontextMenuText.Name = "contextMenuText";
        this.FscontextMenuText.Size = new Size(0xa1, 0x1d);
        this.toolStripTextBox7.Font = new Font("宋体", 10f);
        this.toolStripTextBox7.Name = "toolStripTextBox7";
        this.toolStripTextBox7.Size = new Size(100, 0x17);
        this.toolStripTextBox7.Text = "0";
        this.toolStripTextBox7.TextBoxTextAlign = HorizontalAlignment.Center;
        this.timer3D.Interval = 0xbb8;
        this.timer3D.Tick += new EventHandler(this.timer3D_Tick);
        this.toolStripContainer1.ContentPanel.BackColor = Color.Transparent;
        this.toolStripContainer1.ContentPanel.Controls.Add(this.listBoxNVA);
        this.toolStripContainer1.ContentPanel.Controls.Add(this.tabControl2);
        this.toolStripContainer1.ContentPanel.Controls.Add(this.grouperOther);
        this.toolStripContainer1.ContentPanel.Controls.Add(this.label7);
        this.toolStripContainer1.ContentPanel.Controls.Add(this.tabControl1);
        this.toolStripContainer1.ContentPanel.Controls.Add(this.groupBoxLeft);
        this.toolStripContainer1.ContentPanel.Controls.Add(this.pictureBox2);
        this.toolStripContainer1.ContentPanel.Controls.Add(this.groupBoxSpeed);
        this.toolStripContainer1.ContentPanel.Controls.Add(this.pictureBoxPt);
        this.toolStripContainer1.ContentPanel.Controls.Add(this.pictureBoxFS);
        this.toolStripContainer1.ContentPanel.Controls.Add(this.pictureBox1);
        this.toolStripContainer1.ContentPanel.Controls.Add(this.pictureBoxDn);
        this.toolStripContainer1.ContentPanel.Size = new Size(0x5a4, 0x349);
        this.toolStripContainer1.Dock = DockStyle.Fill;
        this.toolStripContainer1.Location = new Point(0, 0);
        this.toolStripContainer1.Name = "toolStripContainer1";
        this.toolStripContainer1.Size = new Size(0x5a4, 0x362);
        this.toolStripContainer1.TabIndex = 0x40;
        this.toolStripContainer1.Text = "toolStripContainer1";
        this.toolStripContainer1.TopToolStripPanel.Controls.Add(this.toolStrip1);
        this.listBoxNVA.BackColor = Color.White;
        this.listBoxNVA.BorderStyle = BorderStyle.None;
        this.listBoxNVA.Font = new Font("宋体", 11.25f, FontStyle.Bold, GraphicsUnit.Point, 0x86);
        this.listBoxNVA.ForeColor = Color.SteelBlue;
        this.listBoxNVA.FormattingEnabled = true;
        this.listBoxNVA.ItemHeight = 15;
        this.listBoxNVA.Items.AddRange(new object[] { "           转台状态", "", "", "", "", "", "", "", "", "" });
        this.listBoxNVA.Location = new Point(570, 0xc3);
        this.listBoxNVA.Name = "listBoxNVA";
        this.listBoxNVA.SelectionMode = SelectionMode.None;
        this.listBoxNVA.Size = new Size(0xba, 120);
        this.listBoxNVA.TabIndex = 70;
        this.listBoxNVA.Visible = false;
        this.tabControl2.Alignment = TabAlignment.Bottom;
        this.tabControl2.Controls.Add(this.tabPageSet);
        this.tabControl2.Controls.Add(this.tabPageNew);
        this.tabControl2.Font = new Font("宋体", 11f);
        this.tabControl2.Location = new Point(0x493, -14);
        this.tabControl2.Multiline = true;
        this.tabControl2.Name = "tabControl2";
        this.tabControl2.Padding = new Point(0x21, 3);
        this.tabControl2.SelectedIndex = 0;
        this.tabControl2.Size = new Size(260, 0x336);
        this.tabControl2.TabIndex = 0x5d;
        this.tabPageSet.Controls.Add(this.grouper2);
        this.tabPageSet.Controls.Add(this.grouper4);
        this.tabPageSet.Controls.Add(this.grouper16);
        this.tabPageSet.Controls.Add(this.grouperParameter);
        this.tabPageSet.Controls.Add(this.grouper1);
        this.tabPageSet.Location = new Point(4, 4);
        this.tabPageSet.Name = "tabPageSet";
        this.tabPageSet.Padding = new Padding(3);
        this.tabPageSet.Size = new Size(0xfc, 0x31a);
        this.tabPageSet.TabIndex = 1;
        this.tabPageSet.Text = "开始测试";
        this.tabPageSet.UseVisualStyleBackColor = true;
        this.grouper2.BackgroundColor = Color.White;
        this.grouper2.BackgroundGradientColor = Color.White;
        this.grouper2.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.grouper2.BorderColor = Color.Black;
        this.grouper2.BorderThickness = 1f;
        this.grouper2.Controls.Add(this.buttonSave);
        this.grouper2.Controls.Add(this.buttonOption);
        this.grouper2.CustomGroupBoxColor = Color.White;
        this.grouper2.GroupImage = null;
        this.grouper2.GroupTitle = "";
        this.grouper2.Location = new Point(7, 710);
        this.grouper2.Name = "grouper2";
        this.grouper2.Padding = new Padding(20);
        this.grouper2.PaintGroupBox = false;
        this.grouper2.RoundCorners = 10;
        this.grouper2.ShadowColor = Color.DarkGray;
        this.grouper2.ShadowControl = true;
        this.grouper2.ShadowThickness = 3;
        this.grouper2.Size = new Size(0xee, 0x3a);
        this.grouper2.TabIndex = 0x4b;
        this.grouper2.Visible = false;
        this.buttonSave.BackColor = Color.Orange;
        this.buttonSave.Font = new Font("宋体", 10f);
        this.buttonSave.Location = new Point(0x20, 0x3a);
        this.buttonSave.Name = "buttonSave";
        this.buttonSave.Size = new Size(0xb2, 0x21);
        this.buttonSave.TabIndex = 50;
        this.buttonSave.Text = "保存数据";
        this.buttonSave.UseVisualStyleBackColor = false;
        this.buttonSave.Click += new EventHandler(this.buttonSave_Click);
        this.buttonOption.BackColor = Color.DarkSeaGreen;
        this.buttonOption.Font = new Font("宋体", 10f);
        this.buttonOption.Location = new Point(0x20, 0x11);
        this.buttonOption.Name = "buttonOption";
        this.buttonOption.Size = new Size(0xb2, 0x22);
        this.buttonOption.TabIndex = 0x31;
        this.buttonOption.Text = "暗室内部采集数据";
        this.buttonOption.UseVisualStyleBackColor = false;
        this.buttonOption.Click += new EventHandler(this.buttonOption_Click);
        this.grouper4.BackgroundColor = Color.White;
        this.grouper4.BackgroundGradientColor = Color.White;
        this.grouper4.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.grouper4.BorderColor = Color.Black;
        this.grouper4.BorderThickness = 1f;
        this.grouper4.Controls.Add(this.button2);
        this.grouper4.Controls.Add(this.radioButton2);
        this.grouper4.Controls.Add(this.radioButton1);
        this.grouper4.Controls.Add(this.textBox9);
        this.grouper4.Controls.Add(this.label67);
        this.grouper4.Controls.Add(this.label62);
        this.grouper4.Controls.Add(this.buttonStopAuto);
        this.grouper4.Controls.Add(this.button1);
        this.grouper4.Controls.Add(this.textBox8);
        this.grouper4.Controls.Add(this.textBox7);
        this.grouper4.Controls.Add(this.buttonAuto);
        this.grouper4.Controls.Add(this.label49);
        this.grouper4.CustomGroupBoxColor = Color.White;
        this.grouper4.GroupImage = null;
        this.grouper4.GroupTitle = "3D数据测试";
        this.grouper4.Location = new Point(7, 0x1ce);
        this.grouper4.Name = "grouper4";
        this.grouper4.Padding = new Padding(20);
        this.grouper4.PaintGroupBox = false;
        this.grouper4.RoundCorners = 10;
        this.grouper4.ShadowColor = Color.DarkGray;
        this.grouper4.ShadowControl = false;
        this.grouper4.ShadowThickness = 3;
        this.grouper4.Size = new Size(0xee, 0xf2);
        this.grouper4.TabIndex = 0x4c;
        this.grouper4.Visible = false;
        this.button2.BackColor = Color.Orchid;
        this.button2.Font = new Font("宋体", 10f);
        this.button2.Location = new Point(12, 0xa6);
        this.button2.Name = "button2";
        this.button2.Size = new Size(0x60, 0x21);
        this.button2.TabIndex = 0x3b;
        this.button2.Text = "至测试起点";
        this.button2.UseVisualStyleBackColor = false;
        this.button2.Click += new EventHandler(this.button2_Click);
        this.radioButton2.AutoSize = true;
        this.radioButton2.Location = new Point(0x7e, 0x1d);
        this.radioButton2.Name = "radioButton2";
        this.radioButton2.Size = new Size(0x5f, 0x13);
        this.radioButton2.TabIndex = 0x3a;
        this.radioButton2.Text = "RCS3D测试";
        this.radioButton2.UseVisualStyleBackColor = true;
        this.radioButton1.AutoSize = true;
        this.radioButton1.Checked = true;
        this.radioButton1.Location = new Point(0x16, 0x1d);
        this.radioButton1.Name = "radioButton1";
        this.radioButton1.Size = new Size(0x65, 0x13);
        this.radioButton1.TabIndex = 0x39;
        this.radioButton1.TabStop = true;
        this.radioButton1.Text = "常规3D测试";
        this.radioButton1.UseVisualStyleBackColor = true;
        this.textBox9.Location = new Point(0x8e, 0x4d);
        this.textBox9.Name = "textBox9";
        this.textBox9.Size = new Size(0x39, 0x18);
        this.textBox9.TabIndex = 0x38;
        this.textBox9.Text = "5";
        this.textBox9.TextAlign = HorizontalAlignment.Center;
        this.label67.AutoSize = true;
        this.label67.Font = new Font("宋体", 10f);
        this.label67.ForeColor = Color.Black;
        this.label67.Location = new Point(20, 0x55);
        this.label67.Name = "label67";
        this.label67.Size = new Size(0x7e, 14);
        this.label67.TabIndex = 0x37;
        this.label67.Text = "接收极化角度分割:";
        this.label62.AutoSize = true;
        this.label62.Font = new Font("宋体", 10f);
        this.label62.ForeColor = Color.Black;
        this.label62.Location = new Point(0x13, 110);
        this.label62.Name = "label62";
        this.label62.Size = new Size(0x62, 14);
        this.label62.TabIndex = 0x36;
        this.label62.Text = "文件存放路径:";
        this.buttonStopAuto.BackColor = Color.LightPink;
        this.buttonStopAuto.Font = new Font("宋体", 10f);
        this.buttonStopAuto.Location = new Point(12, 0xcc);
        this.buttonStopAuto.Name = "buttonStopAuto";
        this.buttonStopAuto.Size = new Size(0xd8, 0x21);
        this.buttonStopAuto.TabIndex = 0x33;
        this.buttonStopAuto.Text = "停止3D测试";
        this.buttonStopAuto.UseVisualStyleBackColor = false;
        this.buttonStopAuto.Click += new EventHandler(this.buttonStopAuto_Click);
        this.button1.Font = new Font("宋体", 10f);
        this.button1.Location = new Point(0x99, 0x81);
        this.button1.Name = "button1";
        this.button1.Size = new Size(0x3e, 0x17);
        this.button1.TabIndex = 0x35;
        this.button1.Text = "浏览...";
        this.button1.UseVisualStyleBackColor = true;
        this.button1.Click += new EventHandler(this.button1_Click);
        this.textBox8.Location = new Point(0x11, 0x81);
        this.textBox8.Multiline = true;
        this.textBox8.Name = "textBox8";
        this.textBox8.Size = new Size(0x7b, 0x20);
        this.textBox8.TabIndex = 0x34;
        this.textBox7.Location = new Point(0x8e, 0x34);
        this.textBox7.Name = "textBox7";
        this.textBox7.Size = new Size(0x39, 0x18);
        this.textBox7.TabIndex = 0x33;
        this.textBox7.Text = "3";
        this.textBox7.TextAlign = HorizontalAlignment.Center;
        this.buttonAuto.BackColor = Color.Orchid;
        this.buttonAuto.Font = new Font("宋体", 10f);
        this.buttonAuto.Location = new Point(0x72, 0xa7);
        this.buttonAuto.Name = "buttonAuto";
        this.buttonAuto.Size = new Size(0x6f, 0x21);
        this.buttonAuto.TabIndex = 0x34;
        this.buttonAuto.Text = "3D数据测试";
        this.buttonAuto.UseVisualStyleBackColor = false;
        this.buttonAuto.Click += new EventHandler(this.buttonAuto_Click);
        this.label49.AutoSize = true;
        this.label49.Font = new Font("宋体", 10f);
        this.label49.ForeColor = Color.Black;
        this.label49.Location = new Point(20, 0x3b);
        this.label49.Name = "label49";
        this.label49.Size = new Size(0x7e, 14);
        this.label49.TabIndex = 50;
        this.label49.Text = "方位 角 度 分 割:";
        this.grouper16.BackgroundColor = Color.White;
        this.grouper16.BackgroundGradientColor = Color.White;
        this.grouper16.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.grouper16.BorderColor = Color.Black;
        this.grouper16.BorderThickness = 1f;
        this.grouper16.Controls.Add(this.radButtonTestZhouSd);
        this.grouper16.Controls.Add(this.buttonTestStop);
        this.grouper16.Controls.Add(this.radButtonTestZhouEl);
        this.grouper16.Controls.Add(this.buttonTestCCW);
        this.grouper16.Controls.Add(this.radButtonTestZhouAz);
        this.grouper16.Controls.Add(this.buttonTestCW);
        this.grouper16.Controls.Add(this.buttonTestStart);
        this.grouper16.Controls.Add(this.label50);
        this.grouper16.Controls.Add(this.textBox5);
        this.grouper16.CustomGroupBoxColor = Color.White;
        this.grouper16.GroupImage = null;
        this.grouper16.GroupTitle = "测试选项";
        this.grouper16.Location = new Point(7, 0x142);
        this.grouper16.Name = "grouper16";
        this.grouper16.Padding = new Padding(20);
        this.grouper16.PaintGroupBox = false;
        this.grouper16.RoundCorners = 10;
        this.grouper16.ShadowColor = Color.DarkGray;
        this.grouper16.ShadowControl = true;
        this.grouper16.ShadowThickness = 3;
        this.grouper16.Size = new Size(0xee, 0x87);
        this.grouper16.TabIndex = 0x4a;
        this.radButtonTestZhouSd.AutoSize = true;
        this.radButtonTestZhouSd.ForeColor = Color.Black;
        this.radButtonTestZhouSd.Location = new Point(0x67, 0x8e);
        this.radButtonTestZhouSd.Name = "radButtonTestZhouSd";
        this.radButtonTestZhouSd.Size = new Size(70, 0x13);
        this.radButtonTestZhouSd.TabIndex = 0x20;
        this.radButtonTestZhouSd.Text = "极化轴";
        this.radButtonTestZhouSd.UseVisualStyleBackColor = true;
        this.radButtonTestZhouSd.Visible = false;
        this.radButtonTestZhouSd.CheckedChanged += new EventHandler(this.radButtonTestZhouSd_CheckedChanged);
        this.buttonTestStop.BackColor = SystemColors.Control;
        this.buttonTestStop.Font = new Font("宋体", 10f);
        this.buttonTestStop.Location = new Point(0x7e, 0x63);
        this.buttonTestStop.Name = "buttonTestStop";
        this.buttonTestStop.Size = new Size(80, 0x1d);
        this.buttonTestStop.TabIndex = 0x2d;
        this.buttonTestStop.Text = "停止测试";
        this.buttonTestStop.UseVisualStyleBackColor = false;
        this.buttonTestStop.Click += new EventHandler(this.buttonTestStop_Click);
        this.radButtonTestZhouEl.AutoSize = true;
        this.radButtonTestZhouEl.ForeColor = Color.Black;
        this.radButtonTestZhouEl.Location = new Point(0x95, 0x8e);
        this.radButtonTestZhouEl.Name = "radButtonTestZhouEl";
        this.radButtonTestZhouEl.Size = new Size(70, 0x13);
        this.radButtonTestZhouEl.TabIndex = 0x35;
        this.radButtonTestZhouEl.Text = "俯仰轴";
        this.radButtonTestZhouEl.UseVisualStyleBackColor = true;
        this.radButtonTestZhouEl.Visible = false;
        this.buttonTestCCW.BackColor = SystemColors.Control;
        this.buttonTestCCW.Enabled = false;
        this.buttonTestCCW.Font = new Font("宋体", 10f);
        this.buttonTestCCW.Location = new Point(0x7c, 0x40);
        this.buttonTestCCW.Name = "buttonTestCCW";
        this.buttonTestCCW.Size = new Size(80, 0x1d);
        this.buttonTestCCW.TabIndex = 0x2b;
        this.buttonTestCCW.Text = "逆转测试";
        this.buttonTestCCW.UseVisualStyleBackColor = false;
        this.buttonTestCCW.Click += new EventHandler(this.buttonTestCCW_Click);
        this.radButtonTestZhouAz.AutoSize = true;
        this.radButtonTestZhouAz.Checked = true;
        this.radButtonTestZhouAz.ForeColor = Color.Black;
        this.radButtonTestZhouAz.Location = new Point(0x27, 0x8a);
        this.radButtonTestZhouAz.Name = "radButtonTestZhouAz";
        this.radButtonTestZhouAz.Size = new Size(70, 0x13);
        this.radButtonTestZhouAz.TabIndex = 0x1f;
        this.radButtonTestZhouAz.TabStop = true;
        this.radButtonTestZhouAz.Text = "方位轴";
        this.radButtonTestZhouAz.UseVisualStyleBackColor = true;
        this.radButtonTestZhouAz.Visible = false;
        this.radButtonTestZhouAz.CheckedChanged += new EventHandler(this.radButtonTestZhouAz_CheckedChanged);
        this.buttonTestCW.BackColor = SystemColors.Control;
        this.buttonTestCW.Font = new Font("宋体", 10f);
        this.buttonTestCW.Location = new Point(0x26, 0x41);
        this.buttonTestCW.Name = "buttonTestCW";
        this.buttonTestCW.Size = new Size(80, 0x1d);
        this.buttonTestCW.TabIndex = 0x2a;
        this.buttonTestCW.Text = "顺转测试";
        this.buttonTestCW.UseVisualStyleBackColor = false;
        this.buttonTestCW.Click += new EventHandler(this.buttonTestCW_Click);
        this.buttonTestStart.BackColor = SystemColors.Control;
        this.buttonTestStart.Font = new Font("宋体", 10f);
        this.buttonTestStart.Location = new Point(0x26, 0x63);
        this.buttonTestStart.Name = "buttonTestStart";
        this.buttonTestStart.Size = new Size(80, 0x1d);
        this.buttonTestStart.TabIndex = 0x30;
        this.buttonTestStart.Text = "回复方向";
        this.buttonTestStart.UseVisualStyleBackColor = false;
        this.buttonTestStart.Click += new EventHandler(this.buttonTestStart_Click);
        this.label50.AutoSize = true;
        this.label50.Font = new Font("宋体", 10f);
        this.label50.ForeColor = Color.Black;
        this.label50.Location = new Point(0x2a, 0x29);
        this.label50.Name = "label50";
        this.label50.Size = new Size(70, 14);
        this.label50.TabIndex = 0x31;
        this.label50.Text = "测试范围:";
        this.textBox5.Location = new Point(0x74, 0x21);
        this.textBox5.Name = "textBox5";
        this.textBox5.Size = new Size(0x39, 0x18);
        this.textBox5.TabIndex = 50;
        this.textBox5.Text = "360";
        this.textBox5.TextAlign = HorizontalAlignment.Center;
        this.grouperParameter.BackgroundColor = Color.White;
        this.grouperParameter.BackgroundGradientColor = Color.White;
        this.grouperParameter.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.grouperParameter.BorderColor = Color.Black;
        this.grouperParameter.BorderThickness = 1f;
        this.grouperParameter.Controls.Add(this.comboBoxSet);
        this.grouperParameter.Controls.Add(this.textBox6);
        this.grouperParameter.Controls.Add(this.label2);
        this.grouperParameter.Controls.Add(this.numericUpDown2);
        this.grouperParameter.Controls.Add(this.numericUpDown3);
        this.grouperParameter.Controls.Add(this.label4);
        this.grouperParameter.Controls.Add(this.buttonSet);
        this.grouperParameter.Controls.Add(this.buttonFreq);
        this.grouperParameter.Controls.Add(this.buttonVNAinit);
        this.grouperParameter.Controls.Add(this.comboBoxVANPower);
        this.grouperParameter.Controls.Add(this.numUpDownVNAPower);
        this.grouperParameter.Controls.Add(this.label75);
        this.grouperParameter.Controls.Add(this.numUpDownVNAAverage);
        this.grouperParameter.Controls.Add(this.comboBoxVNAAverage);
        this.grouperParameter.Controls.Add(this.label71);
        this.grouperParameter.CustomGroupBoxColor = Color.White;
        this.grouperParameter.GroupImage = null;
        this.grouperParameter.GroupTitle = "网络分析仪";
        this.grouperParameter.Location = new Point(7, 11);
        this.grouperParameter.Name = "grouperParameter";
        this.grouperParameter.Padding = new Padding(20);
        this.grouperParameter.PaintGroupBox = false;
        this.grouperParameter.RoundCorners = 10;
        this.grouperParameter.ShadowColor = Color.DarkGray;
        this.grouperParameter.ShadowControl = true;
        this.grouperParameter.ShadowThickness = 3;
        this.grouperParameter.Size = new Size(240, 160);
        this.grouperParameter.TabIndex = 0x45;
        this.comboBoxSet.Font = new Font("宋体", 10f);
        this.comboBoxSet.FormattingEnabled = true;
        this.comboBoxSet.Items.AddRange(new object[] { "带宽(kHz)", "平滑次数", "参考电平(DB)", "扫描时间(MS)" });
        this.comboBoxSet.Location = new Point(5, 0x1d);
        this.comboBoxSet.Name = "comboBoxSet";
        this.comboBoxSet.Size = new Size(0x68, 0x15);
        this.comboBoxSet.TabIndex = 40;
        this.comboBoxSet.Text = "扫描时间(MS)";
        this.comboBoxSet.SelectedIndexChanged += new EventHandler(this.comboBoxSet_SelectedIndexChanged);
        this.textBox6.Font = new Font("宋体", 10f);
        this.textBox6.Location = new Point(0x73, 0x1b);
        this.textBox6.Name = "textBox6";
        this.textBox6.Size = new Size(0x39, 0x17);
        this.textBox6.TabIndex = 0x27;
        this.textBox6.Text = "30";
        this.textBox6.TextAlign = HorizontalAlignment.Center;
        this.label2.AutoSize = true;
        this.label2.Font = new Font("宋体", 10f);
        this.label2.ForeColor = Color.Black;
        this.label2.Location = new Point(5, 170);
        this.label2.Name = "label2";
        this.label2.Size = new Size(70, 14);
        this.label2.TabIndex = 11;
        this.label2.Text = "IFBW(KHz)";
        this.numericUpDown2.DecimalPlaces = 1;
        this.numericUpDown2.Location = new Point(0x49, 0xa5);
        int[] bits = new int[4];
        bits[0] = 0x1869f;
        this.numericUpDown2.Maximum = new decimal(bits);
        this.numericUpDown2.Name = "numericUpDown2";
        this.numericUpDown2.Size = new Size(0x5b, 0x18);
        this.numericUpDown2.TabIndex = 12;
        this.numericUpDown2.TextAlign = HorizontalAlignment.Center;
        bits = new int[4];
        bits[0] = 3;
        this.numericUpDown2.Value = new decimal(bits);
        this.numericUpDown3.Location = new Point(0x8e, 0xdb);
        bits = new int[4];
        bits[0] = 30;
        this.numericUpDown3.Maximum = new decimal(bits);
        this.numericUpDown3.Name = "numericUpDown3";
        this.numericUpDown3.Size = new Size(0x2a, 0x18);
        this.numericUpDown3.TabIndex = 0x24;
        this.numericUpDown3.TextAlign = HorizontalAlignment.Center;
        bits = new int[4];
        bits[0] = 15;
        this.numericUpDown3.Value = new decimal(bits);
        this.numericUpDown3.Visible = false;
        this.label4.AutoSize = true;
        this.label4.Font = new Font("宋体", 10f);
        this.label4.ForeColor = Color.Black;
        this.label4.Location = new Point(0x19, 0xe0);
        this.label4.Name = "label4";
        this.label4.Size = new Size(0x31, 14);
        this.label4.TabIndex = 0x23;
        this.label4.Text = "SMOOTH";
        this.buttonSet.Location = new Point(0xb2, 0x1b);
        this.buttonSet.Name = "buttonSet";
        this.buttonSet.Size = new Size(0x38, 0x1a);
        this.buttonSet.TabIndex = 0x20;
        this.buttonSet.Text = "设置";
        this.buttonSet.UseVisualStyleBackColor = true;
        this.buttonSet.Click += new EventHandler(this.buttonSet_Click);
        this.buttonFreq.Location = new Point(0x95, 0x7a);
        this.buttonFreq.Name = "buttonFreq";
        this.buttonFreq.Size = new Size(0x38, 0x1a);
        this.buttonFreq.TabIndex = 0x20;
        this.buttonFreq.Text = "频率";
        this.buttonFreq.UseVisualStyleBackColor = true;
        this.buttonFreq.Click += new EventHandler(this.SetFreqency_Click);
        this.buttonVNAinit.BackColor = SystemColors.Control;
        this.buttonVNAinit.Font = new Font("宋体", 10f);
        this.buttonVNAinit.Location = new Point(0x31, 0x7a);
        this.buttonVNAinit.Name = "buttonVNAinit";
        this.buttonVNAinit.Size = new Size(90, 0x1a);
        this.buttonVNAinit.TabIndex = 1;
        this.buttonVNAinit.Text = "初始化仪表";
        this.buttonVNAinit.UseVisualStyleBackColor = false;
        this.buttonVNAinit.Click += new EventHandler(this.buttonVNAinit_Click);
        this.comboBoxVANPower.Font = new Font("宋体", 10f);
        this.comboBoxVANPower.FormattingEnabled = true;
        this.comboBoxVANPower.Items.AddRange(new object[] { "ON", "OFF" });
        this.comboBoxVANPower.Location = new Point(0x45, 0x3b);
        this.comboBoxVANPower.Name = "comboBoxVANPower";
        this.comboBoxVANPower.Size = new Size(0x2b, 0x15);
        this.comboBoxVANPower.TabIndex = 30;
        this.comboBoxVANPower.Text = "ON";
        this.comboBoxVANPower.SelectedIndexChanged += new EventHandler(this.comboBoxVANPower_SelectedIndexChanged);
        this.numUpDownVNAPower.Font = new Font("宋体", 10f);
        this.numUpDownVNAPower.Location = new Point(0x76, 0x39);
        bits = new int[4];
        bits[0] = 5;
        this.numUpDownVNAPower.Maximum = new decimal(bits);
        bits = new int[4];
        bits[0] = 80;
        bits[3] = -2147483648;
        this.numUpDownVNAPower.Minimum = new decimal(bits);
        this.numUpDownVNAPower.Name = "numUpDownVNAPower";
        this.numUpDownVNAPower.Size = new Size(0x2a, 0x17);
        this.numUpDownVNAPower.TabIndex = 0x1d;
        this.numUpDownVNAPower.TextAlign = HorizontalAlignment.Center;
        bits = new int[4];
        bits[0] = 6;
        bits[3] = -2147483648;
        this.numUpDownVNAPower.Value = new decimal(bits);
        this.numUpDownVNAPower.ValueChanged += new EventHandler(this.numUpDownVNAPower_ValueChanged);
        this.label75.AutoSize = true;
        this.label75.Font = new Font("宋体", 10f);
        this.label75.ForeColor = Color.Black;
        this.label75.Location = new Point(5, 0x3e);
        this.label75.Name = "label75";
        this.label75.Size = new Size(0x3f, 14);
        this.label75.TabIndex = 0x1c;
        this.label75.Text = "POW(dBm)";
        this.numUpDownVNAAverage.Font = new Font("宋体", 10f);
        this.numUpDownVNAAverage.Location = new Point(0x76, 0x59);
        bits = new int[4];
        bits[0] = 30;
        this.numUpDownVNAAverage.Maximum = new decimal(bits);
        this.numUpDownVNAAverage.Name = "numUpDownVNAAverage";
        this.numUpDownVNAAverage.Size = new Size(0x2a, 0x17);
        this.numUpDownVNAAverage.TabIndex = 0x1a;
        this.numUpDownVNAAverage.TextAlign = HorizontalAlignment.Center;
        bits = new int[4];
        bits[0] = 2;
        this.numUpDownVNAAverage.Value = new decimal(bits);
        this.numUpDownVNAAverage.ValueChanged += new EventHandler(this.numUpDownVNAAverage_ValueChanged);
        this.comboBoxVNAAverage.Font = new Font("宋体", 10f);
        this.comboBoxVNAAverage.FormattingEnabled = true;
        this.comboBoxVNAAverage.Items.AddRange(new object[] { "ON", "OFF" });
        this.comboBoxVNAAverage.Location = new Point(0x45, 0x5b);
        this.comboBoxVNAAverage.Name = "comboBoxVNAAverage";
        this.comboBoxVNAAverage.Size = new Size(0x2b, 0x15);
        this.comboBoxVNAAverage.TabIndex = 0x1b;
        this.comboBoxVNAAverage.Text = "ON";
        this.label71.AutoSize = true;
        this.label71.Font = new Font("宋体", 10f);
        this.label71.ForeColor = Color.Black;
        this.label71.Location = new Point(5, 0x5e);
        this.label71.Name = "label71";
        this.label71.Size = new Size(0x38, 14);
        this.label71.TabIndex = 0x19;
        this.label71.Text = "AVER(N)";
        this.grouper1.BackgroundColor = Color.White;
        this.grouper1.BackgroundGradientColor = Color.White;
        this.grouper1.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.grouper1.BorderColor = Color.Black;
        this.grouper1.BorderThickness = 1f;
        this.grouper1.Controls.Add(this.comboBoxFreq);
        this.grouper1.Controls.Add(this.buttonFreqSet);
        this.grouper1.Controls.Add(this.buttonFreqPF);
        this.grouper1.Controls.Add(this.textBoxRrveFreq);
        this.grouper1.Controls.Add(this.buttonHPDevice);
        this.grouper1.CustomGroupBoxColor = Color.White;
        this.grouper1.Font = new Font("宋体", 12f);
        this.grouper1.GroupImage = null;
        this.grouper1.GroupTitle = "频谱仪";
        this.grouper1.Location = new Point(7, 0xae);
        this.grouper1.Name = "grouper1";
        this.grouper1.Padding = new Padding(20);
        this.grouper1.PaintGroupBox = false;
        this.grouper1.RoundCorners = 10;
        this.grouper1.ShadowColor = Color.DarkGray;
        this.grouper1.ShadowControl = true;
        this.grouper1.ShadowThickness = 3;
        this.grouper1.Size = new Size(0xf8, 0x93);
        this.grouper1.TabIndex = 0x5c;
        this.comboBoxFreq.FormattingEnabled = true;
        this.comboBoxFreq.Items.AddRange(new object[] { "中心频率(MHZ)", "扫描带宽(KHZ)", "中频带宽(KHZ)", "视频带宽(KHZ)", "参考电平(DB)", "扫描时间(MS)", "仪器复位" });
        this.comboBoxFreq.Location = new Point(0x1c, 0x22);
        this.comboBoxFreq.Name = "comboBoxFreq";
        this.comboBoxFreq.Size = new Size(0x6b, 0x18);
        this.comboBoxFreq.TabIndex = 0x26;
        this.comboBoxFreq.Text = "中心频率(MHZ)";
        this.comboBoxFreq.SelectedIndexChanged += new EventHandler(this.comboBoxFreq_SelectedIndexChanged);
        this.buttonFreqSet.Location = new Point(0x7e, 0x49);
        this.buttonFreqSet.Name = "buttonFreqSet";
        this.buttonFreqSet.Size = new Size(0x4a, 0x1a);
        this.buttonFreqSet.TabIndex = 0x25;
        this.buttonFreqSet.Text = "设   置";
        this.buttonFreqSet.UseVisualStyleBackColor = true;
        this.buttonFreqSet.Click += new EventHandler(this.buttonFreqSet_Click);
        this.buttonFreqPF.Location = new Point(0x1c, 0x49);
        this.buttonFreqPF.Name = "buttonFreqPF";
        this.buttonFreqPF.Size = new Size(0x55, 0x1a);
        this.buttonFreqPF.TabIndex = 0x24;
        this.buttonFreqPF.Text = "标记峰值";
        this.buttonFreqPF.UseVisualStyleBackColor = true;
        this.buttonFreqPF.Click += new EventHandler(this.buttonFreqPF_Click);
        this.textBoxRrveFreq.Location = new Point(0x93, 0x22);
        this.textBoxRrveFreq.Name = "textBoxRrveFreq";
        this.textBoxRrveFreq.Size = new Size(0x39, 0x1a);
        this.textBoxRrveFreq.TabIndex = 0x23;
        this.textBoxRrveFreq.Text = "824";
        this.textBoxRrveFreq.TextAlign = HorizontalAlignment.Center;
        this.buttonHPDevice.BackColor = Color.Transparent;
        this.buttonHPDevice.Font = new Font("宋体", 10f);
        this.buttonHPDevice.Location = new Point(0x1c, 0x6c);
        this.buttonHPDevice.Name = "buttonHPDevice";
        this.buttonHPDevice.Size = new Size(0xac, 0x1a);
        this.buttonHPDevice.TabIndex = 1;
        this.buttonHPDevice.Text = "初始化仪表";
        this.buttonHPDevice.UseVisualStyleBackColor = false;
        this.buttonHPDevice.Click += new EventHandler(this.buttonHPDevice_Click);
        this.tabPageNew.Controls.Add(this.grouperNewOperat);
        this.tabPageNew.Location = new Point(4, 4);
        this.tabPageNew.Name = "tabPageNew";
        this.tabPageNew.Padding = new Padding(3);
        this.tabPageNew.Size = new Size(0xfc, 0x31a);
        this.tabPageNew.TabIndex = 0;
        this.tabPageNew.Text = "测试指引";
        this.tabPageNew.UseVisualStyleBackColor = true;
        this.grouperNewOperat.BackgroundColor = Color.White;
        this.grouperNewOperat.BackgroundGradientColor = Color.White;
        this.grouperNewOperat.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.grouperNewOperat.BorderColor = Color.Black;
        this.grouperNewOperat.BorderThickness = 1f;
        this.grouperNewOperat.Controls.Add(this.buttonNext);
        this.grouperNewOperat.Controls.Add(this.buttonOn);
        this.grouperNewOperat.Controls.Add(this.grouper7Step);
        this.grouperNewOperat.Controls.Add(this.grouper6Step);
        this.grouperNewOperat.Controls.Add(this.grouper5Step);
        this.grouperNewOperat.Controls.Add(this.grouper4Step);
        this.grouperNewOperat.Controls.Add(this.grouper3Step);
        this.grouperNewOperat.Controls.Add(this.label78);
        this.grouperNewOperat.Controls.Add(this.grouper2Step);
        this.grouperNewOperat.Controls.Add(this.grouper1Step);
        this.grouperNewOperat.CustomGroupBoxColor = Color.White;
        this.grouperNewOperat.GroupImage = null;
        this.grouperNewOperat.GroupTitle = "";
        this.grouperNewOperat.Location = new Point(1, 0);
        this.grouperNewOperat.Name = "grouperNewOperat";
        this.grouperNewOperat.Padding = new Padding(20);
        this.grouperNewOperat.PaintGroupBox = false;
        this.grouperNewOperat.RoundCorners = 10;
        this.grouperNewOperat.ShadowColor = Color.DarkGray;
        this.grouperNewOperat.ShadowControl = false;
        this.grouperNewOperat.ShadowThickness = 3;
        this.grouperNewOperat.Size = new Size(0xf5, 760);
        this.grouperNewOperat.TabIndex = 0x56;
        this.buttonNext.Enabled = false;
        this.buttonNext.Font = new Font("宋体", 10f);
        this.buttonNext.Location = new Point(0x87, 0x2cf);
        this.buttonNext.Name = "buttonNext";
        this.buttonNext.Size = new Size(0x52, 0x1a);
        this.buttonNext.TabIndex = 0x24;
        this.buttonNext.Text = "下一步>>>";
        this.buttonNext.UseVisualStyleBackColor = true;
        this.buttonNext.Click += new EventHandler(this.buttonNext_Click);
        this.buttonOn.Enabled = false;
        this.buttonOn.Font = new Font("宋体", 10f);
        this.buttonOn.Location = new Point(0x27, 0x2cf);
        this.buttonOn.Name = "buttonOn";
        this.buttonOn.Size = new Size(0x52, 0x1a);
        this.buttonOn.TabIndex = 0x23;
        this.buttonOn.Text = "<<<上一步";
        this.buttonOn.UseVisualStyleBackColor = true;
        this.buttonOn.Click += new EventHandler(this.buttonOn_Click);
        this.grouper7Step.BackgroundColor = Color.White;
        this.grouper7Step.BackgroundGradientColor = Color.White;
        this.grouper7Step.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.grouper7Step.BorderColor = Color.Black;
        this.grouper7Step.BorderThickness = 1f;
        this.grouper7Step.Controls.Add(this.label126);
        this.grouper7Step.Controls.Add(this.label127);
        this.grouper7Step.Controls.Add(this.ButtonStopAutoTest);
        this.grouper7Step.Controls.Add(this.buttonOrigin);
        this.grouper7Step.CustomGroupBoxColor = Color.White;
        this.grouper7Step.Enabled = false;
        this.grouper7Step.GroupImage = null;
        this.grouper7Step.GroupTitle = "第七步";
        this.grouper7Step.Location = new Point(7, 0x261);
        this.grouper7Step.Name = "grouper7Step";
        this.grouper7Step.Padding = new Padding(20);
        this.grouper7Step.PaintGroupBox = false;
        this.grouper7Step.RoundCorners = 10;
        this.grouper7Step.ShadowColor = Color.DarkGray;
        this.grouper7Step.ShadowControl = true;
        this.grouper7Step.ShadowThickness = 3;
        this.grouper7Step.Size = new Size(0xea, 0x65);
        this.grouper7Step.TabIndex = 7;
        this.label126.AutoSize = true;
        this.label126.Font = new Font("宋体", 10f);
        this.label126.ForeColor = Color.Red;
        this.label126.Location = new Point(0x66, 0x44);
        this.label126.Name = "label126";
        this.label126.Size = new Size(0x5b, 14);
        this.label126.TabIndex = 40;
        this.label126.Text = "停止自动测试";
        this.label127.AutoSize = true;
        this.label127.Font = new Font("宋体", 10f);
        this.label127.ForeColor = Color.Red;
        this.label127.Location = new Point(0x66, 0x25);
        this.label127.Name = "label127";
        this.label127.Size = new Size(0x38, 14);
        this.label127.TabIndex = 0x27;
        this.label127.Text = "回到0点";
        this.ButtonStopAutoTest.Font = new Font("宋体", 9f);
        this.ButtonStopAutoTest.Location = new Point(0x10, 0x3e);
        this.ButtonStopAutoTest.Name = "ButtonStopAutoTest";
        this.ButtonStopAutoTest.Size = new Size(0x51, 0x1a);
        this.ButtonStopAutoTest.TabIndex = 0x23;
        this.ButtonStopAutoTest.Text = "停止测试";
        this.ButtonStopAutoTest.UseVisualStyleBackColor = true;
        this.ButtonStopAutoTest.Click += new EventHandler(this.ButtonStopAutoTest_Click);
        this.buttonOrigin.Font = new Font("宋体", 10f);
        this.buttonOrigin.Location = new Point(0x10, 30);
        this.buttonOrigin.Name = "buttonOrigin";
        this.buttonOrigin.Size = new Size(0x52, 0x1a);
        this.buttonOrigin.TabIndex = 0x22;
        this.buttonOrigin.Text = "回原点";
        this.buttonOrigin.UseVisualStyleBackColor = true;
        this.buttonOrigin.Click += new EventHandler(this.buttonOrigin_Click);
        this.grouper6Step.BackgroundColor = Color.White;
        this.grouper6Step.BackgroundGradientColor = Color.White;
        this.grouper6Step.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.grouper6Step.BorderColor = Color.Black;
        this.grouper6Step.BorderThickness = 1f;
        this.grouper6Step.Controls.Add(this.label22);
        this.grouper6Step.Controls.Add(this.label21);
        this.grouper6Step.Controls.Add(this.buttonAutoTest);
        this.grouper6Step.Controls.Add(this.buttonStartTest);
        this.grouper6Step.CustomGroupBoxColor = Color.White;
        this.grouper6Step.Enabled = false;
        this.grouper6Step.GroupImage = null;
        this.grouper6Step.GroupTitle = "第六步";
        this.grouper6Step.Location = new Point(7, 0x1f8);
        this.grouper6Step.Name = "grouper6Step";
        this.grouper6Step.Padding = new Padding(20);
        this.grouper6Step.PaintGroupBox = false;
        this.grouper6Step.RoundCorners = 10;
        this.grouper6Step.ShadowColor = Color.DarkGray;
        this.grouper6Step.ShadowControl = true;
        this.grouper6Step.ShadowThickness = 3;
        this.grouper6Step.Size = new Size(0xea, 0x65);
        this.grouper6Step.TabIndex = 6;
        this.label22.AutoSize = true;
        this.label22.Font = new Font("宋体", 10f);
        this.label22.ForeColor = Color.Red;
        this.label22.Location = new Point(0x66, 70);
        this.label22.Name = "label22";
        this.label22.Size = new Size(0x77, 14);
        this.label22.TabIndex = 0x26;
        this.label22.Text = "开始设置自动测试";
        this.label21.AutoSize = true;
        this.label21.Font = new Font("宋体", 10f);
        this.label21.ForeColor = Color.Red;
        this.label21.Location = new Point(0x68, 0x23);
        this.label21.Name = "label21";
        this.label21.Size = new Size(0x5b, 14);
        this.label21.TabIndex = 0x25;
        this.label21.Text = "开始进行测试";
        this.buttonAutoTest.Enabled = false;
        this.buttonAutoTest.Font = new Font("宋体", 10f);
        this.buttonAutoTest.Location = new Point(0x10, 0x3f);
        this.buttonAutoTest.Name = "buttonAutoTest";
        this.buttonAutoTest.Size = new Size(0x52, 0x1a);
        this.buttonAutoTest.TabIndex = 0x23;
        this.buttonAutoTest.Text = "自动测试";
        this.buttonAutoTest.UseVisualStyleBackColor = true;
        this.buttonAutoTest.Click += new EventHandler(this.buttonAutoTest_Click);
        this.buttonStartTest.Font = new Font("宋体", 10f);
        this.buttonStartTest.Location = new Point(0x10, 30);
        this.buttonStartTest.Name = "buttonStartTest";
        this.buttonStartTest.Size = new Size(0x52, 0x1a);
        this.buttonStartTest.TabIndex = 0x22;
        this.buttonStartTest.Text = "开始测试";
        this.buttonStartTest.UseVisualStyleBackColor = true;
        this.buttonStartTest.Click += new EventHandler(this.buttonStartTest_Click);
        this.grouper5Step.BackgroundColor = Color.White;
        this.grouper5Step.BackgroundGradientColor = Color.White;
        this.grouper5Step.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.grouper5Step.BorderColor = Color.Black;
        this.grouper5Step.BorderThickness = 1f;
        this.grouper5Step.Controls.Add(this.label15);
        this.grouper5Step.Controls.Add(this.buttonTestStart1);
        this.grouper5Step.CustomGroupBoxColor = Color.White;
        this.grouper5Step.Enabled = false;
        this.grouper5Step.GroupImage = null;
        this.grouper5Step.GroupTitle = "第五步";
        this.grouper5Step.Location = new Point(7, 0x184);
        this.grouper5Step.Name = "grouper5Step";
        this.grouper5Step.Padding = new Padding(20);
        this.grouper5Step.PaintGroupBox = false;
        this.grouper5Step.RoundCorners = 10;
        this.grouper5Step.ShadowColor = Color.DarkGray;
        this.grouper5Step.ShadowControl = true;
        this.grouper5Step.ShadowThickness = 3;
        this.grouper5Step.Size = new Size(0xea, 0x70);
        this.grouper5Step.TabIndex = 5;
        this.label15.AutoSize = true;
        this.label15.Enabled = false;
        this.label15.Font = new Font("宋体", 10f);
        this.label15.ForeColor = Color.Red;
        this.label15.Location = new Point(50, 0x44);
        this.label15.Name = "label15";
        this.label15.Size = new Size(0x85, 0x1c);
        this.label15.TabIndex = 0x24;
        this.label15.Text = "将测试轴旋转180度\r\n将天线背对发射极化";
        this.buttonTestStart1.Font = new Font("宋体", 10f);
        this.buttonTestStart1.Location = new Point(0x13, 0x20);
        this.buttonTestStart1.Name = "buttonTestStart1";
        this.buttonTestStart1.Size = new Size(0xc4, 0x1a);
        this.buttonTestStart1.TabIndex = 0x22;
        this.buttonTestStart1.Text = "至测试起点";
        this.buttonTestStart1.UseVisualStyleBackColor = true;
        this.buttonTestStart1.Click += new EventHandler(this.buttonTestStart1_Click);
        this.grouper4Step.BackgroundColor = Color.White;
        this.grouper4Step.BackgroundGradientColor = Color.White;
        this.grouper4Step.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.grouper4Step.BorderColor = Color.Black;
        this.grouper4Step.BorderThickness = 1f;
        this.grouper4Step.Controls.Add(this.label10);
        this.grouper4Step.Controls.Add(this.buttonMarkZero);
        this.grouper4Step.CustomGroupBoxColor = Color.White;
        this.grouper4Step.Enabled = false;
        this.grouper4Step.GroupImage = null;
        this.grouper4Step.GroupTitle = "第四步";
        this.grouper4Step.Location = new Point(7, 0x113);
        this.grouper4Step.Name = "grouper4Step";
        this.grouper4Step.Padding = new Padding(20);
        this.grouper4Step.PaintGroupBox = false;
        this.grouper4Step.RoundCorners = 10;
        this.grouper4Step.ShadowColor = Color.DarkGray;
        this.grouper4Step.ShadowControl = true;
        this.grouper4Step.ShadowThickness = 3;
        this.grouper4Step.Size = new Size(0xea, 110);
        this.grouper4Step.TabIndex = 4;
        this.label10.AutoSize = true;
        this.label10.Font = new Font("宋体", 10f);
        this.label10.ForeColor = Color.Red;
        this.label10.Location = new Point(0x1d, 0x43);
        this.label10.Name = "label10";
        this.label10.Size = new Size(0xaf, 0x1c);
        this.label10.TabIndex = 0x23;
        this.label10.Text = "当找到一个频点的最大值后\r\n把当前测试轴标校成0点";
        this.buttonMarkZero.Font = new Font("宋体", 10f);
        this.buttonMarkZero.Location = new Point(0x13, 0x20);
        this.buttonMarkZero.Name = "buttonMarkZero";
        this.buttonMarkZero.Size = new Size(0xc4, 0x1a);
        this.buttonMarkZero.TabIndex = 0x22;
        this.buttonMarkZero.Text = "将峰值角度标记为0点";
        this.buttonMarkZero.UseVisualStyleBackColor = true;
        this.buttonMarkZero.Click += new EventHandler(this.buttonMarkZero_Click);
        this.grouper3Step.BackgroundColor = Color.White;
        this.grouper3Step.BackgroundGradientColor = Color.White;
        this.grouper3Step.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.grouper3Step.BorderColor = Color.Black;
        this.grouper3Step.BorderThickness = 1f;
        this.grouper3Step.Controls.Add(this.label9);
        this.grouper3Step.Controls.Add(this.label77);
        this.grouper3Step.CustomGroupBoxColor = Color.White;
        this.grouper3Step.Enabled = false;
        this.grouper3Step.GroupImage = null;
        this.grouper3Step.GroupTitle = "第三步";
        this.grouper3Step.Location = new Point(7, 0x92);
        this.grouper3Step.Name = "grouper3Step";
        this.grouper3Step.Padding = new Padding(20);
        this.grouper3Step.PaintGroupBox = false;
        this.grouper3Step.RoundCorners = 10;
        this.grouper3Step.ShadowColor = Color.DarkGray;
        this.grouper3Step.ShadowControl = true;
        this.grouper3Step.ShadowThickness = 3;
        this.grouper3Step.Size = new Size(0xea, 0x7d);
        this.grouper3Step.TabIndex = 3;
        this.label9.AutoSize = true;
        this.label9.Font = new Font("宋体", 10f);
        this.label9.ForeColor = Color.Red;
        this.label9.Location = new Point(5, 0x3e);
        this.label9.Name = "label9";
        this.label9.Size = new Size(0xe0, 0x2a);
        this.label9.TabIndex = 4;
        this.label9.Text = "手动转动各个轴并查看一个频点的\r\n电平值,等电平值接近最大时把速度\r\n调低,低速状态下找到电平的最大值";
        this.label77.Font = new Font("宋体", 13f);
        this.label77.Location = new Point(6, 0x1c);
        this.label77.Name = "label77";
        this.label77.Size = new Size(0xe1, 0x1f);
        this.label77.TabIndex = 3;
        this.label77.Text = "手动转动各个轴寻找最大值";
        this.label77.TextAlign = ContentAlignment.MiddleCenter;
        this.label77.Click += new EventHandler(this.label77_Click);
        this.label78.Font = new Font("宋体", 15f);
        this.label78.Location = new Point(0x16, 13);
        this.label78.Name = "label78";
        this.label78.Size = new Size(0xca, 0x1f);
        this.label78.TabIndex = 2;
        this.label78.Text = "测试引导步骤";
        this.label78.TextAlign = ContentAlignment.MiddleCenter;
        this.grouper2Step.BackgroundColor = Color.White;
        this.grouper2Step.BackgroundGradientColor = Color.White;
        this.grouper2Step.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.grouper2Step.BorderColor = Color.Black;
        this.grouper2Step.BorderThickness = 1f;
        this.grouper2Step.Controls.Add(this.label8);
        this.grouper2Step.Controls.Add(this.buttonFreq1);
        this.grouper2Step.CustomGroupBoxColor = Color.White;
        this.grouper2Step.Enabled = false;
        this.grouper2Step.GroupImage = null;
        this.grouper2Step.GroupTitle = "第二步";
        this.grouper2Step.Location = new Point(0x7f, 0x2c);
        this.grouper2Step.Name = "grouper2Step";
        this.grouper2Step.Padding = new Padding(20);
        this.grouper2Step.PaintGroupBox = false;
        this.grouper2Step.RoundCorners = 10;
        this.grouper2Step.ShadowColor = Color.DarkGray;
        this.grouper2Step.ShadowControl = true;
        this.grouper2Step.ShadowThickness = 3;
        this.grouper2Step.Size = new Size(0x72, 0x62);
        this.grouper2Step.TabIndex = 1;
        this.label8.AutoSize = true;
        this.label8.Enabled = false;
        this.label8.ForeColor = Color.Red;
        this.label8.Location = new Point(12, 60);
        this.label8.Name = "label8";
        this.label8.Size = new Size(0x61, 30);
        this.label8.TabIndex = 0x22;
        this.label8.Text = "设置要测试的\r\n频率";
        this.buttonFreq1.Font = new Font("Microsoft Sans Serif", 8.25f);
        this.buttonFreq1.Location = new Point(11, 30);
        this.buttonFreq1.Name = "buttonFreq1";
        this.buttonFreq1.Size = new Size(90, 0x1a);
        this.buttonFreq1.TabIndex = 0x21;
        this.buttonFreq1.Text = "设置频率";
        this.buttonFreq1.UseVisualStyleBackColor = true;
        this.buttonFreq1.Click += new EventHandler(this.buttonFreq1_Click);
        this.grouper1Step.BackgroundColor = Color.PaleGreen;
        this.grouper1Step.BackgroundGradientColor = Color.White;
        this.grouper1Step.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.grouper1Step.BorderColor = Color.Black;
        this.grouper1Step.BorderThickness = 1f;
        this.grouper1Step.Controls.Add(this.label1);
        this.grouper1Step.Controls.Add(this.buttonVNAinit1);
        this.grouper1Step.CustomGroupBoxColor = Color.White;
        this.grouper1Step.Enabled = false;
        this.grouper1Step.GroupImage = null;
        this.grouper1Step.GroupTitle = "第一步";
        this.grouper1Step.Location = new Point(7, 0x2c);
        this.grouper1Step.Name = "grouper1Step";
        this.grouper1Step.Padding = new Padding(20);
        this.grouper1Step.PaintGroupBox = false;
        this.grouper1Step.RoundCorners = 10;
        this.grouper1Step.ShadowColor = Color.DarkGray;
        this.grouper1Step.ShadowControl = true;
        this.grouper1Step.ShadowThickness = 3;
        this.grouper1Step.Size = new Size(0x72, 0x62);
        this.grouper1Step.TabIndex = 0;
        this.label1.AutoSize = true;
        this.label1.ForeColor = Color.Red;
        this.label1.Location = new Point(9, 60);
        this.label1.Name = "label1";
        this.label1.Size = new Size(0x69, 30);
        this.label1.TabIndex = 3;
        this.label1.Text = "对仪器初始化,\r\n设置测试参数";
        this.buttonVNAinit1.BackColor = SystemColors.Control;
        this.buttonVNAinit1.Font = new Font("宋体", 10f);
        this.buttonVNAinit1.Location = new Point(11, 0x1f);
        this.buttonVNAinit1.Name = "buttonVNAinit1";
        this.buttonVNAinit1.Size = new Size(90, 0x1a);
        this.buttonVNAinit1.TabIndex = 2;
        this.buttonVNAinit1.Text = "初始化仪表";
        this.buttonVNAinit1.UseVisualStyleBackColor = false;
        this.buttonVNAinit1.Click += new EventHandler(this.buttonVNAinit1_Click);
        this.grouperOther.BackgroundColor = Color.White;
        this.grouperOther.BackgroundGradientColor = Color.White;
        this.grouperOther.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.grouperOther.BorderColor = Color.Black;
        this.grouperOther.BorderThickness = 1f;
        this.grouperOther.Controls.Add(this.comboBoxLNAN);
        this.grouperOther.Controls.Add(this.label42);
        this.grouperOther.Controls.Add(this.comboBoxPNAN);
        this.grouperOther.Controls.Add(this.label41);
        this.grouperOther.Controls.Add(this.label16);
        this.grouperOther.Controls.Add(this.label5);
        this.grouperOther.Controls.Add(this.label25);
        this.grouperOther.Controls.Add(this.label37);
        this.grouperOther.Controls.Add(this.label19);
        this.grouperOther.Controls.Add(this.label28);
        this.grouperOther.Controls.Add(this.comboBoxSwitchN);
        this.grouperOther.CustomGroupBoxColor = Color.White;
        this.grouperOther.GroupImage = null;
        this.grouperOther.GroupTitle = "其他";
        this.grouperOther.Location = new Point(0x24f, 0x49);
        this.grouperOther.Name = "grouperOther";
        this.grouperOther.Padding = new Padding(20);
        this.grouperOther.PaintGroupBox = false;
        this.grouperOther.RoundCorners = 10;
        this.grouperOther.ShadowColor = Color.DarkGray;
        this.grouperOther.ShadowControl = true;
        this.grouperOther.ShadowThickness = 3;
        this.grouperOther.Size = new Size(240, 0x70);
        this.grouperOther.TabIndex = 0x49;
        this.grouperOther.Visible = false;
        this.comboBoxLNAN.Font = new Font("宋体", 10f);
        this.comboBoxLNAN.FormattingEnabled = true;
        this.comboBoxLNAN.Items.AddRange(new object[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" });
        this.comboBoxLNAN.Location = new Point(0x60, 80);
        this.comboBoxLNAN.Name = "comboBoxLNAN";
        this.comboBoxLNAN.RightToLeft = RightToLeft.No;
        this.comboBoxLNAN.Size = new Size(50, 0x15);
        this.comboBoxLNAN.TabIndex = 0x34;
        this.comboBoxLNAN.Text = "1";
        this.comboBoxLNAN.SelectedIndexChanged += new EventHandler(this.comboBoxLNAN_SelectedIndexChanged);
        this.label42.AutoSize = true;
        this.label42.Location = new Point(0x98, 0x53);
        this.label42.Name = "label42";
        this.label42.Size = new Size(0, 12);
        this.label42.TabIndex = 0x33;
        this.comboBoxPNAN.Font = new Font("宋体", 10f);
        this.comboBoxPNAN.FormattingEnabled = true;
        this.comboBoxPNAN.Items.AddRange(new object[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" });
        this.comboBoxPNAN.Location = new Point(0x51, 0x36);
        this.comboBoxPNAN.Name = "comboBoxPNAN";
        this.comboBoxPNAN.RightToLeft = RightToLeft.No;
        this.comboBoxPNAN.Size = new Size(0x41, 0x15);
        this.comboBoxPNAN.TabIndex = 0x29;
        this.comboBoxPNAN.Text = "1";
        this.comboBoxPNAN.SelectedIndexChanged += new EventHandler(this.comboBoxPNAN_SelectedIndexChanged);
        this.label41.AutoSize = true;
        this.label41.Location = new Point(150, 0x38);
        this.label41.Name = "label41";
        this.label41.Size = new Size(0, 12);
        this.label41.TabIndex = 50;
        this.label16.AutoSize = true;
        this.label16.Font = new Font("宋体", 10f);
        this.label16.ForeColor = Color.Black;
        this.label16.Location = new Point(13, 30);
        this.label16.Name = "label16";
        this.label16.Size = new Size(70, 14);
        this.label16.TabIndex = 0x27;
        this.label16.Text = "选择端口:";
        this.label5.AutoSize = true;
        this.label5.Location = new Point(0x97, 0x1c);
        this.label5.Name = "label5";
        this.label5.Size = new Size(0, 12);
        this.label5.TabIndex = 0x31;
        this.label25.AutoSize = true;
        this.label25.Font = new Font("宋体", 10f);
        this.label25.ForeColor = Color.Black;
        this.label25.Location = new Point(13, 0x39);
        this.label25.Name = "label25";
        this.label25.Size = new Size(0x4d, 14);
        this.label25.TabIndex = 40;
        this.label25.Text = "功放选择：";
        this.label37.AutoSize = true;
        this.label37.Location = new Point(150, 0x35);
        this.label37.Name = "label37";
        this.label37.Size = new Size(0, 12);
        this.label37.TabIndex = 0x2f;
        this.label19.AutoSize = true;
        this.label19.Font = new Font("宋体", 10f);
        this.label19.ForeColor = Color.Black;
        this.label19.Location = new Point(13, 0x53);
        this.label19.Name = "label19";
        this.label19.Size = new Size(0x5b, 14);
        this.label19.TabIndex = 0x2a;
        this.label19.Text = "低噪放选择：";
        this.label28.AutoSize = true;
        this.label28.Location = new Point(150, 0x1a);
        this.label28.Name = "label28";
        this.label28.Size = new Size(0, 12);
        this.label28.TabIndex = 0x2e;
        this.comboBoxSwitchN.Font = new Font("宋体", 10f);
        this.comboBoxSwitchN.FormattingEnabled = true;
        this.comboBoxSwitchN.Items.AddRange(new object[] { "请选择", "端口1", "端口2", "端口3", "端口4", "端口5", "端口6", "端口7", "端口8", "端口9", "端口10" });
        this.comboBoxSwitchN.Location = new Point(0x51, 0x1b);
        this.comboBoxSwitchN.Name = "comboBoxSwitchN";
        this.comboBoxSwitchN.Size = new Size(0x41, 0x15);
        this.comboBoxSwitchN.TabIndex = 0x2d;
        this.comboBoxSwitchN.Text = "请选择";
        this.comboBoxSwitchN.SelectedIndexChanged += new EventHandler(this.comboBoxSwitchN_SelectedIndexChanged);
        this.label7.Anchor = AnchorStyles.Right | AnchorStyles.Bottom;
        this.label7.BackColor = Color.Transparent;
        this.label7.Font = new Font("宋体", 12f);
        this.label7.Location = new Point(0x20d, 0x198);
        this.label7.Name = "label7";
        this.label7.Size = new Size(0x2b0, 0x10);
        this.label7.TabIndex = 0x5b;
        this.label7.Text = "石家庄世联达科技有限公司|维修电话:0311-83812310|24小时故障救援及售后专线：13633311687\r\n";
        this.label7.TextAlign = ContentAlignment.MiddleRight;
        this.tabControl1.Alignment = TabAlignment.Bottom;
        this.tabControl1.Anchor = AnchorStyles.Right;
        this.tabControl1.Controls.Add(this.tabPage1);
        this.tabControl1.Controls.Add(this.tabPage2);
        this.tabControl1.Controls.Add(this.tabPage3);
        this.tabControl1.Font = new Font("宋体", 12f, FontStyle.Regular, GraphicsUnit.Point, 0x86);
        this.tabControl1.HotTrack = true;
        this.tabControl1.Location = new Point(0x138, 0x205);
        this.tabControl1.Multiline = true;
        this.tabControl1.Name = "tabControl1";
        this.tabControl1.Padding = new Point(40, 3);
        this.tabControl1.SelectedIndex = 0;
        this.tabControl1.Size = new Size(880, 310);
        this.tabControl1.TabIndex = 0x57;
        this.tabPage1.BackColor = Color.White;
        this.tabPage1.Controls.Add(this.groupBoxSd);
        this.tabPage1.Controls.Add(this.groupBoxAz);
        this.tabPage1.Controls.Add(this.groupBoxEl);
        this.tabPage1.Location = new Point(4, 4);
        this.tabPage1.Name = "tabPage1";
        this.tabPage1.Padding = new Padding(3);
        this.tabPage1.Size = new Size(0x368, 0x119);
        this.tabPage1.TabIndex = 0;
        this.tabPage1.Text = "基本操作";
        this.tabPage1.UseVisualStyleBackColor = true;
        this.groupBoxSd.BackgroundColor = Color.White;
        this.groupBoxSd.BackgroundGradientColor = Color.White;
        this.groupBoxSd.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.groupBoxSd.BorderColor = Color.Black;
        this.groupBoxSd.BorderThickness = 1f;
        this.groupBoxSd.Controls.Add(this.buttonSdXL);
        this.groupBoxSd.Controls.Add(this.label23);
        this.groupBoxSd.Controls.Add(this.label24);
        this.groupBoxSd.Controls.Add(this.labelSdLimTop);
        this.groupBoxSd.Controls.Add(this.labelSdLimDn);
        this.groupBoxSd.Controls.Add(this.trackBarSd);
        this.groupBoxSd.Controls.Add(this.colorSliderSd);
        this.groupBoxSd.Controls.Add(this.buttonSdCa);
        this.groupBoxSd.Controls.Add(this.buttonSdCW);
        this.groupBoxSd.Controls.Add(this.labelSdV);
        this.groupBoxSd.Controls.Add(this.label36);
        this.groupBoxSd.Controls.Add(this.pictureBoxSd);
        this.groupBoxSd.Controls.Add(this.buttonSdStop);
        this.groupBoxSd.Controls.Add(this.buttonSdDW);
        this.groupBoxSd.Controls.Add(this.buttonSdYD);
        this.groupBoxSd.Controls.Add(this.textBoxSdAngle);
        this.groupBoxSd.Controls.Add(this.textBoxSdYD);
        this.groupBoxSd.Controls.Add(this.buttonSdCCW);
        this.groupBoxSd.Controls.Add(this.textBoxSdDW);
        this.groupBoxSd.Controls.Add(this.label29);
        this.groupBoxSd.Controls.Add(this.label35);
        this.groupBoxSd.CustomGroupBoxColor = Color.White;
        this.groupBoxSd.GroupImage = null;
        this.groupBoxSd.GroupTitle = "发射极化轴";
        this.groupBoxSd.Location = new Point(0x246, 2);
        this.groupBoxSd.Name = "groupBoxSd";
        this.groupBoxSd.Padding = new Padding(20);
        this.groupBoxSd.PaintGroupBox = false;
        this.groupBoxSd.RoundCorners = 10;
        this.groupBoxSd.ShadowColor = Color.DarkGray;
        this.groupBoxSd.ShadowControl = true;
        this.groupBoxSd.ShadowThickness = 3;
        this.groupBoxSd.Size = new Size(0x11d, 0x110);
        this.groupBoxSd.TabIndex = 0x4f;
        this.buttonSdXL.Font = new Font("宋体", 10f);
        this.buttonSdXL.Location = new Point(0xcd, 14);
        this.buttonSdXL.Name = "buttonSdXL";
        this.buttonSdXL.Size = new Size(0x3e, 0x17);
        this.buttonSdXL.TabIndex = 0x63;
        this.buttonSdXL.Text = "寻  零";
        this.buttonSdXL.UseVisualStyleBackColor = true;
        this.buttonSdXL.Visible = false;
        this.buttonSdXL.Click += new EventHandler(this.buttonSdXL_Click);
        this.label23.AutoSize = true;
        this.label23.Font = new Font("宋体", 10f);
        this.label23.Location = new Point(0x87, 0x1b);
        this.label23.Name = "label23";
        this.label23.Size = new Size(0x23, 14);
        this.label23.TabIndex = 0x62;
        this.label23.Text = "上限";
        this.label23.Visible = false;
        this.label24.AutoSize = true;
        this.label24.Font = new Font("宋体", 10f);
        this.label24.Location = new Point(0x10, 0x1b);
        this.label24.Name = "label24";
        this.label24.Size = new Size(0x23, 14);
        this.label24.TabIndex = 0x61;
        this.label24.Text = "下限";
        this.label24.Visible = false;
        this.labelSdLimTop.BackColor = Color.GreenYellow;
        this.labelSdLimTop.Location = new Point(0x8e, 0x2a);
        this.labelSdLimTop.Name = "labelSdLimTop";
        this.labelSdLimTop.Size = new Size(40, 40);
        this.labelSdLimTop.TabIndex = 0x5b;
        this.labelSdLimTop.TabStop = false;
        this.labelSdLimTop.Visible = false;
        this.labelSdLimDn.BackColor = Color.GreenYellow;
        this.labelSdLimDn.Location = new Point(0x17, 0x2a);
        this.labelSdLimDn.Name = "labelSdLimDn";
        this.labelSdLimDn.Size = new Size(40, 40);
        this.labelSdLimDn.TabIndex = 90;
        this.labelSdLimDn.TabStop = false;
        this.labelSdLimDn.Visible = false;
        this.trackBarSd.BackColor = Color.White;
        this.trackBarSd.LargeChange = 1;
        this.trackBarSd.Location = new Point(0xc2, 0x30);
        this.trackBarSd.Maximum = 100;
        this.trackBarSd.Minimum = 1;
        this.trackBarSd.Name = "trackBarSd";
        this.trackBarSd.Orientation = Orientation.Vertical;
        this.trackBarSd.Size = new Size(0x2d, 0x6d);
        this.trackBarSd.TabIndex = 0x57;
        this.trackBarSd.TickFrequency = 10;
        this.trackBarSd.TickStyle = TickStyle.Both;
        this.trackBarSd.Value = 50;
        this.trackBarSd.Scroll += new EventHandler(this.trackBarSd_Scroll);
        this.colorSliderSd.BackColor = Color.Transparent;
        this.colorSliderSd.BarPenColor = Color.Transparent;
        this.colorSliderSd.BorderRoundRectSize = new Size(8, 8);
        this.colorSliderSd.LargeChange = 1;
        this.colorSliderSd.Location = new Point(0xb1, 0x39);
        this.colorSliderSd.Minimum = 1;
        this.colorSliderSd.Name = "colorSliderSd";
        this.colorSliderSd.Orientation = Orientation.Vertical;
        this.colorSliderSd.Size = new Size(0x4e, 0x5c);
        this.colorSliderSd.SmallChange = 1;
        this.colorSliderSd.TabIndex = 0x56;
        this.colorSliderSd.Text = "colorSlider2";
        this.colorSliderSd.ThumbRoundRectSize = new Size(10, 10);
        this.colorSliderSd.ThumbSize = 10;
        this.colorSliderSd.Scroll += new ScrollEventHandler(this.colorSliderSd_Scroll);
        this.buttonSdCa.ContextMenuStrip = this.SDcontextMenuText;
        this.buttonSdCa.Enabled = false;
        this.buttonSdCa.Font = new Font("宋体", 10f);
        this.buttonSdCa.Location = new Point(0x90, 0xad);
        this.buttonSdCa.Name = "buttonSdCa";
        this.buttonSdCa.Size = new Size(0x3e, 0x17);
        this.buttonSdCa.TabIndex = 0x35;
        this.buttonSdCa.Text = "校 准";
        this.buttonSdCa.UseVisualStyleBackColor = true;
        this.buttonSdCa.Click += new EventHandler(this.buttonSdCa_Click);
        this.buttonSdCW.Font = new Font("宋体", 10f);
        this.buttonSdCW.Location = new Point(0xd1, 0xad);
        this.buttonSdCW.Name = "buttonSdCW";
        this.buttonSdCW.Size = new Size(0x3e, 0x17);
        this.buttonSdCW.TabIndex = 0x27;
        this.buttonSdCW.Text = "顺 转";
        this.buttonSdCW.UseVisualStyleBackColor = true;
        this.buttonSdCW.Click += new EventHandler(this.buttonSdCW_Click);
        this.labelSdV.AutoSize = true;
        this.labelSdV.BackColor = Color.Transparent;
        this.labelSdV.Font = new Font("宋体", 10f);
        this.labelSdV.Location = new Point(0xbb, 0x21);
        this.labelSdV.Name = "labelSdV";
        this.labelSdV.Size = new Size(0x3f, 14);
        this.labelSdV.TabIndex = 0x33;
        this.labelSdV.Text = "4.0度/秒";
        this.label36.AutoSize = true;
        this.label36.Font = new Font("宋体", 10f);
        this.label36.Location = new Point(11, 0xb0);
        this.label36.Name = "label36";
        this.label36.Size = new Size(0x3f, 14);
        this.label36.TabIndex = 0x13;
        this.label36.Text = "当前角度";
        this.pictureBoxSd.BackgroundImageLayout = ImageLayout.Zoom;
        this.pictureBoxSd.Location = new Point(0x23, 0x25);
        this.pictureBoxSd.Name = "pictureBoxSd";
        this.pictureBoxSd.Size = new Size(120, 120);
        this.pictureBoxSd.TabIndex = 0;
        this.pictureBoxSd.TabStop = false;
        this.buttonSdStop.Font = new Font("宋体", 10f);
        this.buttonSdStop.Location = new Point(0xd1, 0xed);
        this.buttonSdStop.Name = "buttonSdStop";
        this.buttonSdStop.Size = new Size(0x3e, 0x17);
        this.buttonSdStop.TabIndex = 40;
        this.buttonSdStop.Text = "停 止";
        this.buttonSdStop.UseVisualStyleBackColor = true;
        this.buttonSdStop.Click += new EventHandler(this.buttonSdStop_Click);
        this.buttonSdDW.Font = new Font("宋体", 10f);
        this.buttonSdDW.Location = new Point(0x90, 0xed);
        this.buttonSdDW.Name = "buttonSdDW";
        this.buttonSdDW.Size = new Size(0x3e, 0x17);
        this.buttonSdDW.TabIndex = 50;
        this.buttonSdDW.Text = "定 位";
        this.buttonSdDW.UseVisualStyleBackColor = true;
        this.buttonSdDW.Click += new EventHandler(this.buttonSdDW_Click);
        this.buttonSdYD.Font = new Font("宋体", 10f);
        this.buttonSdYD.Location = new Point(0x90, 0xcd);
        this.buttonSdYD.Name = "buttonSdYD";
        this.buttonSdYD.Size = new Size(0x3e, 0x17);
        this.buttonSdYD.TabIndex = 0x26;
        this.buttonSdYD.Text = "引 导";
        this.buttonSdYD.UseVisualStyleBackColor = true;
        this.buttonSdYD.Click += new EventHandler(this.buttonSdYD_Click);
        this.textBoxSdAngle.BackColor = Color.Wheat;
        this.textBoxSdAngle.ForeColor = SystemColors.WindowText;
        this.textBoxSdAngle.Location = new Point(0x4b, 170);
        this.textBoxSdAngle.Name = "textBoxSdAngle";
        this.textBoxSdAngle.ReadOnly = true;
        this.textBoxSdAngle.Size = new Size(0x3e, 0x1a);
        this.textBoxSdAngle.TabIndex = 20;
        this.textBoxSdAngle.Text = "0.00";
        this.textBoxSdAngle.TextAlign = HorizontalAlignment.Center;
        this.textBoxSdYD.Location = new Point(0x4b, 0xcb);
        this.textBoxSdYD.Name = "textBoxSdYD";
        this.textBoxSdYD.Size = new Size(0x3e, 0x1a);
        this.textBoxSdYD.TabIndex = 0x16;
        this.textBoxSdYD.Text = "30";
        this.textBoxSdYD.TextAlign = HorizontalAlignment.Center;
        this.buttonSdCCW.Font = new Font("宋体", 10f);
        this.buttonSdCCW.Location = new Point(0xd1, 0xcd);
        this.buttonSdCCW.Name = "buttonSdCCW";
        this.buttonSdCCW.Size = new Size(0x3e, 0x17);
        this.buttonSdCCW.TabIndex = 0x29;
        this.buttonSdCCW.Text = "逆 转";
        this.buttonSdCCW.UseVisualStyleBackColor = true;
        this.buttonSdCCW.Click += new EventHandler(this.buttonSdCCW_Click);
        this.textBoxSdDW.Location = new Point(0x4b, 0xeb);
        this.textBoxSdDW.Name = "textBoxSdDW";
        this.textBoxSdDW.Size = new Size(0x3e, 0x1a);
        this.textBoxSdDW.TabIndex = 0x31;
        this.textBoxSdDW.Text = "0";
        this.textBoxSdDW.TextAlign = HorizontalAlignment.Center;
        this.label29.AutoSize = true;
        this.label29.Font = new Font("宋体", 10f);
        this.label29.Location = new Point(11, 0xf1);
        this.label29.Name = "label29";
        this.label29.Size = new Size(0x3f, 14);
        this.label29.TabIndex = 0x30;
        this.label29.Text = "定位角度";
        this.label35.AutoSize = true;
        this.label35.Font = new Font("宋体", 10f);
        this.label35.Location = new Point(11, 0xd1);
        this.label35.Name = "label35";
        this.label35.Size = new Size(0x3f, 14);
        this.label35.TabIndex = 0x15;
        this.label35.Text = "引导角度";
        this.groupBoxAz.BackgroundColor = Color.White;
        this.groupBoxAz.BackgroundGradientColor = Color.White;
        this.groupBoxAz.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.groupBoxAz.BorderColor = Color.Black;
        this.groupBoxAz.BorderThickness = 1f;
        this.groupBoxAz.Controls.Add(this.buttonAzXL);
        this.groupBoxAz.Controls.Add(this.trackBarAz);
        this.groupBoxAz.Controls.Add(this.colorSliderAz);
        this.groupBoxAz.Controls.Add(this.labelAzV);
        this.groupBoxAz.Controls.Add(this.buttonAzCa);
        this.groupBoxAz.Controls.Add(this.label12);
        this.groupBoxAz.Controls.Add(this.buttonAzDW);
        this.groupBoxAz.Controls.Add(this.textBoxAzAngle);
        this.groupBoxAz.Controls.Add(this.textBoxAzDW);
        this.groupBoxAz.Controls.Add(this.buttonAzCCW);
        this.groupBoxAz.Controls.Add(this.buttonAzYD);
        this.groupBoxAz.Controls.Add(this.label13);
        this.groupBoxAz.Controls.Add(this.label14);
        this.groupBoxAz.Controls.Add(this.buttonAzStop);
        this.groupBoxAz.Controls.Add(this.buttonAzCW);
        this.groupBoxAz.Controls.Add(this.pictureBoxAz);
        this.groupBoxAz.Controls.Add(this.textBoxAzYD);
        this.groupBoxAz.CustomGroupBoxColor = Color.White;
        this.groupBoxAz.GroupImage = null;
        this.groupBoxAz.GroupTitle = "方位轴";
        this.groupBoxAz.Location = new Point(6, 2);
        this.groupBoxAz.Name = "groupBoxAz";
        this.groupBoxAz.Padding = new Padding(20);
        this.groupBoxAz.PaintGroupBox = false;
        this.groupBoxAz.RoundCorners = 10;
        this.groupBoxAz.ShadowColor = Color.DarkGray;
        this.groupBoxAz.ShadowControl = true;
        this.groupBoxAz.ShadowThickness = 3;
        this.groupBoxAz.Size = new Size(0x11d, 0x110);
        this.groupBoxAz.TabIndex = 0x4d;
        this.buttonAzXL.Font = new Font("宋体", 10f);
        this.buttonAzXL.Location = new Point(0xd1, 0x9f);
        this.buttonAzXL.Name = "buttonAzXL";
        this.buttonAzXL.Size = new Size(0x3e, 0x17);
        this.buttonAzXL.TabIndex = 0x54;
        this.buttonAzXL.Text = "寻  零";
        this.buttonAzXL.UseVisualStyleBackColor = true;
        this.buttonAzXL.Click += new EventHandler(this.buttonAzXL_Click);
        this.trackBarAz.AutoSize = false;
        this.trackBarAz.BackColor = Color.White;
        this.trackBarAz.LargeChange = 1;
        this.trackBarAz.Location = new Point(0xc2, 0x30);
        this.trackBarAz.Maximum = 150;
        this.trackBarAz.Minimum = 1;
        this.trackBarAz.Name = "trackBarAz";
        this.trackBarAz.Orientation = Orientation.Vertical;
        this.trackBarAz.Size = new Size(0x2d, 0x6d);
        this.trackBarAz.TabIndex = 0x53;
        this.trackBarAz.TickFrequency = 10;
        this.trackBarAz.TickStyle = TickStyle.Both;
        this.trackBarAz.Value = 100;
        this.trackBarAz.Scroll += new EventHandler(this.trackBarAz_Scroll);
        this.colorSliderAz.BackColor = Color.Transparent;
        this.colorSliderAz.BarPenColor = Color.Transparent;
        this.colorSliderAz.BorderRoundRectSize = new Size(8, 8);
        this.colorSliderAz.LargeChange = 1;
        this.colorSliderAz.Location = new Point(0xb1, 0x39);
        this.colorSliderAz.Maximum = 150;
        this.colorSliderAz.Minimum = 1;
        this.colorSliderAz.Name = "colorSliderAz";
        this.colorSliderAz.Orientation = Orientation.Vertical;
        this.colorSliderAz.Size = new Size(0x4e, 0x5c);
        this.colorSliderAz.SmallChange = 1;
        this.colorSliderAz.TabIndex = 0x52;
        this.colorSliderAz.Text = "colorSlider1";
        this.colorSliderAz.ThumbRoundRectSize = new Size(10, 10);
        this.colorSliderAz.ThumbSize = 10;
        this.colorSliderAz.Value = 100;
        this.colorSliderAz.Scroll += new ScrollEventHandler(this.colorSliderAz_Scroll);
        this.labelAzV.AutoSize = true;
        this.labelAzV.BackColor = Color.Transparent;
        this.labelAzV.Font = new Font("宋体", 10f);
        this.labelAzV.Location = new Point(0xbb, 0x21);
        this.labelAzV.Name = "labelAzV";
        this.labelAzV.Size = new Size(70, 14);
        this.labelAzV.TabIndex = 0x4f;
        this.labelAzV.Text = "10.0度/秒";
        this.buttonAzCa.ContextMenuStrip = this.AZcontextMenuText;
        this.buttonAzCa.Enabled = false;
        this.buttonAzCa.Font = new Font("宋体", 10f);
        this.buttonAzCa.Location = new Point(0x90, 0x9e);
        this.buttonAzCa.Name = "buttonAzCa";
        this.buttonAzCa.Size = new Size(0x3e, 0x33);
        this.buttonAzCa.TabIndex = 0x4c;
        this.buttonAzCa.Text = "校 准";
        this.buttonAzCa.UseVisualStyleBackColor = true;
        this.buttonAzCa.Click += new EventHandler(this.buttonAzCa_Click);
        this.label12.AutoSize = true;
        this.label12.Font = new Font("宋体", 10f);
        this.label12.Location = new Point(11, 0xb0);
        this.label12.Name = "label12";
        this.label12.Size = new Size(0x3f, 14);
        this.label12.TabIndex = 0x40;
        this.label12.Text = "当前角度";
        this.buttonAzDW.Font = new Font("宋体", 10f);
        this.buttonAzDW.Location = new Point(0x90, 240);
        this.buttonAzDW.Name = "buttonAzDW";
        this.buttonAzDW.Size = new Size(0x3e, 0x17);
        this.buttonAzDW.TabIndex = 0x4b;
        this.buttonAzDW.Text = "定 位";
        this.buttonAzDW.UseVisualStyleBackColor = true;
        this.buttonAzDW.Click += new EventHandler(this.buttonAzDW_Click);
        this.textBoxAzAngle.BackColor = Color.Wheat;
        this.textBoxAzAngle.ForeColor = SystemColors.WindowText;
        this.textBoxAzAngle.Location = new Point(0x4b, 170);
        this.textBoxAzAngle.Name = "textBoxAzAngle";
        this.textBoxAzAngle.ReadOnly = true;
        this.textBoxAzAngle.Size = new Size(0x3e, 0x1a);
        this.textBoxAzAngle.TabIndex = 0x41;
        this.textBoxAzAngle.Text = "0.00";
        this.textBoxAzAngle.TextAlign = HorizontalAlignment.Center;
        this.textBoxAzDW.Location = new Point(0x4b, 0xeb);
        this.textBoxAzDW.Name = "textBoxAzDW";
        this.textBoxAzDW.Size = new Size(0x3e, 0x1a);
        this.textBoxAzDW.TabIndex = 0x4a;
        this.textBoxAzDW.Text = "0";
        this.textBoxAzDW.TextAlign = HorizontalAlignment.Center;
        this.buttonAzCCW.Font = new Font("宋体", 10f);
        this.buttonAzCCW.Location = new Point(0xd1, 0xd5);
        this.buttonAzCCW.Name = "buttonAzCCW";
        this.buttonAzCCW.Size = new Size(0x3e, 0x17);
        this.buttonAzCCW.TabIndex = 0x47;
        this.buttonAzCCW.Text = "逆 转";
        this.buttonAzCCW.UseVisualStyleBackColor = true;
        this.buttonAzCCW.Click += new EventHandler(this.buttonAzCCW_Click);
        this.buttonAzYD.Font = new Font("宋体", 10f);
        this.buttonAzYD.Location = new Point(0x90, 0xd5);
        this.buttonAzYD.Name = "buttonAzYD";
        this.buttonAzYD.Size = new Size(0x3e, 0x17);
        this.buttonAzYD.TabIndex = 0x44;
        this.buttonAzYD.Text = "引 导";
        this.buttonAzYD.UseVisualStyleBackColor = true;
        this.buttonAzYD.Click += new EventHandler(this.buttonAzYD_Click);
        this.label13.AutoSize = true;
        this.label13.Font = new Font("宋体", 10f);
        this.label13.Location = new Point(11, 0xd1);
        this.label13.Name = "label13";
        this.label13.Size = new Size(0x3f, 14);
        this.label13.TabIndex = 0x42;
        this.label13.Text = "引导角度";
        this.label14.AutoSize = true;
        this.label14.Font = new Font("宋体", 10f);
        this.label14.Location = new Point(11, 0xf1);
        this.label14.Name = "label14";
        this.label14.Size = new Size(0x3f, 14);
        this.label14.TabIndex = 0x49;
        this.label14.Text = "定位角度";
        this.buttonAzStop.Font = new Font("宋体", 10f);
        this.buttonAzStop.Location = new Point(0xd1, 240);
        this.buttonAzStop.Name = "buttonAzStop";
        this.buttonAzStop.Size = new Size(0x3e, 0x17);
        this.buttonAzStop.TabIndex = 70;
        this.buttonAzStop.Text = "停 止";
        this.buttonAzStop.UseVisualStyleBackColor = true;
        this.buttonAzStop.Click += new EventHandler(this.buttonAzStop_Click);
        this.buttonAzCW.Font = new Font("宋体", 10f);
        this.buttonAzCW.Location = new Point(0xd1, 0xba);
        this.buttonAzCW.Name = "buttonAzCW";
        this.buttonAzCW.Size = new Size(0x3e, 0x17);
        this.buttonAzCW.TabIndex = 0x45;
        this.buttonAzCW.Text = "顺 转";
        this.buttonAzCW.UseVisualStyleBackColor = true;
        this.buttonAzCW.Click += new EventHandler(this.buttonAzCW_Click);
        this.pictureBoxAz.BackColor = Color.Transparent;
        this.pictureBoxAz.BackgroundImageLayout = ImageLayout.Zoom;
        this.pictureBoxAz.Location = new Point(0x23, 0x25);
        this.pictureBoxAz.Name = "pictureBoxAz";
        this.pictureBoxAz.Size = new Size(120, 120);
        this.pictureBoxAz.TabIndex = 0x3f;
        this.pictureBoxAz.TabStop = false;
        this.textBoxAzYD.Location = new Point(0x4b, 0xcb);
        this.textBoxAzYD.Name = "textBoxAzYD";
        this.textBoxAzYD.Size = new Size(0x3e, 0x1a);
        this.textBoxAzYD.TabIndex = 0x43;
        this.textBoxAzYD.Text = "30";
        this.textBoxAzYD.TextAlign = HorizontalAlignment.Center;
        this.groupBoxEl.BackgroundColor = Color.White;
        this.groupBoxEl.BackgroundGradientColor = Color.White;
        this.groupBoxEl.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.groupBoxEl.BorderColor = Color.Black;
        this.groupBoxEl.BorderThickness = 1f;
        this.groupBoxEl.Controls.Add(this.buttonElXL);
        this.groupBoxEl.Controls.Add(this.labelElUpLim);
        this.groupBoxEl.Controls.Add(this.labelElDnLim);
        this.groupBoxEl.Controls.Add(this.labelElLimTop);
        this.groupBoxEl.Controls.Add(this.labelElLimDn);
        this.groupBoxEl.Controls.Add(this.trackBarEl);
        this.groupBoxEl.Controls.Add(this.colorSliderEl);
        this.groupBoxEl.Controls.Add(this.buttonElCa);
        this.groupBoxEl.Controls.Add(this.labelElV);
        this.groupBoxEl.Controls.Add(this.label18);
        this.groupBoxEl.Controls.Add(this.buttonElDW);
        this.groupBoxEl.Controls.Add(this.textBoxElAngle);
        this.groupBoxEl.Controls.Add(this.textBoxElDW);
        this.groupBoxEl.Controls.Add(this.label17);
        this.groupBoxEl.Controls.Add(this.label11);
        this.groupBoxEl.Controls.Add(this.buttonElCCW);
        this.groupBoxEl.Controls.Add(this.textBoxElYD);
        this.groupBoxEl.Controls.Add(this.buttonElYD);
        this.groupBoxEl.Controls.Add(this.buttonElStop);
        this.groupBoxEl.Controls.Add(this.buttonElCW);
        this.groupBoxEl.Controls.Add(this.pictureBoxEl);
        this.groupBoxEl.CustomGroupBoxColor = Color.White;
        this.groupBoxEl.GroupImage = null;
        this.groupBoxEl.GroupTitle = "接收极化轴";
        this.groupBoxEl.Location = new Point(0x124, 2);
        this.groupBoxEl.Name = "groupBoxEl";
        this.groupBoxEl.Padding = new Padding(20);
        this.groupBoxEl.PaintGroupBox = false;
        this.groupBoxEl.RoundCorners = 10;
        this.groupBoxEl.ShadowColor = Color.DarkGray;
        this.groupBoxEl.ShadowControl = true;
        this.groupBoxEl.ShadowThickness = 3;
        this.groupBoxEl.Size = new Size(0x11d, 0x110);
        this.groupBoxEl.TabIndex = 0x4e;
        this.buttonElXL.Font = new Font("宋体", 10f);
        this.buttonElXL.Location = new Point(0xd1, 0x9f);
        this.buttonElXL.Name = "buttonElXL";
        this.buttonElXL.Size = new Size(0x3e, 0x17);
        this.buttonElXL.TabIndex = 0x61;
        this.buttonElXL.Text = "寻  零";
        this.buttonElXL.UseVisualStyleBackColor = true;
        this.buttonElXL.Click += new EventHandler(this.buttonElXL_Click);
        this.labelElUpLim.AutoSize = true;
        this.labelElUpLim.Font = new Font("宋体", 10f);
        this.labelElUpLim.Location = new Point(0x87, 0x1b);
        this.labelElUpLim.Name = "labelElUpLim";
        this.labelElUpLim.Size = new Size(0x23, 14);
        this.labelElUpLim.TabIndex = 0x60;
        this.labelElUpLim.Text = "上限";
        this.labelElDnLim.AutoSize = true;
        this.labelElDnLim.Font = new Font("宋体", 10f);
        this.labelElDnLim.Location = new Point(0x10, 0x1b);
        this.labelElDnLim.Name = "labelElDnLim";
        this.labelElDnLim.Size = new Size(0x23, 14);
        this.labelElDnLim.TabIndex = 0x5f;
        this.labelElDnLim.Text = "下限";
        this.labelElLimTop.BackColor = Color.GreenYellow;
        this.labelElLimTop.Location = new Point(0x8e, 0x2a);
        this.labelElLimTop.Name = "labelElLimTop";
        this.labelElLimTop.Size = new Size(40, 40);
        this.labelElLimTop.TabIndex = 0x59;
        this.labelElLimTop.TabStop = false;
        this.labelElLimDn.BackColor = Color.GreenYellow;
        this.labelElLimDn.Location = new Point(0x17, 0x2a);
        this.labelElLimDn.Name = "labelElLimDn";
        this.labelElLimDn.Size = new Size(40, 40);
        this.labelElLimDn.TabIndex = 0x58;
        this.labelElLimDn.TabStop = false;
        this.trackBarEl.BackColor = Color.White;
        this.trackBarEl.LargeChange = 1;
        this.trackBarEl.Location = new Point(0xc2, 0x30);
        this.trackBarEl.Maximum = 300;
        this.trackBarEl.Minimum = 1;
        this.trackBarEl.Name = "trackBarEl";
        this.trackBarEl.Orientation = Orientation.Vertical;
        this.trackBarEl.Size = new Size(0x2d, 0x6d);
        this.trackBarEl.TabIndex = 0x57;
        this.trackBarEl.TickFrequency = 20;
        this.trackBarEl.TickStyle = TickStyle.Both;
        this.trackBarEl.Value = 200;
        this.trackBarEl.Scroll += new EventHandler(this.trackBarEl_Scroll);
        this.colorSliderEl.BackColor = Color.Transparent;
        this.colorSliderEl.BarPenColor = Color.Transparent;
        this.colorSliderEl.BorderRoundRectSize = new Size(8, 8);
        this.colorSliderEl.LargeChange = 1;
        this.colorSliderEl.Location = new Point(0xb1, 0x39);
        this.colorSliderEl.Maximum = 300;
        this.colorSliderEl.Minimum = 1;
        this.colorSliderEl.Name = "colorSliderEl";
        this.colorSliderEl.Orientation = Orientation.Vertical;
        this.colorSliderEl.Size = new Size(0x4e, 0x5c);
        this.colorSliderEl.SmallChange = 1;
        this.colorSliderEl.TabIndex = 0x56;
        this.colorSliderEl.Text = "colorSlider2";
        this.colorSliderEl.ThumbRoundRectSize = new Size(10, 10);
        this.colorSliderEl.ThumbSize = 10;
        this.colorSliderEl.Value = 200;
        this.colorSliderEl.Scroll += new ScrollEventHandler(this.colorSliderEl_Scroll);
        this.buttonElCa.ContextMenuStrip = this.ELcontextMenuText;
        this.buttonElCa.Enabled = false;
        this.buttonElCa.Font = new Font("宋体", 10f);
        this.buttonElCa.Location = new Point(0x90, 0x9e);
        this.buttonElCa.Name = "buttonElCa";
        this.buttonElCa.Size = new Size(0x3e, 0x33);
        this.buttonElCa.TabIndex = 70;
        this.buttonElCa.Text = "校 准";
        this.buttonElCa.UseVisualStyleBackColor = true;
        this.buttonElCa.Click += new EventHandler(this.buttonElCa_Click);
        this.labelElV.AutoSize = true;
        this.labelElV.BackColor = Color.Transparent;
        this.labelElV.Font = new Font("宋体", 10f);
        this.labelElV.Location = new Point(0xbb, 0x21);
        this.labelElV.Name = "labelElV";
        this.labelElV.Size = new Size(70, 14);
        this.labelElV.TabIndex = 0x45;
        this.labelElV.Text = "20.0度/秒";
        this.label18.AutoSize = true;
        this.label18.Font = new Font("宋体", 10f);
        this.label18.Location = new Point(11, 0xb0);
        this.label18.Name = "label18";
        this.label18.Size = new Size(0x3f, 14);
        this.label18.TabIndex = 0x39;
        this.label18.Text = "当前角度";
        this.buttonElDW.Font = new Font("宋体", 10f);
        this.buttonElDW.Location = new Point(0x90, 240);
        this.buttonElDW.Name = "buttonElDW";
        this.buttonElDW.Size = new Size(0x3e, 0x17);
        this.buttonElDW.TabIndex = 0x44;
        this.buttonElDW.Text = "定 位";
        this.buttonElDW.UseVisualStyleBackColor = true;
        this.buttonElDW.Click += new EventHandler(this.buttonElDW_Click);
        this.textBoxElAngle.BackColor = Color.Wheat;
        this.textBoxElAngle.ForeColor = SystemColors.WindowText;
        this.textBoxElAngle.Location = new Point(0x4b, 170);
        this.textBoxElAngle.Name = "textBoxElAngle";
        this.textBoxElAngle.ReadOnly = true;
        this.textBoxElAngle.Size = new Size(0x3e, 0x1a);
        this.textBoxElAngle.TabIndex = 0x3a;
        this.textBoxElAngle.Text = "0.00";
        this.textBoxElAngle.TextAlign = HorizontalAlignment.Center;
        this.textBoxElDW.Location = new Point(0x4b, 0xeb);
        this.textBoxElDW.Name = "textBoxElDW";
        this.textBoxElDW.Size = new Size(0x3e, 0x1a);
        this.textBoxElDW.TabIndex = 0x43;
        this.textBoxElDW.Text = "0";
        this.textBoxElDW.TextAlign = HorizontalAlignment.Center;
        this.label17.AutoSize = true;
        this.label17.Font = new Font("宋体", 10f);
        this.label17.Location = new Point(11, 0xd1);
        this.label17.Name = "label17";
        this.label17.Size = new Size(0x3f, 14);
        this.label17.TabIndex = 0x3b;
        this.label17.Text = "引导角度";
        this.label11.AutoSize = true;
        this.label11.Font = new Font("宋体", 10f);
        this.label11.Location = new Point(11, 0xf1);
        this.label11.Name = "label11";
        this.label11.Size = new Size(0x3f, 14);
        this.label11.TabIndex = 0x42;
        this.label11.Text = "定位角度";
        this.buttonElCCW.Font = new Font("宋体", 10f);
        this.buttonElCCW.Location = new Point(0xd1, 0xd5);
        this.buttonElCCW.Name = "buttonElCCW";
        this.buttonElCCW.Size = new Size(0x3e, 0x17);
        this.buttonElCCW.TabIndex = 0x40;
        this.buttonElCCW.Text = "下 转";
        this.buttonElCCW.UseVisualStyleBackColor = true;
        this.buttonElCCW.Click += new EventHandler(this.buttonElCCW_Click);
        this.textBoxElYD.Location = new Point(0x4b, 0xcb);
        this.textBoxElYD.Name = "textBoxElYD";
        this.textBoxElYD.Size = new Size(0x3e, 0x1a);
        this.textBoxElYD.TabIndex = 60;
        this.textBoxElYD.Text = "30";
        this.textBoxElYD.TextAlign = HorizontalAlignment.Center;
        this.buttonElYD.Font = new Font("宋体", 10f);
        this.buttonElYD.Location = new Point(0x90, 0xd5);
        this.buttonElYD.Name = "buttonElYD";
        this.buttonElYD.Size = new Size(0x3e, 0x17);
        this.buttonElYD.TabIndex = 0x3d;
        this.buttonElYD.Text = "引 导";
        this.buttonElYD.UseVisualStyleBackColor = true;
        this.buttonElYD.Click += new EventHandler(this.buttonElYD_Click);
        this.buttonElStop.Font = new Font("宋体", 10f);
        this.buttonElStop.Location = new Point(0xd1, 240);
        this.buttonElStop.Name = "buttonElStop";
        this.buttonElStop.Size = new Size(0x3e, 0x17);
        this.buttonElStop.TabIndex = 0x3f;
        this.buttonElStop.Text = "停 止";
        this.buttonElStop.UseVisualStyleBackColor = true;
        this.buttonElStop.Click += new EventHandler(this.buttonElStop_Click);
        this.buttonElCW.Font = new Font("宋体", 10f);
        this.buttonElCW.Location = new Point(0xd1, 0xba);
        this.buttonElCW.Name = "buttonElCW";
        this.buttonElCW.Size = new Size(0x3e, 0x17);
        this.buttonElCW.TabIndex = 0x3e;
        this.buttonElCW.Text = "上 转";
        this.buttonElCW.UseVisualStyleBackColor = true;
        this.buttonElCW.Click += new EventHandler(this.buttonElCW_Click);
        this.pictureBoxEl.BackgroundImageLayout = ImageLayout.Zoom;
        this.pictureBoxEl.Location = new Point(0x23, 0x25);
        this.pictureBoxEl.Name = "pictureBoxEl";
        this.pictureBoxEl.Size = new Size(120, 120);
        this.pictureBoxEl.TabIndex = 0x38;
        this.pictureBoxEl.TabStop = false;
        this.tabPage2.BackColor = Color.White;
        this.tabPage2.Controls.Add(this.groupBoxPt);
        this.tabPage2.Controls.Add(this.groupBoxRv);
        this.tabPage2.Controls.Add(this.groupBoxDn);
        this.tabPage2.Location = new Point(4, 4);
        this.tabPage2.Name = "tabPage2";
        this.tabPage2.Size = new Size(0x368, 0x119);
        this.tabPage2.TabIndex = 1;
        this.tabPage2.Text = "其他控制轴";
        this.tabPage2.UseVisualStyleBackColor = true;
        this.groupBoxPt.BackgroundColor = Color.White;
        this.groupBoxPt.BackgroundGradientColor = Color.White;
        this.groupBoxPt.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.groupBoxPt.BorderColor = Color.Black;
        this.groupBoxPt.BorderThickness = 1f;
        this.groupBoxPt.Controls.Add(this.progressBarEx2);
        this.groupBoxPt.Controls.Add(this.label34);
        this.groupBoxPt.Controls.Add(this.label39);
        this.groupBoxPt.Controls.Add(this.labelPtLimTop);
        this.groupBoxPt.Controls.Add(this.labelPtLimDn);
        this.groupBoxPt.Controls.Add(this.trackBarPt);
        this.groupBoxPt.Controls.Add(this.colorSliderPt);
        this.groupBoxPt.Controls.Add(this.buttonPtStop);
        this.groupBoxPt.Controls.Add(this.buttonPtCa);
        this.groupBoxPt.Controls.Add(this.buttonPtCW);
        this.groupBoxPt.Controls.Add(this.label64);
        this.groupBoxPt.Controls.Add(this.labelPtV);
        this.groupBoxPt.Controls.Add(this.buttonPtYD);
        this.groupBoxPt.Controls.Add(this.textBoxPtYD);
        this.groupBoxPt.Controls.Add(this.buttonPtDW);
        this.groupBoxPt.Controls.Add(this.buttonPtCCW);
        this.groupBoxPt.Controls.Add(this.textBoxPtAngle);
        this.groupBoxPt.Controls.Add(this.label38);
        this.groupBoxPt.Controls.Add(this.label63);
        this.groupBoxPt.Controls.Add(this.textBoxPtDW);
        this.groupBoxPt.CustomGroupBoxColor = Color.White;
        this.groupBoxPt.GroupImage = null;
        this.groupBoxPt.GroupTitle = "Y平移轴";
        this.groupBoxPt.Location = new Point(0x248, 2);
        this.groupBoxPt.Name = "groupBoxPt";
        this.groupBoxPt.Padding = new Padding(20);
        this.groupBoxPt.PaintGroupBox = false;
        this.groupBoxPt.RoundCorners = 10;
        this.groupBoxPt.ShadowColor = Color.DarkGray;
        this.groupBoxPt.ShadowControl = true;
        this.groupBoxPt.ShadowThickness = 3;
        this.groupBoxPt.Size = new Size(0x11d, 0x110);
        this.groupBoxPt.TabIndex = 0x52;
        this.progressBarEx2.Location = new Point(14, 0x4d);
        this.progressBarEx2.MarqueePercentage = 0x19;
        this.progressBarEx2.MarqueeSpeed = 30;
        this.progressBarEx2.MarqueeStep = 1;
        this.progressBarEx2.Maximum = 510;
        this.progressBarEx2.Minimum = 0;
        this.progressBarEx2.Name = "progressBarEx2";
        this.progressBarEx2.ProgressPadding = 0;
        this.progressBarEx2.ProgressType = ProgressType.Smooth;
        this.progressBarEx2.ShowPercentage = false;
        this.progressBarEx2.Size = new Size(0xa8, 0x34);
        this.progressBarEx2.TabIndex = 0x65;
        this.progressBarEx2.Value = 10;
        this.progressBarEx2.Visible = false;
        this.label34.AutoSize = true;
        this.label34.Font = new Font("宋体", 10f);
        this.label34.Location = new Point(0x87, 0x1b);
        this.label34.Name = "label34";
        this.label34.Size = new Size(0x23, 14);
        this.label34.TabIndex = 100;
        this.label34.Text = "前限";
        this.label39.AutoSize = true;
        this.label39.Font = new Font("宋体", 10f);
        this.label39.Location = new Point(0x10, 0x1b);
        this.label39.Name = "label39";
        this.label39.Size = new Size(0x23, 14);
        this.label39.TabIndex = 0x63;
        this.label39.Text = "后限";
        this.labelPtLimTop.BackColor = Color.GreenYellow;
        this.labelPtLimTop.Location = new Point(0x8e, 0x2a);
        this.labelPtLimTop.Name = "labelPtLimTop";
        this.labelPtLimTop.Size = new Size(40, 40);
        this.labelPtLimTop.TabIndex = 90;
        this.labelPtLimTop.TabStop = false;
        this.labelPtLimDn.BackColor = Color.GreenYellow;
        this.labelPtLimDn.Location = new Point(0x17, 0x2a);
        this.labelPtLimDn.Name = "labelPtLimDn";
        this.labelPtLimDn.Size = new Size(40, 40);
        this.labelPtLimDn.TabIndex = 0x59;
        this.labelPtLimDn.TabStop = false;
        this.trackBarPt.BackColor = Color.White;
        this.trackBarPt.LargeChange = 1;
        this.trackBarPt.Location = new Point(0xc2, 0x30);
        this.trackBarPt.Maximum = 5;
        this.trackBarPt.Minimum = 1;
        this.trackBarPt.Name = "trackBarPt";
        this.trackBarPt.Orientation = Orientation.Vertical;
        this.trackBarPt.Size = new Size(0x2d, 110);
        this.trackBarPt.SmallChange = 50;
        this.trackBarPt.TabIndex = 0x55;
        this.trackBarPt.TickStyle = TickStyle.Both;
        this.trackBarPt.Value = 5;
        this.trackBarPt.Scroll += new EventHandler(this.trackBarPt_Scroll);
        this.colorSliderPt.BackColor = Color.Transparent;
        this.colorSliderPt.BarPenColor = Color.Transparent;
        this.colorSliderPt.BorderRoundRectSize = new Size(8, 8);
        this.colorSliderPt.LargeChange = 0x3e8;
        this.colorSliderPt.Location = new Point(0xb1, 0x39);
        this.colorSliderPt.Maximum = 5;
        this.colorSliderPt.Minimum = 1;
        this.colorSliderPt.Name = "colorSliderPt";
        this.colorSliderPt.Orientation = Orientation.Vertical;
        this.colorSliderPt.Size = new Size(0x4e, 90);
        this.colorSliderPt.SmallChange = 1;
        this.colorSliderPt.TabIndex = 0x54;
        this.colorSliderPt.Text = "colorSlider6";
        this.colorSliderPt.ThumbRoundRectSize = new Size(10, 10);
        this.colorSliderPt.ThumbSize = 10;
        this.colorSliderPt.Value = 5;
        this.colorSliderPt.Scroll += new ScrollEventHandler(this.colorSliderPt_Scroll);
        this.buttonPtStop.Font = new Font("宋体", 10f);
        this.buttonPtStop.Location = new Point(0xd1, 0xed);
        this.buttonPtStop.Name = "buttonPtStop";
        this.buttonPtStop.Size = new Size(0x3e, 0x17);
        this.buttonPtStop.TabIndex = 40;
        this.buttonPtStop.Text = "停 止";
        this.buttonPtStop.UseVisualStyleBackColor = true;
        this.buttonPtStop.Click += new EventHandler(this.buttonPtStop_Click);
        this.buttonPtCa.ContextMenuStrip = this.PTcontextMenuText;
        this.buttonPtCa.Enabled = false;
        this.buttonPtCa.Font = new Font("宋体", 10f);
        this.buttonPtCa.Location = new Point(0x90, 0xac);
        this.buttonPtCa.Name = "buttonPtCa";
        this.buttonPtCa.Size = new Size(0x3e, 0x17);
        this.buttonPtCa.TabIndex = 0x35;
        this.buttonPtCa.Text = "校 准";
        this.buttonPtCa.UseVisualStyleBackColor = true;
        this.buttonPtCa.Click += new EventHandler(this.buttonPtCa_Click);
        this.buttonPtCW.Font = new Font("宋体", 10f);
        this.buttonPtCW.Location = new Point(0xd1, 0xac);
        this.buttonPtCW.Name = "buttonPtCW";
        this.buttonPtCW.Size = new Size(0x3e, 0x17);
        this.buttonPtCW.TabIndex = 0x27;
        this.buttonPtCW.Text = "向 前";
        this.buttonPtCW.UseVisualStyleBackColor = true;
        this.buttonPtCW.Click += new EventHandler(this.buttonPtCW_Click);
        this.label64.AutoSize = true;
        this.label64.Font = new Font("宋体", 10f);
        this.label64.Location = new Point(11, 0xb0);
        this.label64.Name = "label64";
        this.label64.Size = new Size(0x3f, 14);
        this.label64.TabIndex = 0x13;
        this.label64.Text = "当前位置";
        this.labelPtV.AutoSize = true;
        this.labelPtV.Font = new Font("宋体", 10f);
        this.labelPtV.Location = new Point(0xbb, 0x21);
        this.labelPtV.Name = "labelPtV";
        this.labelPtV.Size = new Size(70, 14);
        this.labelPtV.TabIndex = 0x33;
        this.labelPtV.Text = "10.0mm/秒";
        this.buttonPtYD.Font = new Font("宋体", 10f);
        this.buttonPtYD.Location = new Point(0x90, 0xcd);
        this.buttonPtYD.Name = "buttonPtYD";
        this.buttonPtYD.Size = new Size(0x3e, 0x17);
        this.buttonPtYD.TabIndex = 0x26;
        this.buttonPtYD.Text = "引 导";
        this.buttonPtYD.UseVisualStyleBackColor = true;
        this.buttonPtYD.Click += new EventHandler(this.buttonPtYD_Click);
        this.textBoxPtYD.Location = new Point(0x4b, 0xcb);
        this.textBoxPtYD.Name = "textBoxPtYD";
        this.textBoxPtYD.Size = new Size(0x3e, 0x1a);
        this.textBoxPtYD.TabIndex = 0x16;
        this.textBoxPtYD.Text = "30";
        this.textBoxPtYD.TextAlign = HorizontalAlignment.Center;
        this.buttonPtDW.Font = new Font("宋体", 10f);
        this.buttonPtDW.Location = new Point(0x90, 0xed);
        this.buttonPtDW.Name = "buttonPtDW";
        this.buttonPtDW.Size = new Size(0x3e, 0x17);
        this.buttonPtDW.TabIndex = 50;
        this.buttonPtDW.Text = "定 位";
        this.buttonPtDW.UseVisualStyleBackColor = true;
        this.buttonPtDW.Click += new EventHandler(this.buttonPtDW_Click);
        this.buttonPtCCW.Font = new Font("宋体", 10f);
        this.buttonPtCCW.Location = new Point(0xd1, 0xcd);
        this.buttonPtCCW.Name = "buttonPtCCW";
        this.buttonPtCCW.Size = new Size(0x3e, 0x17);
        this.buttonPtCCW.TabIndex = 0x29;
        this.buttonPtCCW.Text = "向 后";
        this.buttonPtCCW.UseVisualStyleBackColor = true;
        this.buttonPtCCW.Click += new EventHandler(this.buttonPtCCW_Click);
        this.textBoxPtAngle.BackColor = Color.Wheat;
        this.textBoxPtAngle.ForeColor = SystemColors.WindowText;
        this.textBoxPtAngle.Location = new Point(0x4b, 170);
        this.textBoxPtAngle.Name = "textBoxPtAngle";
        this.textBoxPtAngle.ReadOnly = true;
        this.textBoxPtAngle.Size = new Size(0x3e, 0x1a);
        this.textBoxPtAngle.TabIndex = 20;
        this.textBoxPtAngle.Text = "0.00";
        this.textBoxPtAngle.TextAlign = HorizontalAlignment.Center;
        this.label38.AutoSize = true;
        this.label38.Font = new Font("宋体", 10f);
        this.label38.Location = new Point(11, 0xf1);
        this.label38.Name = "label38";
        this.label38.Size = new Size(0x3f, 14);
        this.label38.TabIndex = 0x30;
        this.label38.Text = "定位位置";
        this.label63.AutoSize = true;
        this.label63.Font = new Font("宋体", 10f);
        this.label63.Location = new Point(11, 0xd1);
        this.label63.Name = "label63";
        this.label63.Size = new Size(0x3f, 14);
        this.label63.TabIndex = 0x15;
        this.label63.Text = "引导位置";
        this.textBoxPtDW.Location = new Point(0x4b, 0xeb);
        this.textBoxPtDW.Name = "textBoxPtDW";
        this.textBoxPtDW.Size = new Size(0x3e, 0x1a);
        this.textBoxPtDW.TabIndex = 0x31;
        this.textBoxPtDW.Text = "30";
        this.textBoxPtDW.TextAlign = HorizontalAlignment.Center;
        this.groupBoxRv.BackgroundColor = Color.White;
        this.groupBoxRv.BackgroundGradientColor = Color.White;
        this.groupBoxRv.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.groupBoxRv.BorderColor = Color.Black;
        this.groupBoxRv.BorderThickness = 1f;
        this.groupBoxRv.Controls.Add(this.buttonRvXL);
        this.groupBoxRv.Controls.Add(this.label32);
        this.groupBoxRv.Controls.Add(this.label33);
        this.groupBoxRv.Controls.Add(this.labelRvLimTop);
        this.groupBoxRv.Controls.Add(this.labelRvLimDn);
        this.groupBoxRv.Controls.Add(this.trackBarRv);
        this.groupBoxRv.Controls.Add(this.colorSliderRv);
        this.groupBoxRv.Controls.Add(this.buttonRvYD);
        this.groupBoxRv.Controls.Add(this.textBoxRvAngle);
        this.groupBoxRv.Controls.Add(this.buttonRvCa);
        this.groupBoxRv.Controls.Add(this.textBoxRvYD);
        this.groupBoxRv.Controls.Add(this.labelRvV);
        this.groupBoxRv.Controls.Add(this.textBoxRvDW);
        this.groupBoxRv.Controls.Add(this.label73);
        this.groupBoxRv.Controls.Add(this.buttonRvStop);
        this.groupBoxRv.Controls.Add(this.pictureBoxRv);
        this.groupBoxRv.Controls.Add(this.buttonRvCCW);
        this.groupBoxRv.Controls.Add(this.buttonRvDW);
        this.groupBoxRv.Controls.Add(this.label72);
        this.groupBoxRv.Controls.Add(this.buttonRvCW);
        this.groupBoxRv.Controls.Add(this.label66);
        this.groupBoxRv.CustomGroupBoxColor = Color.White;
        this.groupBoxRv.GroupImage = null;
        this.groupBoxRv.GroupTitle = "接收极化轴";
        this.groupBoxRv.Location = new Point(5, 2);
        this.groupBoxRv.Name = "groupBoxRv";
        this.groupBoxRv.Padding = new Padding(20);
        this.groupBoxRv.PaintGroupBox = false;
        this.groupBoxRv.RoundCorners = 10;
        this.groupBoxRv.ShadowColor = Color.DarkGray;
        this.groupBoxRv.ShadowControl = true;
        this.groupBoxRv.ShadowThickness = 3;
        this.groupBoxRv.Size = new Size(0x11d, 0x110);
        this.groupBoxRv.TabIndex = 0x51;
        this.buttonRvXL.Font = new Font("宋体", 10f);
        this.buttonRvXL.Location = new Point(0xd1, 0x9f);
        this.buttonRvXL.Name = "buttonRvXL";
        this.buttonRvXL.Size = new Size(0x3e, 0x17);
        this.buttonRvXL.TabIndex = 0x65;
        this.buttonRvXL.Text = "寻 零";
        this.buttonRvXL.UseVisualStyleBackColor = true;
        this.buttonRvXL.Click += new EventHandler(this.buttonRvXL_Click);
        this.label32.AutoSize = true;
        this.label32.Font = new Font("宋体", 10f);
        this.label32.Location = new Point(0x87, 0x1b);
        this.label32.Name = "label32";
        this.label32.Size = new Size(0x23, 14);
        this.label32.TabIndex = 100;
        this.label32.Text = "上限";
        this.label32.Visible = false;
        this.label33.AutoSize = true;
        this.label33.Font = new Font("宋体", 10f);
        this.label33.Location = new Point(0x10, 0x1b);
        this.label33.Name = "label33";
        this.label33.Size = new Size(0x23, 14);
        this.label33.TabIndex = 0x63;
        this.label33.Text = "下限";
        this.label33.Visible = false;
        this.labelRvLimTop.BackColor = Color.GreenYellow;
        this.labelRvLimTop.Location = new Point(0x8e, 0x2a);
        this.labelRvLimTop.Name = "labelRvLimTop";
        this.labelRvLimTop.Size = new Size(40, 40);
        this.labelRvLimTop.TabIndex = 90;
        this.labelRvLimTop.TabStop = false;
        this.labelRvLimTop.Visible = false;
        this.labelRvLimDn.BackColor = Color.GreenYellow;
        this.labelRvLimDn.Location = new Point(0x17, 0x2a);
        this.labelRvLimDn.Name = "labelRvLimDn";
        this.labelRvLimDn.Size = new Size(40, 40);
        this.labelRvLimDn.TabIndex = 0x59;
        this.labelRvLimDn.TabStop = false;
        this.labelRvLimDn.Visible = false;
        this.trackBarRv.BackColor = Color.White;
        this.trackBarRv.LargeChange = 1;
        this.trackBarRv.Location = new Point(0xc2, 0x30);
        this.trackBarRv.Maximum = 9;
        this.trackBarRv.Minimum = 1;
        this.trackBarRv.Name = "trackBarRv";
        this.trackBarRv.Orientation = Orientation.Vertical;
        this.trackBarRv.Size = new Size(0x2d, 110);
        this.trackBarRv.SmallChange = 50;
        this.trackBarRv.TabIndex = 0x55;
        this.trackBarRv.TickStyle = TickStyle.Both;
        this.trackBarRv.Value = 5;
        this.trackBarRv.Scroll += new EventHandler(this.trackBarRv_Scroll);
        this.colorSliderRv.BackColor = Color.Transparent;
        this.colorSliderRv.BarPenColor = Color.Transparent;
        this.colorSliderRv.BorderRoundRectSize = new Size(8, 8);
        this.colorSliderRv.LargeChange = 0x3e8;
        this.colorSliderRv.Location = new Point(0xb1, 0x39);
        this.colorSliderRv.Maximum = 9;
        this.colorSliderRv.Minimum = 1;
        this.colorSliderRv.Name = "colorSliderRv";
        this.colorSliderRv.Orientation = Orientation.Vertical;
        this.colorSliderRv.Size = new Size(0x4e, 90);
        this.colorSliderRv.SmallChange = 1;
        this.colorSliderRv.TabIndex = 0x54;
        this.colorSliderRv.Text = "colorSlider5";
        this.colorSliderRv.ThumbRoundRectSize = new Size(10, 10);
        this.colorSliderRv.ThumbSize = 10;
        this.colorSliderRv.Value = 5;
        this.colorSliderRv.Scroll += new ScrollEventHandler(this.colorSliderRv_Scroll);
        this.buttonRvYD.Font = new Font("宋体", 10f);
        this.buttonRvYD.Location = new Point(0x90, 0xd5);
        this.buttonRvYD.Name = "buttonRvYD";
        this.buttonRvYD.Size = new Size(0x3e, 0x17);
        this.buttonRvYD.TabIndex = 0x26;
        this.buttonRvYD.Text = "引 导";
        this.buttonRvYD.UseVisualStyleBackColor = true;
        this.buttonRvYD.Click += new EventHandler(this.buttonRvYD_Click);
        this.textBoxRvAngle.BackColor = Color.Wheat;
        this.textBoxRvAngle.ForeColor = SystemColors.WindowText;
        this.textBoxRvAngle.Location = new Point(0x4b, 170);
        this.textBoxRvAngle.Name = "textBoxRvAngle";
        this.textBoxRvAngle.ReadOnly = true;
        this.textBoxRvAngle.Size = new Size(0x3e, 0x1a);
        this.textBoxRvAngle.TabIndex = 20;
        this.textBoxRvAngle.Text = "0.00";
        this.textBoxRvAngle.TextAlign = HorizontalAlignment.Center;
        this.buttonRvCa.ContextMenuStrip = this.RVcontextMenuText;
        this.buttonRvCa.Enabled = false;
        this.buttonRvCa.Font = new Font("宋体", 10f);
        this.buttonRvCa.Location = new Point(0x90, 0x9f);
        this.buttonRvCa.Name = "buttonRvCa";
        this.buttonRvCa.Size = new Size(0x3e, 0x33);
        this.buttonRvCa.TabIndex = 0x35;
        this.buttonRvCa.Text = "校 准";
        this.buttonRvCa.UseVisualStyleBackColor = true;
        this.buttonRvCa.Click += new EventHandler(this.buttonRvCa_Click);
        this.textBoxRvYD.Location = new Point(0x4b, 0xcb);
        this.textBoxRvYD.Name = "textBoxRvYD";
        this.textBoxRvYD.Size = new Size(0x3e, 0x1a);
        this.textBoxRvYD.TabIndex = 0x16;
        this.textBoxRvYD.Text = "30";
        this.textBoxRvYD.TextAlign = HorizontalAlignment.Center;
        this.labelRvV.AutoSize = true;
        this.labelRvV.Font = new Font("宋体", 10f);
        this.labelRvV.Location = new Point(0xbb, 0x21);
        this.labelRvV.Name = "labelRvV";
        this.labelRvV.Size = new Size(0x3f, 14);
        this.labelRvV.TabIndex = 0x33;
        this.labelRvV.Text = "4.0度/秒";
        this.textBoxRvDW.Location = new Point(0x4b, 0xeb);
        this.textBoxRvDW.Name = "textBoxRvDW";
        this.textBoxRvDW.Size = new Size(0x3e, 0x1a);
        this.textBoxRvDW.TabIndex = 0x31;
        this.textBoxRvDW.Text = "0";
        this.textBoxRvDW.TextAlign = HorizontalAlignment.Center;
        this.label73.AutoSize = true;
        this.label73.Font = new Font("宋体", 10f);
        this.label73.Location = new Point(11, 0xb0);
        this.label73.Name = "label73";
        this.label73.Size = new Size(0x3f, 14);
        this.label73.TabIndex = 0x13;
        this.label73.Text = "当前角度";
        this.buttonRvStop.Font = new Font("宋体", 10f);
        this.buttonRvStop.Location = new Point(0xd1, 240);
        this.buttonRvStop.Name = "buttonRvStop";
        this.buttonRvStop.Size = new Size(0x3e, 0x17);
        this.buttonRvStop.TabIndex = 40;
        this.buttonRvStop.Text = "停 止";
        this.buttonRvStop.UseVisualStyleBackColor = true;
        this.buttonRvStop.Click += new EventHandler(this.buttonRvStop_Click);
        this.pictureBoxRv.BackgroundImageLayout = ImageLayout.Zoom;
        this.pictureBoxRv.Location = new Point(0x23, 0x25);
        this.pictureBoxRv.Name = "pictureBoxRv";
        this.pictureBoxRv.Size = new Size(120, 120);
        this.pictureBoxRv.TabIndex = 0;
        this.pictureBoxRv.TabStop = false;
        this.buttonRvCCW.Font = new Font("宋体", 10f);
        this.buttonRvCCW.Location = new Point(0xd1, 0xd5);
        this.buttonRvCCW.Name = "buttonRvCCW";
        this.buttonRvCCW.Size = new Size(0x3e, 0x17);
        this.buttonRvCCW.TabIndex = 0x29;
        this.buttonRvCCW.Text = "逆 转";
        this.buttonRvCCW.UseVisualStyleBackColor = true;
        this.buttonRvCCW.Click += new EventHandler(this.buttonRvCCW_Click);
        this.buttonRvDW.Font = new Font("宋体", 10f);
        this.buttonRvDW.Location = new Point(0x90, 240);
        this.buttonRvDW.Name = "buttonRvDW";
        this.buttonRvDW.Size = new Size(0x3e, 0x17);
        this.buttonRvDW.TabIndex = 50;
        this.buttonRvDW.Text = "定 位";
        this.buttonRvDW.UseVisualStyleBackColor = true;
        this.buttonRvDW.Click += new EventHandler(this.buttonRvDW_Click);
        this.label72.AutoSize = true;
        this.label72.Font = new Font("宋体", 10f);
        this.label72.Location = new Point(11, 0xd1);
        this.label72.Name = "label72";
        this.label72.Size = new Size(0x3f, 14);
        this.label72.TabIndex = 0x15;
        this.label72.Text = "引导角度";
        this.buttonRvCW.Font = new Font("宋体", 10f);
        this.buttonRvCW.Location = new Point(0xd1, 0xba);
        this.buttonRvCW.Name = "buttonRvCW";
        this.buttonRvCW.Size = new Size(0x3e, 0x17);
        this.buttonRvCW.TabIndex = 0x27;
        this.buttonRvCW.Text = "顺 转";
        this.buttonRvCW.UseVisualStyleBackColor = true;
        this.buttonRvCW.Click += new EventHandler(this.buttonRvCW_Click);
        this.label66.AutoSize = true;
        this.label66.Font = new Font("宋体", 10f);
        this.label66.Location = new Point(11, 0xf1);
        this.label66.Name = "label66";
        this.label66.Size = new Size(0x3f, 14);
        this.label66.TabIndex = 0x30;
        this.label66.Text = "定位角度";
        this.groupBoxDn.BackgroundColor = Color.White;
        this.groupBoxDn.BackgroundGradientColor = Color.White;
        this.groupBoxDn.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.groupBoxDn.BorderColor = Color.Black;
        this.groupBoxDn.BorderThickness = 1f;
        this.groupBoxDn.Controls.Add(this.progressBarEx1);
        this.groupBoxDn.Controls.Add(this.label30);
        this.groupBoxDn.Controls.Add(this.label31);
        this.groupBoxDn.Controls.Add(this.labelDnLimTop);
        this.groupBoxDn.Controls.Add(this.labelDnLimDn);
        this.groupBoxDn.Controls.Add(this.trackBarDn);
        this.groupBoxDn.Controls.Add(this.colorSliderDn);
        this.groupBoxDn.Controls.Add(this.textBoxDnDW);
        this.groupBoxDn.Controls.Add(this.buttonDnYD);
        this.groupBoxDn.Controls.Add(this.textBoxDnYD);
        this.groupBoxDn.Controls.Add(this.textBoxDnAngle);
        this.groupBoxDn.Controls.Add(this.buttonDnCW);
        this.groupBoxDn.Controls.Add(this.buttonDnStop);
        this.groupBoxDn.Controls.Add(this.buttonDnCa);
        this.groupBoxDn.Controls.Add(this.buttonDnCCW);
        this.groupBoxDn.Controls.Add(this.labelDnV);
        this.groupBoxDn.Controls.Add(this.label20);
        this.groupBoxDn.Controls.Add(this.label27);
        this.groupBoxDn.Controls.Add(this.label26);
        this.groupBoxDn.Controls.Add(this.buttonDnDW);
        this.groupBoxDn.CustomGroupBoxColor = Color.White;
        this.groupBoxDn.GroupImage = null;
        this.groupBoxDn.GroupTitle = "X平移轴";
        this.groupBoxDn.Location = new Point(0x128, 2);
        this.groupBoxDn.Name = "groupBoxDn";
        this.groupBoxDn.Padding = new Padding(20);
        this.groupBoxDn.PaintGroupBox = false;
        this.groupBoxDn.RoundCorners = 10;
        this.groupBoxDn.ShadowColor = Color.DarkGray;
        this.groupBoxDn.ShadowControl = true;
        this.groupBoxDn.ShadowThickness = 3;
        this.groupBoxDn.Size = new Size(0x11d, 0x110);
        this.groupBoxDn.TabIndex = 80;
        this.progressBarEx1.Location = new Point(14, 0x4d);
        this.progressBarEx1.MarqueePercentage = 0x19;
        this.progressBarEx1.MarqueeSpeed = 30;
        this.progressBarEx1.MarqueeStep = 1;
        this.progressBarEx1.Maximum = 500;
        this.progressBarEx1.Minimum = 0;
        this.progressBarEx1.Name = "progressBarEx1";
        this.progressBarEx1.ProgressPadding = 0;
        this.progressBarEx1.ProgressType = ProgressType.Smooth;
        this.progressBarEx1.ShowPercentage = false;
        this.progressBarEx1.Size = new Size(0xa8, 0x34);
        this.progressBarEx1.TabIndex = 0x63;
        this.progressBarEx1.Value = 10;
        this.progressBarEx1.Visible = false;
        this.label30.AutoSize = true;
        this.label30.Font = new Font("宋体", 10f);
        this.label30.Location = new Point(0x87, 0x1b);
        this.label30.Name = "label30";
        this.label30.Size = new Size(0x23, 14);
        this.label30.TabIndex = 0x62;
        this.label30.Text = "左限";
        this.label31.AutoSize = true;
        this.label31.Font = new Font("宋体", 10f);
        this.label31.Location = new Point(0x10, 0x1b);
        this.label31.Name = "label31";
        this.label31.Size = new Size(0x23, 14);
        this.label31.TabIndex = 0x61;
        this.label31.Text = "右限";
        this.labelDnLimTop.BackColor = Color.GreenYellow;
        this.labelDnLimTop.Location = new Point(0x8e, 0x2a);
        this.labelDnLimTop.Name = "labelDnLimTop";
        this.labelDnLimTop.Size = new Size(40, 40);
        this.labelDnLimTop.TabIndex = 90;
        this.labelDnLimTop.TabStop = false;
        this.labelDnLimDn.BackColor = Color.GreenYellow;
        this.labelDnLimDn.Location = new Point(0x17, 0x2a);
        this.labelDnLimDn.Name = "labelDnLimDn";
        this.labelDnLimDn.Size = new Size(40, 40);
        this.labelDnLimDn.TabIndex = 0x59;
        this.labelDnLimDn.TabStop = false;
        this.trackBarDn.BackColor = Color.White;
        this.trackBarDn.LargeChange = 1;
        this.trackBarDn.Location = new Point(0xc2, 0x30);
        this.trackBarDn.Maximum = 5;
        this.trackBarDn.Minimum = 1;
        this.trackBarDn.Name = "trackBarDn";
        this.trackBarDn.Orientation = Orientation.Vertical;
        this.trackBarDn.Size = new Size(0x2d, 110);
        this.trackBarDn.SmallChange = 10;
        this.trackBarDn.TabIndex = 0x54;
        this.trackBarDn.TickStyle = TickStyle.Both;
        this.trackBarDn.Value = 5;
        this.trackBarDn.Scroll += new EventHandler(this.trackBarDn_Scroll);
        this.colorSliderDn.BackColor = Color.Transparent;
        this.colorSliderDn.BarPenColor = Color.Transparent;
        this.colorSliderDn.BorderRoundRectSize = new Size(8, 8);
        this.colorSliderDn.LargeChange = 0x3e8;
        this.colorSliderDn.Location = new Point(0xb1, 0x39);
        this.colorSliderDn.Maximum = 5;
        this.colorSliderDn.Minimum = 1;
        this.colorSliderDn.Name = "colorSliderDn";
        this.colorSliderDn.Orientation = Orientation.Vertical;
        this.colorSliderDn.Size = new Size(0x4e, 90);
        this.colorSliderDn.SmallChange = 1;
        this.colorSliderDn.TabIndex = 0x53;
        this.colorSliderDn.Text = "colorSlider4";
        this.colorSliderDn.ThumbRoundRectSize = new Size(10, 10);
        this.colorSliderDn.ThumbSize = 10;
        this.colorSliderDn.Value = 5;
        this.colorSliderDn.Scroll += new ScrollEventHandler(this.colorSliderDn_Scroll);
        this.textBoxDnDW.Location = new Point(0x4b, 0xeb);
        this.textBoxDnDW.Name = "textBoxDnDW";
        this.textBoxDnDW.Size = new Size(0x3e, 0x1a);
        this.textBoxDnDW.TabIndex = 0x3e;
        this.textBoxDnDW.Text = "0";
        this.textBoxDnDW.TextAlign = HorizontalAlignment.Center;
        this.buttonDnYD.Font = new Font("宋体", 10f);
        this.buttonDnYD.Location = new Point(0x90, 0xcd);
        this.buttonDnYD.Name = "buttonDnYD";
        this.buttonDnYD.Size = new Size(0x3e, 0x17);
        this.buttonDnYD.TabIndex = 0x26;
        this.buttonDnYD.Text = "引 导";
        this.buttonDnYD.UseVisualStyleBackColor = true;
        this.buttonDnYD.Click += new EventHandler(this.buttonDnYD_Click);
        this.textBoxDnYD.Location = new Point(0x4b, 0xcb);
        this.textBoxDnYD.Name = "textBoxDnYD";
        this.textBoxDnYD.Size = new Size(0x3e, 0x1a);
        this.textBoxDnYD.TabIndex = 0x3d;
        this.textBoxDnYD.Text = "30";
        this.textBoxDnYD.TextAlign = HorizontalAlignment.Center;
        this.textBoxDnAngle.BackColor = Color.Wheat;
        this.textBoxDnAngle.ForeColor = SystemColors.WindowText;
        this.textBoxDnAngle.Location = new Point(0x4b, 170);
        this.textBoxDnAngle.Name = "textBoxDnAngle";
        this.textBoxDnAngle.ReadOnly = true;
        this.textBoxDnAngle.Size = new Size(0x3e, 0x1a);
        this.textBoxDnAngle.TabIndex = 60;
        this.textBoxDnAngle.Text = "0.00";
        this.textBoxDnAngle.TextAlign = HorizontalAlignment.Center;
        this.buttonDnCW.Font = new Font("宋体", 10f);
        this.buttonDnCW.Location = new Point(0xd1, 0xac);
        this.buttonDnCW.Name = "buttonDnCW";
        this.buttonDnCW.Size = new Size(0x3e, 0x17);
        this.buttonDnCW.TabIndex = 0x27;
        this.buttonDnCW.Text = "向 左";
        this.buttonDnCW.UseVisualStyleBackColor = true;
        this.buttonDnCW.Click += new EventHandler(this.buttonDnCW_Click);
        this.buttonDnStop.Font = new Font("宋体", 10f);
        this.buttonDnStop.Location = new Point(0xd1, 0xed);
        this.buttonDnStop.Name = "buttonDnStop";
        this.buttonDnStop.Size = new Size(0x3e, 0x17);
        this.buttonDnStop.TabIndex = 40;
        this.buttonDnStop.Text = "停 止";
        this.buttonDnStop.UseVisualStyleBackColor = true;
        this.buttonDnStop.Click += new EventHandler(this.buttonDnStop_Click);
        this.buttonDnCa.ContextMenuStrip = this.DNcontextMenuText;
        this.buttonDnCa.Enabled = false;
        this.buttonDnCa.Font = new Font("宋体", 10f);
        this.buttonDnCa.Location = new Point(0x90, 0xac);
        this.buttonDnCa.Name = "buttonDnCa";
        this.buttonDnCa.Size = new Size(0x3e, 0x17);
        this.buttonDnCa.TabIndex = 0x35;
        this.buttonDnCa.Text = "校 准";
        this.buttonDnCa.UseVisualStyleBackColor = true;
        this.buttonDnCa.Click += new EventHandler(this.buttonDnCa_Click);
        this.buttonDnCCW.Font = new Font("宋体", 10f);
        this.buttonDnCCW.Location = new Point(0xd1, 0xcd);
        this.buttonDnCCW.Name = "buttonDnCCW";
        this.buttonDnCCW.Size = new Size(0x3e, 0x17);
        this.buttonDnCCW.TabIndex = 0x29;
        this.buttonDnCCW.Text = "向 右";
        this.buttonDnCCW.UseVisualStyleBackColor = true;
        this.buttonDnCCW.Click += new EventHandler(this.buttonDnCCW_Click);
        this.labelDnV.AutoSize = true;
        this.labelDnV.Font = new Font("宋体", 10f);
        this.labelDnV.Location = new Point(0xbb, 0x21);
        this.labelDnV.Name = "labelDnV";
        this.labelDnV.Size = new Size(70, 14);
        this.labelDnV.TabIndex = 0x33;
        this.labelDnV.Text = "10.0mm/秒";
        this.label20.AutoSize = true;
        this.label20.Font = new Font("宋体", 10f);
        this.label20.Location = new Point(11, 0xf1);
        this.label20.Name = "label20";
        this.label20.Size = new Size(0x3f, 14);
        this.label20.TabIndex = 0x30;
        this.label20.Text = "定位位置";
        this.label27.AutoSize = true;
        this.label27.Font = new Font("宋体", 10f);
        this.label27.Location = new Point(11, 0xb0);
        this.label27.Name = "label27";
        this.label27.Size = new Size(0x3f, 14);
        this.label27.TabIndex = 0x13;
        this.label27.Text = "当前位置";
        this.label26.AutoSize = true;
        this.label26.Font = new Font("宋体", 10f);
        this.label26.Location = new Point(11, 0xd1);
        this.label26.Name = "label26";
        this.label26.Size = new Size(0x3f, 14);
        this.label26.TabIndex = 0x15;
        this.label26.Text = "引导位置";
        this.buttonDnDW.Font = new Font("宋体", 10f);
        this.buttonDnDW.Location = new Point(0x90, 0xed);
        this.buttonDnDW.Name = "buttonDnDW";
        this.buttonDnDW.Size = new Size(0x3e, 0x17);
        this.buttonDnDW.TabIndex = 50;
        this.buttonDnDW.Text = "定 位";
        this.buttonDnDW.UseVisualStyleBackColor = true;
        this.buttonDnDW.Click += new EventHandler(this.buttonDnDW_Click);
        this.tabPage3.BackColor = Color.White;
        this.tabPage3.Controls.Add(this.grouper3);
        this.tabPage3.Controls.Add(this.groupBoxSearchMax);
        this.tabPage3.Controls.Add(this.groupBoxElAuto);
        this.tabPage3.Controls.Add(this.groupBoxTimer);
        this.tabPage3.Location = new Point(4, 4);
        this.tabPage3.Name = "tabPage3";
        this.tabPage3.Padding = new Padding(3);
        this.tabPage3.Size = new Size(0x368, 0x119);
        this.tabPage3.TabIndex = 2;
        this.tabPage3.Text = "发射升降";
        this.tabPage3.UseVisualStyleBackColor = true;
        this.grouper3.BackgroundColor = Color.White;
        this.grouper3.BackgroundGradientColor = Color.White;
        this.grouper3.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.grouper3.BorderColor = Color.Black;
        this.grouper3.BorderThickness = 1f;
        this.grouper3.Controls.Add(this.colorSlider1);
        this.grouper3.Controls.Add(this.label40);
        this.grouper3.Controls.Add(this.label45);
        this.grouper3.Controls.Add(this.labelFsLimTop);
        this.grouper3.Controls.Add(this.labelFsLimUP);
        this.grouper3.Controls.Add(this.trackBarFS);
        this.grouper3.Controls.Add(this.colorSliderFS);
        this.grouper3.Controls.Add(this.buttonFsStop);
        this.grouper3.Controls.Add(this.buttonFsCa);
        this.grouper3.Controls.Add(this.buttonFsCw);
        this.grouper3.Controls.Add(this.label48);
        this.grouper3.Controls.Add(this.labelFsV);
        this.grouper3.Controls.Add(this.buttonFsYD);
        this.grouper3.Controls.Add(this.textBoxFsYD);
        this.grouper3.Controls.Add(this.buttonFsDW);
        this.grouper3.Controls.Add(this.buttonFsCcw);
        this.grouper3.Controls.Add(this.textBoxFsAngle);
        this.grouper3.Controls.Add(this.label59);
        this.grouper3.Controls.Add(this.label60);
        this.grouper3.Controls.Add(this.textBoxFsDW);
        this.grouper3.CustomGroupBoxColor = Color.White;
        this.grouper3.GroupImage = null;
        this.grouper3.GroupTitle = "发射升降轴";
        this.grouper3.Location = new Point(6, 6);
        this.grouper3.Name = "grouper3";
        this.grouper3.Padding = new Padding(20);
        this.grouper3.PaintGroupBox = false;
        this.grouper3.RoundCorners = 10;
        this.grouper3.ShadowColor = Color.DarkGray;
        this.grouper3.ShadowControl = true;
        this.grouper3.ShadowThickness = 3;
        this.grouper3.Size = new Size(0x11d, 0x110);
        this.grouper3.TabIndex = 0x53;
        this.grouper3.Visible = false;
        this.colorSlider1.BackColor = Color.Transparent;
        this.colorSlider1.BarInnerColor = Color.Orchid;
        this.colorSlider1.BarOuterColor = Color.Pink;
        this.colorSlider1.BorderRoundRectSize = new Size(8, 8);
        this.colorSlider1.ElapsedInnerColor = Color.LawnGreen;
        this.colorSlider1.ElapsedOuterColor = Color.MistyRose;
        this.colorSlider1.LargeChange = 5;
        this.colorSlider1.Location = new Point(0x3b, 0x2a);
        this.colorSlider1.Maximum = 410;
        this.colorSlider1.Name = "colorSlider1";
        this.colorSlider1.Orientation = Orientation.Vertical;
        this.colorSlider1.Size = new Size(70, 0x6f);
        this.colorSlider1.SmallChange = 1;
        this.colorSlider1.TabIndex = 0x65;
        this.colorSlider1.ThumbRoundRectSize = new Size(8, 8);
        this.colorSlider1.Visible = false;
        this.label40.AutoSize = true;
        this.label40.Font = new Font("宋体", 10f);
        this.label40.Location = new Point(0x87, 0x1b);
        this.label40.Name = "label40";
        this.label40.Size = new Size(0x23, 14);
        this.label40.TabIndex = 100;
        this.label40.Text = "上限";
        this.label45.AutoSize = true;
        this.label45.Font = new Font("宋体", 10f);
        this.label45.Location = new Point(0x10, 0x1b);
        this.label45.Name = "label45";
        this.label45.Size = new Size(0x23, 14);
        this.label45.TabIndex = 0x63;
        this.label45.Text = "下限";
        this.labelFsLimTop.BackColor = Color.GreenYellow;
        this.labelFsLimTop.Location = new Point(0x8e, 0x2a);
        this.labelFsLimTop.Name = "labelFsLimTop";
        this.labelFsLimTop.Size = new Size(40, 40);
        this.labelFsLimTop.TabIndex = 90;
        this.labelFsLimTop.TabStop = false;
        this.labelFsLimUP.BackColor = Color.GreenYellow;
        this.labelFsLimUP.Location = new Point(0x17, 0x2a);
        this.labelFsLimUP.Name = "labelFsLimUP";
        this.labelFsLimUP.Size = new Size(40, 40);
        this.labelFsLimUP.TabIndex = 0x59;
        this.labelFsLimUP.TabStop = false;
        this.trackBarFS.BackColor = Color.White;
        this.trackBarFS.LargeChange = 1;
        this.trackBarFS.Location = new Point(190, 50);
        this.trackBarFS.Maximum = 5;
        this.trackBarFS.Minimum = 1;
        this.trackBarFS.Name = "trackBarFS";
        this.trackBarFS.Orientation = Orientation.Vertical;
        this.trackBarFS.Size = new Size(0x2d, 100);
        this.trackBarFS.SmallChange = 50;
        this.trackBarFS.TabIndex = 0x55;
        this.trackBarFS.TickStyle = TickStyle.Both;
        this.trackBarFS.Value = 5;
        this.trackBarFS.Scroll += new EventHandler(this.trackBarFS_Scroll);
        this.colorSliderFS.BackColor = Color.Transparent;
        this.colorSliderFS.BarPenColor = Color.Transparent;
        this.colorSliderFS.BorderRoundRectSize = new Size(8, 8);
        this.colorSliderFS.LargeChange = 0x3e8;
        this.colorSliderFS.Location = new Point(0xb1, 0x39);
        this.colorSliderFS.Maximum = 5;
        this.colorSliderFS.Minimum = 1;
        this.colorSliderFS.Name = "colorSliderFS";
        this.colorSliderFS.Orientation = Orientation.Vertical;
        this.colorSliderFS.Size = new Size(0x4e, 0x5d);
        this.colorSliderFS.SmallChange = 1;
        this.colorSliderFS.TabIndex = 0x54;
        this.colorSliderFS.Text = "colorSlider6";
        this.colorSliderFS.ThumbRoundRectSize = new Size(10, 10);
        this.colorSliderFS.ThumbSize = 10;
        this.colorSliderFS.Value = 5;
        this.buttonFsStop.Font = new Font("宋体", 10f);
        this.buttonFsStop.Location = new Point(0xd1, 0xed);
        this.buttonFsStop.Name = "buttonFsStop";
        this.buttonFsStop.Size = new Size(0x3e, 0x17);
        this.buttonFsStop.TabIndex = 40;
        this.buttonFsStop.Text = "停 止";
        this.buttonFsStop.UseVisualStyleBackColor = true;
        this.buttonFsStop.Click += new EventHandler(this.buttonFsStop_Click);
        this.buttonFsCa.ContextMenuStrip = this.FscontextMenuText;
        this.buttonFsCa.Enabled = false;
        this.buttonFsCa.Font = new Font("宋体", 10f);
        this.buttonFsCa.Location = new Point(0x90, 0xac);
        this.buttonFsCa.Name = "buttonFsCa";
        this.buttonFsCa.Size = new Size(0x3e, 0x17);
        this.buttonFsCa.TabIndex = 0x35;
        this.buttonFsCa.Text = "校 准";
        this.buttonFsCa.UseVisualStyleBackColor = true;
        this.buttonFsCa.Click += new EventHandler(this.buttonFsCa_Click);
        this.buttonFsCw.Font = new Font("宋体", 10f);
        this.buttonFsCw.Location = new Point(0xd1, 0xac);
        this.buttonFsCw.Name = "buttonFsCw";
        this.buttonFsCw.Size = new Size(0x3e, 0x17);
        this.buttonFsCw.TabIndex = 0x27;
        this.buttonFsCw.Text = "向 上";
        this.buttonFsCw.UseVisualStyleBackColor = true;
        this.buttonFsCw.Click += new EventHandler(this.buttonFsCw_Click);
        this.label48.AutoSize = true;
        this.label48.Font = new Font("宋体", 10f);
        this.label48.Location = new Point(11, 0xb0);
        this.label48.Name = "label48";
        this.label48.Size = new Size(0x3f, 14);
        this.label48.TabIndex = 0x13;
        this.label48.Text = "当前高度";
        this.labelFsV.AutoSize = true;
        this.labelFsV.Font = new Font("宋体", 10f);
        this.labelFsV.Location = new Point(0xbb, 0x21);
        this.labelFsV.Name = "labelFsV";
        this.labelFsV.Size = new Size(0x3f, 14);
        this.labelFsV.TabIndex = 0x33;
        this.labelFsV.Text = "2.0度/秒";
        this.buttonFsYD.Font = new Font("宋体", 10f);
        this.buttonFsYD.Location = new Point(0x90, 0xcd);
        this.buttonFsYD.Name = "buttonFsYD";
        this.buttonFsYD.Size = new Size(0x3e, 0x17);
        this.buttonFsYD.TabIndex = 0x26;
        this.buttonFsYD.Text = "引 导";
        this.buttonFsYD.UseVisualStyleBackColor = true;
        this.buttonFsYD.Click += new EventHandler(this.buttonFsYD_Click);
        this.textBoxFsYD.Location = new Point(0x4b, 0xcb);
        this.textBoxFsYD.Name = "textBoxFsYD";
        this.textBoxFsYD.Size = new Size(0x3e, 0x1a);
        this.textBoxFsYD.TabIndex = 0x16;
        this.textBoxFsYD.Text = "30";
        this.textBoxFsYD.TextAlign = HorizontalAlignment.Center;
        this.buttonFsDW.Font = new Font("宋体", 10f);
        this.buttonFsDW.Location = new Point(0x90, 0xed);
        this.buttonFsDW.Name = "buttonFsDW";
        this.buttonFsDW.Size = new Size(0x3e, 0x17);
        this.buttonFsDW.TabIndex = 50;
        this.buttonFsDW.Text = "定 位";
        this.buttonFsDW.UseVisualStyleBackColor = true;
        this.buttonFsDW.Click += new EventHandler(this.buttonFsDW_Click);
        this.buttonFsCcw.Font = new Font("宋体", 10f);
        this.buttonFsCcw.Location = new Point(0xd1, 0xcd);
        this.buttonFsCcw.Name = "buttonFsCcw";
        this.buttonFsCcw.Size = new Size(0x3e, 0x17);
        this.buttonFsCcw.TabIndex = 0x29;
        this.buttonFsCcw.Text = "向 下";
        this.buttonFsCcw.UseVisualStyleBackColor = true;
        this.buttonFsCcw.Click += new EventHandler(this.buttonFsCcw_Click);
        this.textBoxFsAngle.BackColor = Color.Wheat;
        this.textBoxFsAngle.ForeColor = SystemColors.WindowText;
        this.textBoxFsAngle.Location = new Point(0x4b, 170);
        this.textBoxFsAngle.Name = "textBoxFsAngle";
        this.textBoxFsAngle.ReadOnly = true;
        this.textBoxFsAngle.Size = new Size(0x3e, 0x1a);
        this.textBoxFsAngle.TabIndex = 20;
        this.textBoxFsAngle.Text = "0.00";
        this.textBoxFsAngle.TextAlign = HorizontalAlignment.Center;
        this.label59.AutoSize = true;
        this.label59.Font = new Font("宋体", 10f);
        this.label59.Location = new Point(11, 0xf1);
        this.label59.Name = "label59";
        this.label59.Size = new Size(0x3f, 14);
        this.label59.TabIndex = 0x30;
        this.label59.Text = "定位高度";
        this.label60.AutoSize = true;
        this.label60.Font = new Font("宋体", 10f);
        this.label60.Location = new Point(11, 0xd1);
        this.label60.Name = "label60";
        this.label60.Size = new Size(0x3f, 14);
        this.label60.TabIndex = 0x15;
        this.label60.Text = "引导高度";
        this.textBoxFsDW.Location = new Point(0x4b, 0xeb);
        this.textBoxFsDW.Name = "textBoxFsDW";
        this.textBoxFsDW.Size = new Size(0x3e, 0x1a);
        this.textBoxFsDW.TabIndex = 0x31;
        this.textBoxFsDW.Text = "30";
        this.textBoxFsDW.TextAlign = HorizontalAlignment.Center;
        this.groupBoxSearchMax.Controls.Add(this.textBox1);
        this.groupBoxSearchMax.Controls.Add(this.label44);
        this.groupBoxSearchMax.Controls.Add(this.comboBoxFreq1);
        this.groupBoxSearchMax.Controls.Add(this.label43);
        this.groupBoxSearchMax.Controls.Add(this.buttonSearchStop);
        this.groupBoxSearchMax.Controls.Add(this.buttonSearch);
        this.groupBoxSearchMax.Controls.Add(this.textBoxEL);
        this.groupBoxSearchMax.Location = new Point(0x19c, 0x61);
        this.groupBoxSearchMax.Name = "groupBoxSearchMax";
        this.groupBoxSearchMax.Size = new Size(0xbd, 0x6d);
        this.groupBoxSearchMax.TabIndex = 0x49;
        this.groupBoxSearchMax.TabStop = false;
        this.groupBoxSearchMax.Text = "寻找最大电平值";
        this.groupBoxSearchMax.Visible = false;
        this.textBox1.BackColor = Color.Wheat;
        this.textBox1.Enabled = false;
        this.textBox1.ForeColor = SystemColors.WindowText;
        this.textBox1.Location = new Point(0x8f, 0x17);
        this.textBox1.Name = "textBox1";
        this.textBox1.ReadOnly = true;
        this.textBox1.Size = new Size(0x29, 0x1a);
        this.textBox1.TabIndex = 0x4c;
        this.textBox1.Text = "0";
        this.textBox1.TextAlign = HorizontalAlignment.Center;
        this.label44.AutoSize = true;
        this.label44.Font = new Font("宋体", 10f);
        this.label44.ForeColor = Color.Black;
        this.label44.Location = new Point(4, 0x33);
        this.label44.Name = "label44";
        this.label44.Size = new Size(70, 14);
        this.label44.TabIndex = 0x4b;
        this.label44.Text = "当前电平:";
        this.comboBoxFreq1.Font = new Font("宋体", 10f);
        this.comboBoxFreq1.FormattingEnabled = true;
        this.comboBoxFreq1.Items.AddRange(new object[] { "请选择", "1", "2", "3", "4", "5", "6", "7", "8", "9" });
        this.comboBoxFreq1.Location = new Point(0x4a, 0x16);
        this.comboBoxFreq1.Name = "comboBoxFreq1";
        this.comboBoxFreq1.Size = new Size(0x3e, 0x15);
        this.comboBoxFreq1.TabIndex = 0x4a;
        this.comboBoxFreq1.Text = "请选择";
        this.comboBoxFreq1.SelectedIndexChanged += new EventHandler(this.comboBoxFreq1_SelectedIndexChanged);
        this.label43.AutoSize = true;
        this.label43.Font = new Font("宋体", 10f);
        this.label43.ForeColor = Color.Black;
        this.label43.Location = new Point(4, 0x19);
        this.label43.Name = "label43";
        this.label43.Size = new Size(70, 14);
        this.label43.TabIndex = 0x49;
        this.label43.Text = "频率下标:";
        this.buttonSearchStop.BackColor = SystemColors.Control;
        this.buttonSearchStop.Location = new Point(0x59, 0x4a);
        this.buttonSearchStop.Name = "buttonSearchStop";
        this.buttonSearchStop.Size = new Size(50, 30);
        this.buttonSearchStop.TabIndex = 0x48;
        this.buttonSearchStop.Text = "停止";
        this.buttonSearchStop.UseVisualStyleBackColor = false;
        this.buttonSearchStop.Click += new EventHandler(this.buttonSearchStop_Click);
        this.buttonSearch.BackColor = SystemColors.Control;
        this.buttonSearch.Location = new Point(0x1b, 0x4a);
        this.buttonSearch.Name = "buttonSearch";
        this.buttonSearch.Size = new Size(50, 30);
        this.buttonSearch.TabIndex = 0x47;
        this.buttonSearch.Text = "搜索";
        this.buttonSearch.UseVisualStyleBackColor = false;
        this.buttonSearch.Click += new EventHandler(this.buttonSearch_Click);
        this.textBoxEL.BackColor = Color.Wheat;
        this.textBoxEL.Enabled = false;
        this.textBoxEL.ForeColor = SystemColors.WindowText;
        this.textBoxEL.Location = new Point(0x51, 0x31);
        this.textBoxEL.Name = "textBoxEL";
        this.textBoxEL.ReadOnly = true;
        this.textBoxEL.Size = new Size(0x3e, 0x1a);
        this.textBoxEL.TabIndex = 70;
        this.textBoxEL.Text = "0.00";
        this.textBoxEL.TextAlign = HorizontalAlignment.Center;
        this.groupBoxElAuto.Controls.Add(this.buttonElUP);
        this.groupBoxElAuto.Controls.Add(this.buttonElAutoStop);
        this.groupBoxElAuto.Controls.Add(this.buttonElDN);
        this.groupBoxElAuto.Location = new Point(0x19c, 0x1d);
        this.groupBoxElAuto.Name = "groupBoxElAuto";
        this.groupBoxElAuto.Size = new Size(0xbd, 0x3a);
        this.groupBoxElAuto.TabIndex = 0x39;
        this.groupBoxElAuto.TabStop = false;
        this.groupBoxElAuto.Text = "俯仰自动化操作";
        this.groupBoxElAuto.Visible = false;
        this.buttonElUP.BackColor = SystemColors.Control;
        this.buttonElUP.Location = new Point(9, 20);
        this.buttonElUP.Name = "buttonElUP";
        this.buttonElUP.Size = new Size(50, 30);
        this.buttonElUP.TabIndex = 0x37;
        this.buttonElUP.Text = "升起";
        this.buttonElUP.UseVisualStyleBackColor = false;
        this.buttonElUP.Click += new EventHandler(this.buttonElUP_Click);
        this.buttonElAutoStop.BackColor = SystemColors.Control;
        this.buttonElAutoStop.Location = new Point(0x80, 20);
        this.buttonElAutoStop.Name = "buttonElAutoStop";
        this.buttonElAutoStop.Size = new Size(50, 30);
        this.buttonElAutoStop.TabIndex = 0x39;
        this.buttonElAutoStop.Text = "停止";
        this.buttonElAutoStop.UseVisualStyleBackColor = false;
        this.buttonElAutoStop.Click += new EventHandler(this.buttonElAutoStop_Click);
        this.buttonElDN.BackColor = SystemColors.Control;
        this.buttonElDN.Location = new Point(0x44, 20);
        this.buttonElDN.Name = "buttonElDN";
        this.buttonElDN.Size = new Size(50, 30);
        this.buttonElDN.TabIndex = 0x38;
        this.buttonElDN.Text = "放倒";
        this.buttonElDN.UseVisualStyleBackColor = false;
        this.buttonElDN.Click += new EventHandler(this.buttonElDN_Click);
        this.groupBoxTimer.Controls.Add(this.buttonSwep);
        this.groupBoxTimer.Controls.Add(this.button12);
        this.groupBoxTimer.Controls.Add(this.button13);
        this.groupBoxTimer.Controls.Add(this.button15);
        this.groupBoxTimer.Controls.Add(this.button14);
        this.groupBoxTimer.Controls.Add(this.comboBox3);
        this.groupBoxTimer.Controls.Add(this.label65);
        this.groupBoxTimer.Controls.Add(this.textBox4);
        this.groupBoxTimer.Controls.Add(this.textBox2);
        this.groupBoxTimer.Controls.Add(this.textBox3);
        this.groupBoxTimer.Controls.Add(this.label46);
        this.groupBoxTimer.Controls.Add(this.label47);
        this.groupBoxTimer.Controls.Add(this.button8);
        this.groupBoxTimer.Controls.Add(this.button9);
        this.groupBoxTimer.Controls.Add(this.button10);
        this.groupBoxTimer.Controls.Add(this.button11);
        this.groupBoxTimer.Font = new Font("宋体", 12f);
        this.groupBoxTimer.Location = new Point(0x269, 11);
        this.groupBoxTimer.Name = "groupBoxTimer";
        this.groupBoxTimer.Size = new Size(0xf9, 0xf3);
        this.groupBoxTimer.TabIndex = 0x48;
        this.groupBoxTimer.TabStop = false;
        this.groupBoxTimer.Text = "时域测试";
        this.groupBoxTimer.Visible = false;
        this.buttonSwep.BackColor = SystemColors.Control;
        this.buttonSwep.Font = new Font("宋体", 10f);
        this.buttonSwep.Location = new Point(0x9f, 0xd1);
        this.buttonSwep.Name = "buttonSwep";
        this.buttonSwep.Size = new Size(80, 0x1d);
        this.buttonSwep.TabIndex = 80;
        this.buttonSwep.Text = "连续扫描";
        this.buttonSwep.UseVisualStyleBackColor = false;
        this.buttonSwep.Visible = false;
        this.button12.Font = new Font("宋体", 12f);
        this.button12.Location = new Point(0x66, 0xbc);
        this.button12.Name = "button12";
        this.button12.Size = new Size(0x4b, 0x17);
        this.button12.TabIndex = 0x4f;
        this.button12.Text = "停 止";
        this.button12.UseVisualStyleBackColor = true;
        this.button12.Click += new EventHandler(this.button12_Click);
        this.button13.Enabled = false;
        this.button13.Font = new Font("宋体", 12f);
        this.button13.Location = new Point(8, 0xbc);
        this.button13.Name = "button13";
        this.button13.Size = new Size(0x4b, 0x17);
        this.button13.TabIndex = 0x4e;
        this.button13.Text = "测 试";
        this.button13.UseVisualStyleBackColor = true;
        this.button13.Click += new EventHandler(this.button13_Click);
        this.button15.Enabled = false;
        this.button15.Font = new Font("宋体", 12f);
        this.button15.Location = new Point(0x3b, 0xd9);
        this.button15.Name = "button15";
        this.button15.Size = new Size(0x5e, 0x17);
        this.button15.TabIndex = 0x4d;
        this.button15.Text = "读取数据";
        this.button15.UseVisualStyleBackColor = true;
        this.button15.Click += new EventHandler(this.button15_Click);
        this.button14.Font = new Font("宋体", 12f);
        this.button14.Location = new Point(6, 0x9a);
        this.button14.Name = "button14";
        this.button14.Size = new Size(110, 0x17);
        this.button14.TabIndex = 0x4d;
        this.button14.Text = "至测试起点";
        this.button14.UseVisualStyleBackColor = true;
        this.button14.Click += new EventHandler(this.button14_Click);
        this.comboBox3.Font = new Font("宋体", 12f);
        this.comboBox3.FormattingEnabled = true;
        this.comboBox3.Items.AddRange(new object[] { "361", "721" });
        this.comboBox3.Location = new Point(0x59, 0x5b);
        this.comboBox3.Name = "comboBox3";
        this.comboBox3.Size = new Size(0x40, 0x18);
        this.comboBox3.TabIndex = 0x4c;
        this.comboBox3.Text = "361";
        this.label65.AutoSize = true;
        this.label65.Font = new Font("宋体", 12f);
        this.label65.ForeColor = Color.Black;
        this.label65.Location = new Point(3, 0x5e);
        this.label65.Name = "label65";
        this.label65.Size = new Size(80, 0x10);
        this.label65.TabIndex = 0x4b;
        this.label65.Text = "内存点数:";
        this.textBox4.Font = new Font("宋体", 12f);
        this.textBox4.Location = new Point(0x7a, 0x97);
        this.textBox4.Name = "textBox4";
        this.textBox4.Size = new Size(0x40, 0x1a);
        this.textBox4.TabIndex = 0x49;
        this.textBox4.Text = "178";
        this.textBox4.TextAlign = HorizontalAlignment.Center;
        this.textBox2.Font = new Font("宋体", 12f);
        this.textBox2.Location = new Point(0x59, 0x7b);
        this.textBox2.Name = "textBox2";
        this.textBox2.Size = new Size(0x40, 0x1a);
        this.textBox2.TabIndex = 0x49;
        this.textBox2.Text = "72";
        this.textBox2.TextAlign = HorizontalAlignment.Center;
        this.textBox3.Font = new Font("宋体", 12f);
        this.textBox3.Location = new Point(0x59, 0x34);
        this.textBox3.Name = "textBox3";
        this.textBox3.Size = new Size(0x40, 0x1a);
        this.textBox3.TabIndex = 0x4a;
        this.textBox3.Text = "806";
        this.textBox3.TextAlign = HorizontalAlignment.Center;
        this.label46.AutoSize = true;
        this.label46.Font = new Font("宋体", 12f);
        this.label46.ForeColor = Color.Black;
        this.label46.Location = new Point(3, 0x7e);
        this.label46.Name = "label46";
        this.label46.Size = new Size(80, 0x10);
        this.label46.TabIndex = 0x48;
        this.label46.Text = "扫描时间:";
        this.label47.AutoSize = true;
        this.label47.Font = new Font("宋体", 12f);
        this.label47.ForeColor = Color.Black;
        this.label47.Location = new Point(3, 60);
        this.label47.Name = "label47";
        this.label47.Size = new Size(80, 0x10);
        this.label47.TabIndex = 0x47;
        this.label47.Text = "测试频率:";
        this.button8.Font = new Font("宋体", 12f);
        this.button8.Location = new Point(0x9f, 0x7e);
        this.button8.Name = "button8";
        this.button8.Size = new Size(0x3d, 0x17);
        this.button8.TabIndex = 0x44;
        this.button8.Text = "设置";
        this.button8.UseVisualStyleBackColor = true;
        this.button8.Click += new EventHandler(this.button8_Click);
        this.button9.Font = new Font("宋体", 12f);
        this.button9.Location = new Point(0x9f, 0x5e);
        this.button9.Name = "button9";
        this.button9.Size = new Size(0x3d, 0x17);
        this.button9.TabIndex = 0x43;
        this.button9.Text = "设置";
        this.button9.UseVisualStyleBackColor = true;
        this.button9.Click += new EventHandler(this.button9_Click);
        this.button10.Font = new Font("宋体", 12f);
        this.button10.Location = new Point(0x9f, 0x39);
        this.button10.Name = "button10";
        this.button10.Size = new Size(0x3d, 0x17);
        this.button10.TabIndex = 70;
        this.button10.Text = "设置";
        this.button10.UseVisualStyleBackColor = true;
        this.button10.Click += new EventHandler(this.button10_Click);
        this.button11.Font = new Font("宋体", 12f);
        this.button11.Location = new Point(6, 0x19);
        this.button11.Name = "button11";
        this.button11.Size = new Size(0x4b, 0x17);
        this.button11.TabIndex = 0x45;
        this.button11.Text = "初始化";
        this.button11.UseVisualStyleBackColor = true;
        this.button11.Click += new EventHandler(this.button11_Click);
        this.groupBoxLeft.Controls.Add(this.grouper6);
        this.groupBoxLeft.Controls.Add(this.grouper5);
        this.groupBoxLeft.Controls.Add(this.grouperTurntable);
        this.groupBoxLeft.Controls.Add(this.grouper15);
        this.groupBoxLeft.Location = new Point(6, 3);
        this.groupBoxLeft.Name = "groupBoxLeft";
        this.groupBoxLeft.Size = new Size(300, 0x325);
        this.groupBoxLeft.TabIndex = 90;
        this.groupBoxLeft.TabStop = false;
        this.grouper6.BackgroundColor = Color.White;
        this.grouper6.BackgroundGradientColor = Color.White;
        this.grouper6.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.grouper6.BorderColor = Color.Black;
        this.grouper6.BorderThickness = 1f;
        this.grouper6.Controls.Add(this.label51);
        this.grouper6.Controls.Add(this.label3);
        this.grouper6.Controls.Add(this.label6);
        this.grouper6.Controls.Add(this.pictureBoxSLD);
        this.grouper6.CustomGroupBoxColor = Color.White;
        this.grouper6.GroupImage = null;
        this.grouper6.GroupTitle = "";
        this.grouper6.Location = new Point(8, -1);
        this.grouper6.Name = "grouper6";
        this.grouper6.Padding = new Padding(20);
        this.grouper6.PaintGroupBox = false;
        this.grouper6.RoundCorners = 10;
        this.grouper6.ShadowColor = Color.DarkGray;
        this.grouper6.ShadowControl = true;
        this.grouper6.ShadowThickness = 3;
        this.grouper6.Size = new Size(0x124, 0xcd);
        this.grouper6.TabIndex = 80;
        this.label51.AutoEllipsis = true;
        this.label51.AutoSize = true;
        this.label51.BackColor = Color.White;
        this.label51.Font = new Font("宋体", 14f);
        this.label51.ForeColor = Color.Black;
        this.label51.Location = new Point(0x8b, 0x8b);
        this.label51.Name = "label51";
        this.label51.Size = new Size(0x92, 0x13);
        this.label51.TabIndex = 0x4f;
        this.label51.Text = "2009年11月11日";
        this.label3.AutoSize = true;
        this.label3.BackColor = Color.White;
        this.label3.Font = new Font("宋体", 20f);
        this.label3.ForeColor = Color.Black;
        this.label3.Location = new Point(0x38, 0x1f);
        this.label3.Name = "label3";
        this.label3.Size = new Size(0xae, 0x1b);
        this.label3.TabIndex = 0x4e;
        this.label3.Text = "天线测试系统";
        this.label6.AutoSize = true;
        this.label6.BackColor = Color.White;
        this.label6.Font = new Font("宋体", 16f);
        this.label6.ForeColor = Color.Black;
        this.label6.Location = new Point(0x92, 0x4e);
        this.label6.Name = "label6";
        this.label6.Size = new Size(120, 0x16);
        this.label6.TabIndex = 0x4d;
        this.label6.Text = "世联达科技";
        this.pictureBoxSLD.BackColor = Color.White;
        this.pictureBoxSLD.BackgroundImage = (Image) manager.GetObject("pictureBoxSLD.BackgroundImage");
        this.pictureBoxSLD.BackgroundImageLayout = ImageLayout.None;
        this.pictureBoxSLD.Location = new Point(9, 0x2b);
        this.pictureBoxSLD.Name = "pictureBoxSLD";
        this.pictureBoxSLD.Size = new Size(270, 0x94);
        this.pictureBoxSLD.TabIndex = 0x4c;
        this.pictureBoxSLD.TabStop = false;
        this.grouper5.BackgroundColor = Color.White;
        this.grouper5.BackgroundGradientColor = Color.White;
        this.grouper5.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.grouper5.BorderColor = Color.Black;
        this.grouper5.BorderThickness = 1f;
        this.grouper5.Controls.Add(this.listBoxSystem);
        this.grouper5.CustomGroupBoxColor = Color.White;
        this.grouper5.GroupImage = null;
        this.grouper5.GroupTitle = "";
        this.grouper5.Location = new Point(8, 0xc6);
        this.grouper5.Name = "grouper5";
        this.grouper5.Padding = new Padding(20);
        this.grouper5.PaintGroupBox = false;
        this.grouper5.RoundCorners = 10;
        this.grouper5.ShadowColor = Color.DarkGray;
        this.grouper5.ShadowControl = true;
        this.grouper5.ShadowThickness = 3;
        this.grouper5.Size = new Size(0x124, 0xcd);
        this.grouper5.TabIndex = 0x4d;
        this.listBoxSystem.BackColor = Color.White;
        this.listBoxSystem.BorderStyle = BorderStyle.None;
        this.listBoxSystem.Font = new Font("宋体", 11.25f, FontStyle.Bold, GraphicsUnit.Point, 0x86);
        this.listBoxSystem.ForeColor = Color.SteelBlue;
        this.listBoxSystem.FormattingEnabled = true;
        this.listBoxSystem.ItemHeight = 15;
        this.listBoxSystem.Items.AddRange(new object[] { "\t    系统状态", "", "", "", "", "", "", "", "", "", "" });
        this.listBoxSystem.Location = new Point(9, 20);
        this.listBoxSystem.Name = "listBoxSystem";
        this.listBoxSystem.SelectionMode = SelectionMode.None;
        this.listBoxSystem.Size = new Size(270, 0xa5);
        this.listBoxSystem.TabIndex = 0x42;
        this.grouperTurntable.BackgroundColor = Color.White;
        this.grouperTurntable.BackgroundGradientColor = Color.White;
        this.grouperTurntable.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.grouperTurntable.BorderColor = Color.Black;
        this.grouperTurntable.BorderThickness = 1f;
        this.grouperTurntable.Controls.Add(this.listBoxAutoTest);
        this.grouperTurntable.CustomGroupBoxColor = Color.White;
        this.grouperTurntable.GroupImage = null;
        this.grouperTurntable.GroupTitle = "";
        this.grouperTurntable.Location = new Point(8, 0x18e);
        this.grouperTurntable.Name = "grouperTurntable";
        this.grouperTurntable.Padding = new Padding(20);
        this.grouperTurntable.PaintGroupBox = false;
        this.grouperTurntable.RoundCorners = 10;
        this.grouperTurntable.ShadowColor = Color.DarkGray;
        this.grouperTurntable.ShadowControl = true;
        this.grouperTurntable.ShadowThickness = 3;
        this.grouperTurntable.Size = new Size(0x124, 0xcd);
        this.grouperTurntable.TabIndex = 0x4e;
        this.listBoxAutoTest.BackColor = Color.White;
        this.listBoxAutoTest.BorderStyle = BorderStyle.None;
        this.listBoxAutoTest.Font = new Font("宋体", 11.25f, FontStyle.Bold, GraphicsUnit.Point, 0x86);
        this.listBoxAutoTest.ForeColor = Color.SteelBlue;
        this.listBoxAutoTest.FormattingEnabled = true;
        this.listBoxAutoTest.ItemHeight = 15;
        this.listBoxAutoTest.Items.AddRange(new object[] { "           测试状态", "", "", "", "", "", "", "", "", "", "" });
        this.listBoxAutoTest.Location = new Point(9, 0x17);
        this.listBoxAutoTest.Name = "listBoxAutoTest";
        this.listBoxAutoTest.SelectionMode = SelectionMode.None;
        this.listBoxAutoTest.Size = new Size(270, 0xa5);
        this.listBoxAutoTest.TabIndex = 0x44;
        this.grouper15.BackgroundColor = Color.White;
        this.grouper15.BackgroundGradientColor = Color.White;
        this.grouper15.BackgroundGradientMode = Grouper.GroupBoxGradientMode.None;
        this.grouper15.BorderColor = Color.Black;
        this.grouper15.BorderThickness = 1f;
        this.grouper15.Controls.Add(this.buttonXLStop);
        this.grouper15.Controls.Add(this.buttonXLStart);
        this.grouper15.CustomGroupBoxColor = Color.White;
        this.grouper15.GroupImage = null;
        this.grouper15.GroupTitle = "";
        this.grouper15.Location = new Point(8, 0x257);
        this.grouper15.Name = "grouper15";
        this.grouper15.Padding = new Padding(20);
        this.grouper15.PaintGroupBox = false;
        this.grouper15.RoundCorners = 10;
        this.grouper15.ShadowColor = Color.DarkGray;
        this.grouper15.ShadowControl = true;
        this.grouper15.ShadowThickness = 3;
        this.grouper15.Size = new Size(0x124, 0xcd);
        this.grouper15.TabIndex = 0x4f;
        this.buttonXLStop.BackColor = Color.Transparent;
        this.buttonXLStop.BaseColor = Color.Transparent;
        this.buttonXLStop.ButtonColor = Color.FromArgb(210, 0, 0);
        this.buttonXLStop.ButtonText = "停止回零";
        this.buttonXLStop.CornerRadius = 20;
        this.buttonXLStop.Font = new Font("宋体", 11f);
        this.buttonXLStop.ForeColor = Color.Black;
        this.buttonXLStop.GlowColor = Color.FromArgb(0xff, 0x8d, 0xbd);
        this.buttonXLStop.ImageAlign = ContentAlignment.TopLeft;
        this.buttonXLStop.Location = new Point(150, 0x33);
        this.buttonXLStop.Name = "buttonXLStop";
        this.buttonXLStop.Size = new Size(0x74, 0x24);
        this.buttonXLStop.TabIndex = 0x79;
        this.buttonXLStop.Visible = false;
        this.buttonXLStop.Click += new EventHandler(this.buttonXLStop_Click);
        this.buttonXLStart.BackColor = Color.Transparent;
        this.buttonXLStart.BaseColor = Color.Transparent;
        this.buttonXLStart.ButtonColor = Color.FromArgb(0, 0xd3, 40);
        this.buttonXLStart.ButtonText = "各轴回零";
        this.buttonXLStart.CornerRadius = 20;
        this.buttonXLStart.Font = new Font("宋体", 11f);
        this.buttonXLStart.ForeColor = Color.Black;
        this.buttonXLStart.GlowColor = Color.FromArgb(0x8d, 0xff, 0xbd);
        this.buttonXLStart.ImageAlign = ContentAlignment.TopLeft;
        this.buttonXLStart.Location = new Point(0x17, 0x33);
        this.buttonXLStart.Name = "buttonXLStart";
        this.buttonXLStart.Size = new Size(0x74, 0x24);
        this.buttonXLStart.TabIndex = 120;
        this.buttonXLStart.Visible = false;
        this.buttonXLStart.Click += new EventHandler(this.buttonXLStart_Click);
        this.pictureBox2.BackgroundImage = (Image) manager.GetObject("pictureBox2.BackgroundImage");
        this.pictureBox2.Location = new Point(0x1ba, 0x57);
        this.pictureBox2.Name = "pictureBox2";
        this.pictureBox2.Size = new Size(120, 120);
        this.pictureBox2.TabIndex = 0x5b;
        this.pictureBox2.TabStop = false;
        this.pictureBox2.Visible = false;
        this.groupBoxSpeed.BackColor = Color.Transparent;
        this.groupBoxSpeed.Controls.Add(this.label61);
        this.groupBoxSpeed.Controls.Add(this.lable45);
        this.groupBoxSpeed.Controls.Add(this.labelSpeedCpuT);
        this.groupBoxSpeed.Controls.Add(this.textBoxzhi);
        this.groupBoxSpeed.Controls.Add(this.buttonSpeedStop);
        this.groupBoxSpeed.Controls.Add(this.buttonSpeedStar);
        this.groupBoxSpeed.Controls.Add(this.labelSpeedV);
        this.groupBoxSpeed.Controls.Add(this.radioButtonSpeedDn);
        this.groupBoxSpeed.Controls.Add(this.radioButtonSpeedRv);
        this.groupBoxSpeed.Controls.Add(this.radioButtonSpeedEl);
        this.groupBoxSpeed.Controls.Add(this.radioButtonSpeedSn);
        this.groupBoxSpeed.Controls.Add(this.radioButtonSpeedAz);
        this.groupBoxSpeed.Font = new Font("宋体", 10f);
        this.groupBoxSpeed.Location = new Point(0x2fc, 0x2b);
        this.groupBoxSpeed.Name = "groupBoxSpeed";
        this.groupBoxSpeed.Size = new Size(0xd5, 0xc5);
        this.groupBoxSpeed.TabIndex = 0x47;
        this.groupBoxSpeed.TabStop = false;
        this.groupBoxSpeed.Text = "Speed-Test";
        this.groupBoxSpeed.Visible = false;
        this.label61.AutoSize = true;
        this.label61.Location = new Point(0x2d, 0xaf);
        this.label61.Name = "label61";
        this.label61.Size = new Size(0x38, 14);
        this.label61.TabIndex = 0x27;
        this.label61.Text = "label61";
        this.lable45.AutoSize = true;
        this.lable45.Location = new Point(7, 0x33);
        this.lable45.Name = "lable45";
        this.lable45.Size = new Size(0x1c, 14);
        this.lable45.TabIndex = 0x26;
        this.lable45.Text = "cpu";
        this.labelSpeedCpuT.Location = new Point(40, 50);
        this.labelSpeedCpuT.Name = "labelSpeedCpuT";
        this.labelSpeedCpuT.Size = new Size(0x42, 0x17);
        this.labelSpeedCpuT.TabIndex = 0x25;
        this.textBoxzhi.Location = new Point(9, 0x94);
        this.textBoxzhi.Name = "textBoxzhi";
        this.textBoxzhi.Size = new Size(0x67, 0x17);
        this.textBoxzhi.TabIndex = 0x24;
        this.buttonSpeedStop.Location = new Point(6, 0x77);
        this.buttonSpeedStop.Name = "buttonSpeedStop";
        this.buttonSpeedStop.Size = new Size(0x38, 0x17);
        this.buttonSpeedStop.TabIndex = 0x23;
        this.buttonSpeedStop.Text = "停止";
        this.buttonSpeedStop.UseVisualStyleBackColor = true;
        this.buttonSpeedStop.Click += new EventHandler(this.buttonSpeedStop_Click);
        this.buttonSpeedStar.Location = new Point(6, 0x5c);
        this.buttonSpeedStar.Name = "buttonSpeedStar";
        this.buttonSpeedStar.Size = new Size(0x38, 0x17);
        this.buttonSpeedStar.TabIndex = 0x23;
        this.buttonSpeedStar.Text = "起始";
        this.buttonSpeedStar.UseVisualStyleBackColor = true;
        this.buttonSpeedStar.Click += new EventHandler(this.buttonSpeedStar_Click);
        this.labelSpeedV.AutoSize = true;
        this.labelSpeedV.Location = new Point(6, 0x21);
        this.labelSpeedV.Name = "labelSpeedV";
        this.labelSpeedV.Size = new Size(0x38, 14);
        this.labelSpeedV.TabIndex = 0x22;
        this.labelSpeedV.Text = "SpeedV:";
        this.radioButtonSpeedDn.AutoSize = true;
        this.radioButtonSpeedDn.ForeColor = Color.Black;
        this.radioButtonSpeedDn.Location = new Point(0x66, 0x6f);
        this.radioButtonSpeedDn.Name = "radioButtonSpeedDn";
        this.radioButtonSpeedDn.Size = new Size(0x51, 0x12);
        this.radioButtonSpeedDn.TabIndex = 0x21;
        this.radioButtonSpeedDn.Text = "下方位轴";
        this.radioButtonSpeedDn.UseVisualStyleBackColor = true;
        this.radioButtonSpeedRv.AutoSize = true;
        this.radioButtonSpeedRv.ForeColor = Color.Black;
        this.radioButtonSpeedRv.Location = new Point(0x66, 0x45);
        this.radioButtonSpeedRv.Name = "radioButtonSpeedRv";
        this.radioButtonSpeedRv.Size = new Size(0x5f, 0x12);
        this.radioButtonSpeedRv.TabIndex = 0x21;
        this.radioButtonSpeedRv.Text = "接收极化轴";
        this.radioButtonSpeedRv.UseVisualStyleBackColor = true;
        this.radioButtonSpeedEl.AutoSize = true;
        this.radioButtonSpeedEl.ForeColor = Color.Black;
        this.radioButtonSpeedEl.Location = new Point(0x66, 0x2d);
        this.radioButtonSpeedEl.Name = "radioButtonSpeedEl";
        this.radioButtonSpeedEl.Size = new Size(0x43, 0x12);
        this.radioButtonSpeedEl.TabIndex = 0x21;
        this.radioButtonSpeedEl.Text = "俯仰轴";
        this.radioButtonSpeedEl.UseVisualStyleBackColor = true;
        this.radioButtonSpeedSn.AutoSize = true;
        this.radioButtonSpeedSn.ForeColor = Color.Black;
        this.radioButtonSpeedSn.Location = new Point(0x66, 0x5d);
        this.radioButtonSpeedSn.Name = "radioButtonSpeedSn";
        this.radioButtonSpeedSn.Size = new Size(0x5f, 0x12);
        this.radioButtonSpeedSn.TabIndex = 0x20;
        this.radioButtonSpeedSn.Text = "发射极化轴";
        this.radioButtonSpeedSn.UseVisualStyleBackColor = true;
        this.radioButtonSpeedAz.AutoSize = true;
        this.radioButtonSpeedAz.Checked = true;
        this.radioButtonSpeedAz.ForeColor = Color.Black;
        this.radioButtonSpeedAz.Location = new Point(0x66, 0x16);
        this.radioButtonSpeedAz.Name = "radioButtonSpeedAz";
        this.radioButtonSpeedAz.Size = new Size(0x43, 0x12);
        this.radioButtonSpeedAz.TabIndex = 0x1f;
        this.radioButtonSpeedAz.TabStop = true;
        this.radioButtonSpeedAz.Text = "方位轴";
        this.radioButtonSpeedAz.UseVisualStyleBackColor = true;
        this.pictureBoxPt.BackgroundImageLayout = ImageLayout.Zoom;
        this.pictureBoxPt.Location = new Point(0x3bb, 0x13c);
        this.pictureBoxPt.Name = "pictureBoxPt";
        this.pictureBoxPt.Size = new Size(120, 120);
        this.pictureBoxPt.TabIndex = 0;
        this.pictureBoxPt.TabStop = false;
        this.pictureBoxPt.Visible = false;
        this.pictureBoxFS.BackgroundImageLayout = ImageLayout.Zoom;
        this.pictureBoxFS.Location = new Point(0x15a, 0x13c);
        this.pictureBoxFS.Name = "pictureBoxFS";
        this.pictureBoxFS.Size = new Size(120, 120);
        this.pictureBoxFS.TabIndex = 0;
        this.pictureBoxFS.TabStop = false;
        this.pictureBoxFS.Visible = false;
        this.pictureBox1.BackColor = Color.White;
        this.pictureBox1.BorderStyle = BorderStyle.Fixed3D;
        this.pictureBox1.Location = new Point(0x13c, 20);
        this.pictureBox1.Name = "pictureBox1";
        this.pictureBox1.Size = new Size(100, 0x68);
        this.pictureBox1.TabIndex = 0x40;
        this.pictureBox1.TabStop = false;
        this.pictureBoxDn.BackgroundImageLayout = ImageLayout.Zoom;
        this.pictureBoxDn.Location = new Point(0x31a, 0x13c);
        this.pictureBoxDn.Name = "pictureBoxDn";
        this.pictureBoxDn.Size = new Size(120, 120);
        this.pictureBoxDn.TabIndex = 0;
        this.pictureBoxDn.TabStop = false;
        this.pictureBoxDn.Visible = false;
        this.toolStrip1.Dock = DockStyle.None;
        this.toolStrip1.Items.AddRange(new ToolStripItem[] { this.toolStripButton1, this.toolStripButton2, this.toolStripButton3, this.toolStripButton9, this.toolStripButton10, this.toolStripButton4, this.toolStripButton5, this.toolStripButton7, this.toolStripButton8, this.ExitTestSystem, this.toolStripButton6 });
        this.toolStrip1.Location = new Point(3, 0);
        this.toolStrip1.Name = "toolStrip1";
        this.toolStrip1.Size = new Size(0x448, 0x19);
        this.toolStrip1.TabIndex = 0x52;
        this.toolStrip1.Text = "toolStrip1";
        this.toolStripButton1.Font = new Font("宋体", 12f);
        this.toolStripButton1.ImageScaling = ToolStripItemImageScaling.None;
        this.toolStripButton1.ImageTransparentColor = Color.Magenta;
        this.toolStripButton1.Name = "toolStripButton1";
        this.toolStripButton1.RightToLeftAutoMirrorImage = true;
        this.toolStripButton1.Size = new Size(0x4c, 0x16);
        this.toolStripButton1.Text = "系统设置";
        this.toolStripButton1.TextDirection = ToolStripTextDirection.Horizontal;
        this.toolStripButton1.Click += new EventHandler(this.OptionForm_Click);
        this.toolStripButton2.Font = new Font("宋体", 12f);
        this.toolStripButton2.ImageScaling = ToolStripItemImageScaling.None;
        this.toolStripButton2.ImageTransparentColor = Color.Magenta;
        this.toolStripButton2.Name = "toolStripButton2";
        this.toolStripButton2.Size = new Size(0x6c, 0x16);
        this.toolStripButton2.Text = "读取频段数据";
        this.toolStripButton2.TextImageRelation = TextImageRelation.ImageAboveText;
        this.toolStripButton2.Visible = false;
        this.toolStripButton2.Click += new EventHandler(this.toolStripButton2_Click);
        this.toolStripButton3.ImageScaling = ToolStripItemImageScaling.None;
        this.toolStripButton3.ImageTransparentColor = Color.Magenta;
        this.toolStripButton3.Name = "toolStripButton3";
        this.toolStripButton3.Size = new Size(0x39, 0x16);
        this.toolStripButton3.Text = "仪器设置";
        this.toolStripButton3.TextImageRelation = TextImageRelation.ImageAboveText;
        this.toolStripButton3.Visible = false;
        this.toolStripButton3.Click += new EventHandler(this.toolStripButton3_Click);
        this.toolStripButton9.DisplayStyle = ToolStripItemDisplayStyle.Text;
        this.toolStripButton9.Image = (Image) manager.GetObject("toolStripButton9.Image");
        this.toolStripButton9.ImageTransparentColor = Color.Magenta;
        this.toolStripButton9.Name = "toolStripButton9";
        this.toolStripButton9.Size = new Size(0x51, 0x16);
        this.toolStripButton9.Text = "读取喇叭电平";
        this.toolStripButton9.Visible = false;
        this.toolStripButton9.Click += new EventHandler(this.toolStripButton9_Click);
        this.toolStripButton10.DisplayStyle = ToolStripItemDisplayStyle.Text;
        this.toolStripButton10.Image = (Image) manager.GetObject("toolStripButton10.Image");
        this.toolStripButton10.ImageTransparentColor = Color.Magenta;
        this.toolStripButton10.Name = "toolStripButton10";
        this.toolStripButton10.Size = new Size(0x39, 0x16);
        this.toolStripButton10.Text = "倾角测试";
        this.toolStripButton10.Visible = false;
        this.toolStripButton10.Click += new EventHandler(this.toolStripButton10_Click);
        this.toolStripButton4.BackColor = Color.Transparent;
        this.toolStripButton4.Font = new Font("宋体", 12f);
        this.toolStripButton4.ImageScaling = ToolStripItemImageScaling.None;
        this.toolStripButton4.ImageTransparentColor = Color.Transparent;
        this.toolStripButton4.Name = "toolStripButton4";
        this.toolStripButton4.Size = new Size(0x4c, 0x16);
        this.toolStripButton4.Text = "保存数据";
        this.toolStripButton4.Click += new EventHandler(this.toolStripButton4_Click);
        this.toolStripButton5.ImageScaling = ToolStripItemImageScaling.None;
        this.toolStripButton5.ImageTransparentColor = Color.Magenta;
        this.toolStripButton5.Name = "toolStripButton5";
        this.toolStripButton5.Size = new Size(0x45, 0x16);
        this.toolStripButton5.Text = "自动化测试";
        this.toolStripButton5.TextImageRelation = TextImageRelation.ImageAboveText;
        this.toolStripButton5.Visible = false;
        this.toolStripButton5.Click += new EventHandler(this.toolStripButton5_Click);
        this.toolStripButton7.Font = new Font("宋体", 12f);
        this.toolStripButton7.ImageTransparentColor = Color.Magenta;
        this.toolStripButton7.Name = "toolStripButton7";
        this.toolStripButton7.Size = new Size(0x2c, 0x16);
        this.toolStripButton7.Text = "帮助";
        this.toolStripButton7.Click += new EventHandler(this.toolStripButton7_Click);
        this.toolStripButton8.Font = new Font("宋体", 12f);
        this.toolStripButton8.ImageTransparentColor = Color.Magenta;
        this.toolStripButton8.Name = "toolStripButton8";
        this.toolStripButton8.Size = new Size(0x2c, 0x16);
        this.toolStripButton8.Text = "关于";
        this.toolStripButton8.Click += new EventHandler(this.toolStripButton8_Click);
        this.ExitTestSystem.Font = new Font("宋体", 12f, FontStyle.Regular, GraphicsUnit.Point, 0x86);
        this.ExitTestSystem.ImageScaling = ToolStripItemImageScaling.None;
        this.ExitTestSystem.ImageTransparentColor = Color.White;
        this.ExitTestSystem.Name = "ExitTestSystem";
        this.ExitTestSystem.Size = new Size(0x2c, 0x16);
        this.ExitTestSystem.Text = "退出";
        this.ExitTestSystem.Click += new EventHandler(this.buttonExit_Click);
        this.toolStripButton6.AutoSize = false;
        this.toolStripButton6.AutoToolTip = false;
        this.toolStripButton6.DisplayStyle = ToolStripItemDisplayStyle.None;
        this.toolStripButton6.Enabled = false;
        this.toolStripButton6.Image = (Image) manager.GetObject("toolStripButton6.Image");
        this.toolStripButton6.ImageTransparentColor = Color.Magenta;
        this.toolStripButton6.Name = "toolStripButton6";
        this.toolStripButton6.Size = new Size(800, 0x16);
        this.toolStripButton6.Text = "toolStripButton6";
        base.AutoScaleDimensions = new SizeF(6f, 12f);
        base.AutoScaleMode = AutoScaleMode.Font;
        base.AutoScrollMargin = new Size(0, 10);
        this.BackColor = SystemColors.Control;
        base.ClientSize = new Size(0x5a4, 0x362);
        base.Controls.Add(this.toolStripContainer1);
        base.Icon = (Icon) manager.GetObject("$this.Icon");
        base.Name = "Main";
        base.StartPosition = FormStartPosition.CenterScreen;
        this.Text = "天线测试系统";
        base.WindowState = FormWindowState.Minimized;
        base.Load += new EventHandler(this.Main_Load);
        base.FormClosing += new FormClosingEventHandler(this.Main_FormClosing);
        base.Resize += new EventHandler(this.Main_Resize);
        this.AZcontextMenuText.ResumeLayout(false);
        this.AZcontextMenuText.PerformLayout();
        this.ELcontextMenuText.ResumeLayout(false);
        this.ELcontextMenuText.PerformLayout();
        this.SDcontextMenuText.ResumeLayout(false);
        this.SDcontextMenuText.PerformLayout();
        this.DNcontextMenuText.ResumeLayout(false);
        this.DNcontextMenuText.PerformLayout();
        this.RVcontextMenuText.ResumeLayout(false);
        this.RVcontextMenuText.PerformLayout();
        this.PTcontextMenuText.ResumeLayout(false);
        this.PTcontextMenuText.PerformLayout();
        this.FscontextMenuText.ResumeLayout(false);
        this.FscontextMenuText.PerformLayout();
        this.toolStripContainer1.ContentPanel.ResumeLayout(false);
        this.toolStripContainer1.TopToolStripPanel.ResumeLayout(false);
        this.toolStripContainer1.TopToolStripPanel.PerformLayout();
        this.toolStripContainer1.ResumeLayout(false);
        this.toolStripContainer1.PerformLayout();
        this.tabControl2.ResumeLayout(false);
        this.tabPageSet.ResumeLayout(false);
        this.grouper2.ResumeLayout(false);
        this.grouper4.ResumeLayout(false);
        this.grouper4.PerformLayout();
        this.grouper16.ResumeLayout(false);
        this.grouper16.PerformLayout();
        this.grouperParameter.ResumeLayout(false);
        this.grouperParameter.PerformLayout();
        this.numericUpDown2.EndInit();
        this.numericUpDown3.EndInit();
        this.numUpDownVNAPower.EndInit();
        this.numUpDownVNAAverage.EndInit();
        this.grouper1.ResumeLayout(false);
        this.grouper1.PerformLayout();
        this.tabPageNew.ResumeLayout(false);
        this.grouperNewOperat.ResumeLayout(false);
        this.grouper7Step.ResumeLayout(false);
        this.grouper7Step.PerformLayout();
        this.grouper6Step.ResumeLayout(false);
        this.grouper6Step.PerformLayout();
        this.grouper5Step.ResumeLayout(false);
        this.grouper5Step.PerformLayout();
        this.grouper4Step.ResumeLayout(false);
        this.grouper4Step.PerformLayout();
        this.grouper3Step.ResumeLayout(false);
        this.grouper3Step.PerformLayout();
        this.grouper2Step.ResumeLayout(false);
        this.grouper2Step.PerformLayout();
        this.grouper1Step.ResumeLayout(false);
        this.grouper1Step.PerformLayout();
        this.grouperOther.ResumeLayout(false);
        this.grouperOther.PerformLayout();
        this.tabControl1.ResumeLayout(false);
        this.tabPage1.ResumeLayout(false);
        this.groupBoxSd.ResumeLayout(false);
        this.groupBoxSd.PerformLayout();
        ((ISupportInitialize) this.labelSdLimTop).EndInit();
        ((ISupportInitialize) this.labelSdLimDn).EndInit();
        this.trackBarSd.EndInit();
        ((ISupportInitialize) this.pictureBoxSd).EndInit();
        this.groupBoxAz.ResumeLayout(false);
        this.groupBoxAz.PerformLayout();
        this.trackBarAz.EndInit();
        ((ISupportInitialize) this.pictureBoxAz).EndInit();
        this.groupBoxEl.ResumeLayout(false);
        this.groupBoxEl.PerformLayout();
        ((ISupportInitialize) this.labelElLimTop).EndInit();
        ((ISupportInitialize) this.labelElLimDn).EndInit();
        this.trackBarEl.EndInit();
        ((ISupportInitialize) this.pictureBoxEl).EndInit();
        this.tabPage2.ResumeLayout(false);
        this.groupBoxPt.ResumeLayout(false);
        this.groupBoxPt.PerformLayout();
        ((ISupportInitialize) this.labelPtLimTop).EndInit();
        ((ISupportInitialize) this.labelPtLimDn).EndInit();
        this.trackBarPt.EndInit();
        this.groupBoxRv.ResumeLayout(false);
        this.groupBoxRv.PerformLayout();
        ((ISupportInitialize) this.labelRvLimTop).EndInit();
        ((ISupportInitialize) this.labelRvLimDn).EndInit();
        this.trackBarRv.EndInit();
        ((ISupportInitialize) this.pictureBoxRv).EndInit();
        this.groupBoxDn.ResumeLayout(false);
        this.groupBoxDn.PerformLayout();
        ((ISupportInitialize) this.labelDnLimTop).EndInit();
        ((ISupportInitialize) this.labelDnLimDn).EndInit();
        this.trackBarDn.EndInit();
        this.tabPage3.ResumeLayout(false);
        this.grouper3.ResumeLayout(false);
        this.grouper3.PerformLayout();
        ((ISupportInitialize) this.labelFsLimTop).EndInit();
        ((ISupportInitialize) this.labelFsLimUP).EndInit();
        this.trackBarFS.EndInit();
        this.groupBoxSearchMax.ResumeLayout(false);
        this.groupBoxSearchMax.PerformLayout();
        this.groupBoxElAuto.ResumeLayout(false);
        this.groupBoxTimer.ResumeLayout(false);
        this.groupBoxTimer.PerformLayout();
        this.groupBoxLeft.ResumeLayout(false);
        this.grouper6.ResumeLayout(false);
        this.grouper6.PerformLayout();
        ((ISupportInitialize) this.pictureBoxSLD).EndInit();
        this.grouper5.ResumeLayout(false);
        this.grouperTurntable.ResumeLayout(false);
        this.grouper15.ResumeLayout(false);
        ((ISupportInitialize) this.pictureBox2).EndInit();
        this.groupBoxSpeed.ResumeLayout(false);
        this.groupBoxSpeed.PerformLayout();
        ((ISupportInitialize) this.pictureBoxPt).EndInit();
        ((ISupportInitialize) this.pictureBoxFS).EndInit();
        ((ISupportInitialize) this.pictureBox1).EndInit();
        ((ISupportInitialize) this.pictureBoxDn).EndInit();
        this.toolStrip1.ResumeLayout(false);
        this.toolStrip1.PerformLayout();
        base.ResumeLayout(false);
    }

    private void InitPNA()
    {
        try
        {
            string[] strArray;
            int num;
            string str = ReadINI(define.VNAType, "仪器型号", "AntCode.ocx");
            if (str != "")
            {
                define.AntName = str;
            }
            str = ReadINI(define.VNAType, "READDATA", "AntCode.ocx");
            if (str != "")
            {
                define.ReadData = str;
            }
            str = ReadINI(define.VNAType, "NUMBER", "AntCode.ocx");
            if (str != "")
            {
                define.Number = Convert.ToInt16(str);
            }
            str = ReadINI(define.VNAType, "OUTMARKE", "AntCode.ocx");
            if (str != "")
            {
                define.OutMarK = str;
            }
            str = ReadINI(define.VNAType, "SLPDATA", "AntCode.ocx");
            if (str != "")
            {
                define.SlpData = str;
            }
            str = ReadINI(define.VNAType, "SETSTART", "AntCode.ocx");
            if (str != "")
            {
                define.SetStart = str;
            }
            str = ReadINI(define.VNAType, "SETSTOP", "AntCode.ocx");
            if (str != "")
            {
                define.SetStop = str;
            }
            str = ReadINI(define.VNAType, "SETSPAN", "AntCode.ocx");
            if (str != "")
            {
                define.SetSPAN = str;
            }
            str = ReadINI(define.VNAType, "SETCENTER", "AntCode.ocx");
            if (str != "")
            {
                define.SetCenter = str;
            }
            string[] separator = new string[] { "*" };
            str = ReadINI(define.VNAType, "ACTIVEMARKE", "AntCode.ocx");
            if (str != "")
            {
                define.ActiveMark[1] = str;
            }
            if ((define.ActiveMark[1] != null) && (define.ActiveMark[1].IndexOf("*") > 0))
            {
                strArray = define.ActiveMark[1].Split(separator, StringSplitOptions.None);
                for (num = 1; num <= 9; num++)
                {
                    define.ActiveMark[num] = strArray[0] + num.ToString() + strArray[1];
                }
            }
            str = ReadINI(define.VNAType, "SETMARK", "AntCode.ocx");
            if (str != "")
            {
                define.SetMark[1] = str;
            }
            if ((define.SetMark[1] != null) && (define.SetMark[1].IndexOf("*") > 0))
            {
                strArray = define.SetMark[1].Split(separator, StringSplitOptions.None);
                for (num = 1; num <= 9; num++)
                {
                    define.SetMark[num] = strArray[0] + num.ToString() + strArray[1];
                }
            }
            str = ReadINI(define.VNAType, "SETMARK* ON", "AntCode.ocx");
            if (str != "")
            {
                define.SetMarkON[1] = str;
            }
            if ((define.SetMarkON[1] != null) && (define.SetMarkON[1].IndexOf("*") > 0))
            {
                strArray = define.SetMarkON[1].Split(separator, StringSplitOptions.None);
                for (num = 1; num <= 9; num++)
                {
                    define.SetMarkON[num] = strArray[0] + num.ToString() + strArray[1];
                }
            }
            str = ReadINI(define.VNAType, "SETMARK* OFF", "AntCode.ocx");
            if (str != "")
            {
                define.SetMarkOFF[1] = str;
            }
            if ((define.SetMarkOFF[1] != null) && (define.SetMarkOFF[1].IndexOf("*") > 0))
            {
                strArray = define.SetMarkOFF[1].Split(separator, StringSplitOptions.None);
                for (num = 1; num <= 9; num++)
                {
                    define.SetMarkOFF[num] = strArray[0] + num.ToString() + strArray[1];
                }
            }
            str = ReadINI(define.VNAType, "SETPOWER ON", "AntCode.ocx");
            if (str != "")
            {
                define.SetPowerON = str;
            }
            str = ReadINI(define.VNAType, "SETPOWER OFF", "AntCode.ocx");
            if (str != "")
            {
                define.SetPowerOFF = str;
            }
            str = ReadINI(define.VNAType, "SETBAND", "AntCode.ocx");
            if (str != "")
            {
                define.SetBAND = str;
            }
            str = ReadINI(define.VNAType, "ACTIVEPOINT", "AntCode.ocx");
            if (str != "")
            {
                define.ActivePoint = str;
            }
            str = ReadINI(define.VNAType, "SETRLEV", "AntCode.ocx");
            if (str != "")
            {
                define.SetRLEV = str;
            }
            str = ReadINI(define.VNAType, "SETSWEEP", "AntCode.ocx");
            if (str != "")
            {
                define.SetSweep = str;
            }
            str = ReadINI(define.VNAType, "SETPOWER", "AntCode.ocx");
            if (str != "")
            {
                define.SetPower = str;
            }
            str = ReadINI(define.VNAType, "SETAVER", "AntCode.ocx");
            if (str != "")
            {
                define.SetAVER = str;
            }
            str = ReadINI(define.VNAType, "SETAVERON", "AntCode.ocx");
            if (str != "")
            {
                define.SetAVERON = str;
            }
            str = ReadINI(define.VNAType, "SetAVEROFF", "AntCode.ocx");
            if (str != "")
            {
                define.SetAVEROFF = str;
            }
            str = ReadINI(define.VNAType, "SETS21", "AntCode.ocx");
            if (str != "")
            {
                define.SetS21 = str;
            }
            str = ReadINI(define.VNAType, "SETPSET", "AntCode.ocx");
            if (str != "")
            {
                define.SetPSET = str;
            }
            str = ReadINI(define.VNAType, "SETPOINT", "AntCode.ocx");
            if (str != "")
            {
                define.SetPoint = str;
            }
            str = ReadINI(define.VNAType, "SETPOWERRANGES", "AntCode.ocx");
            if (str != "")
            {
                define.SetPOWERRanges = str;
            }
            str = ReadINI(define.VNAType, "SETRBW", "AntCode.ocx");
            if (str != "")
            {
                define.SetRBW = str;
            }
            str = ReadINI(define.VNAType, "SETVBW", "AntCode.ocx");
            if (str != "")
            {
                define.SetVBW = str;
            }
            str = ReadINI(define.VNAType, "SETMKPK", "AntCode.ocx");
            if (str != "")
            {
                define.SetMKPK = str;
            }
            str = ReadINI(define.VNAType, "SETMKCF", "AntCode.ocx");
            if (str != "")
            {
                define.SetMKCF = str;
            }
            str = ReadINI(define.VNAType, "SETSMOOTH", "AntCode.ocx");
            if (str != "")
            {
                define.SetSmooth = str;
            }
            str = ReadINI(define.VNAType, "SETSMOOTHON", "AntCode.ocx");
            if (str != "")
            {
                define.SetSmoothON = str;
            }
            str = ReadINI(define.VNAType, "SETSMOOTHOFF", "AntCode.ocx");
            if (str != "")
            {
                define.SetSmoothOFF = str;
            }
            str = ReadINI(define.VNAType, "SetWin2StateON", "AntCode.ocx");
            if (str != "")
            {
                define.SetWin2StateON = str;
            }
            str = ReadINI(define.VNAType, "SetWin1StateOFF", "AntCode.ocx");
            if (str != "")
            {
                define.SetWin1StateOFF = str;
            }
            str = ReadINI(define.VNAType, "SetWin2Trace2", "AntCode.ocx");
            if (str != "")
            {
                define.SetWin2Trace2 = str;
            }
            str = ReadINI(define.VNAType, "SetWin2Para", "AntCode.ocx");
            if (str != "")
            {
                define.SetWin2Para = str;
            }
            str = ReadINI(define.VNAType, "SetMkState", "AntCode.ocx");
            if (str != "")
            {
                define.SetMkState = str;
            }
        }
        catch (Exception exception)
        {
            errLogFunction("Main--InitPNA + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void InitSignal()
    {
        try
        {
            string str = ReadINI(define.SigType, "仪器型号", "AntCode.ocx");
            if (str != "")
            {
                define.SigName = str;
            }
            str = ReadINI(define.SigType, "SetSigFreq", "AntCode.ocx");
            if (str != "")
            {
                define.SetSigFreq = str;
            }
            str = ReadINI(define.SigType, "SetSigPower", "AntCode.ocx");
            if (str != "")
            {
                define.SetSigPower = str;
            }
            str = ReadINI(define.SigType, "SetSigPowerON", "AntCode.ocx");
            if (str != "")
            {
                define.SetSigPowerON = str;
            }
            str = ReadINI(define.SigType, "SetSigPowerOFF", "AntCode.ocx");
            if (str != "")
            {
                define.SetSigPowerOFF = str;
            }
        }
        catch (Exception exception)
        {
            errLogFunction("Main--InitSignal + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void InitSysVar()
    {
        Array.Resize<string>(ref SCM.testFreqArr, 10);
        Array.Resize<bool>(ref SCM.testFreqArrColor, 10);
        SCM.testFreqArrColor[1] = true;
        this.comboBoxPNAN.SelectedIndex = 0;
        this.comboBoxLNAN.SelectedIndex = 0;
        this.comboBoxSwitchN.SelectedIndex = 0;
        this.comboBoxPNAN.Enabled = define.comGF;
        this.comboBoxLNAN.Enabled = define.comDF;
        this.comboBoxSwitchN.Enabled = define.comSwitch;
    }

    private void label77_Click(object sender, EventArgs e)
    {
        try
        {
            SCM.ChangeColors = 9;
            SCM.newIndex = 3;
            this.ChangeColor();
            this.grouper3Step.BackgroundColor = Color.LightGreen;
            this.timerShowGroup.Enabled = true;
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void LoadOptionINI()
    {
        try
        {
            string str = ReadINI("VNA", "VNA", "SystemOption.ini");
            if (str != "")
            {
                define.VNA = Convert.ToBoolean(str);
            }
            str = ReadINI("VNA", "VNAConnect", "SystemOption.ini");
            if (str != "")
            {
                define.VNAConnect = Convert.ToString(str);
            }
            str = ReadINI("VNA", "VNAType", "SystemOption.ini");
            if (str != "")
            {
                define.VNAType = Convert.ToString(str);
            }
            str = ReadINI("VNA", "VNATcpIP", "SystemOption.ini");
            if (str != "")
            {
                define.VNATcpIP = Convert.ToString(str);
            }
            str = ReadINI("VNA", "VNAGPIB", "SystemOption.ini");
            if (str != "")
            {
                define.VNANI = Convert.ToInt32(str);
            }
            str = ReadINI("VNA", "VNAUSB", "SystemOption.ini");
            if (str != "")
            {
                define.VNAUSB = Convert.ToInt32(str);
            }
            str = ReadINI("VNA", "Signal", "SystemOption.ini");
            if (str != "")
            {
                define.Signal = Convert.ToBoolean(str);
            }
            str = ReadINI("VNA", "SigType", "SystemOption.ini");
            if (str != "")
            {
                define.SigType = Convert.ToString(str);
            }
            str = ReadINI("VNA", "SigCom", "SystemOption.ini");
            if (str != "")
            {
                define.SigCom = Convert.ToInt32(str);
            }
            str = ReadINI("VNA", "SigGPIB", "SystemOption.ini");
            if (str != "")
            {
                define.SigNI = Convert.ToInt32(str);
            }
            str = ReadINI("VNA", "SigTcpIP", "SystemOption.ini");
            if (str != "")
            {
                define.SigTcpIP = Convert.ToString(str);
            }
            str = ReadINI("ATTS", "comScm", "SystemOption.ini");
            if (str != "")
            {
                define.comScm = Convert.ToBoolean(str);
            }
            str = ReadINI("ATTS", "comAz", "SystemOption.ini");
            if (str != "")
            {
                define.comAz = Convert.ToBoolean(str);
            }
            str = ReadINI("ATTS", "comDn", "SystemOption.ini");
            if (str != "")
            {
                define.comDn = Convert.ToBoolean(str);
            }
            str = ReadINI("ATTS", "comEl", "SystemOption.ini");
            if (str != "")
            {
                define.comEl = Convert.ToBoolean(str);
            }
            str = ReadINI("ATTS", "comPt", "SystemOption.ini");
            if (str != "")
            {
                define.comPt = Convert.ToBoolean(str);
            }
            str = ReadINI("ATTS", "comNSd", "SystemOption.ini");
            if (str != "")
            {
                define.comNSd = Convert.ToBoolean(str);
            }
            str = ReadINI("ATTS", "comFAz", "SystemOption.ini");
            if (str != "")
            {
                define.comFAz = Convert.ToBoolean(str);
            }
            str = ReadINI("ATTS", "comFSd", "SystemOption.ini");
            if (str != "")
            {
                define.comFSd = Convert.ToBoolean(str);
            }
            str = ReadINI("ATTS", "comRv", "SystemOption.ini");
            if (str != "")
            {
                define.comRv = Convert.ToBoolean(str);
            }
            str = ReadINI("ATTS", "comSwitch", "SystemOption.ini");
            if (str != "")
            {
                define.comSwitch = Convert.ToBoolean(str);
            }
            str = ReadINI("ATTS", "comGF", "SystemOption.ini");
            if (str != "")
            {
                define.comGF = Convert.ToBoolean(str);
            }
            str = ReadINI("ATTS", "Scm", "SystemOption.ini");
            if (str != "")
            {
                define.Scm = Convert.ToInt32(str);
            }
            str = ReadINI("ATTS", "Az", "SystemOption.ini");
            if (str != "")
            {
                define.Az = Convert.ToInt32(str);
            }
            str = ReadINI("ATTS", "Dn", "SystemOption.ini");
            if (str != "")
            {
                define.Dn = Convert.ToInt32(str);
            }
            str = ReadINI("ATTS", "El", "SystemOption.ini");
            if (str != "")
            {
                define.El = Convert.ToInt32(str);
            }
            str = ReadINI("ATTS", "Pt", "SystemOption.ini");
            if (str != "")
            {
                define.Pt = Convert.ToInt32(str);
            }
            str = ReadINI("ATTS", "Rv", "SystemOption.ini");
            if (str != "")
            {
                define.Rv = Convert.ToInt32(str);
            }
            str = ReadINI("ATTS", "Sd", "SystemOption.ini");
            if (str != "")
            {
                define.NSd = Convert.ToInt32(str);
            }
            str = ReadINI("ATTS", "Switch", "SystemOption.ini");
            if (str != "")
            {
                define.Switch = Convert.ToInt32(str);
            }
            str = ReadINI("ATTS", "GF", "SystemOption.ini");
            if (str != "")
            {
                define.GF = Convert.ToInt32(str);
            }
            str = ReadINI("ATTS", "ScmAz", "SystemOption.ini");
            if (str != "")
            {
                define.ScmAz = Convert.ToBoolean(str);
            }
            str = ReadINI("ATTS", "ScmDn", "SystemOption.ini");
            if (str != "")
            {
                define.ScmDn = Convert.ToBoolean(str);
            }
            str = ReadINI("ATTS", "ScmEl", "SystemOption.ini");
            if (str != "")
            {
                define.ScmEl = Convert.ToBoolean(str);
            }
            str = ReadINI("ATTS", "ScmRv", "SystemOption.ini");
            if (str != "")
            {
                define.ScmRv = Convert.ToBoolean(str);
            }
            str = ReadINI("ATTS", "ScmNSd", "SystemOption.ini");
            if (str != "")
            {
                define.ScmNSd = Convert.ToBoolean(str);
            }
            str = ReadINI("ATTS", "ScmPt", "SystemOption.ini");
            if (str != "")
            {
                define.ScmPt = Convert.ToBoolean(str);
            }
            str = ReadINI("Other", "OpenZeroButton", "SystemOption.ini");
            if (str != "")
            {
                define.OpenZeroButton = Convert.ToBoolean(str);
            }
            str = ReadINI("Other", "ConnetDevice", "SystemOption.ini");
            if (str != "")
            {
                define.ConnetDevice = Convert.ToBoolean(str);
            }
            str = ReadINI("MapColor", "MapColor1", "SystemOption.ini");
            if (str != "")
            {
                getprams.MapColor[1] = Color.FromArgb(Convert.ToInt32(str));
            }
            str = ReadINI("MapColor", "MapColor2", "SystemOption.ini");
            if (str != "")
            {
                getprams.MapColor[2] = Color.FromArgb(Convert.ToInt32(str));
            }
            str = ReadINI("MapColor", "MapColor3", "SystemOption.ini");
            if (str != "")
            {
                getprams.MapColor[3] = Color.FromArgb(Convert.ToInt32(str));
            }
            str = ReadINI("MapColor", "MapColor4", "SystemOption.ini");
            if (str != "")
            {
                getprams.MapColor[4] = Color.FromArgb(Convert.ToInt32(str));
            }
            str = ReadINI("MapColor", "MapColor5", "SystemOption.ini");
            if (str != "")
            {
                getprams.MapColor[5] = Color.FromArgb(Convert.ToInt32(str));
            }
            str = ReadINI("MapColor", "MapColor6", "SystemOption.ini");
            if (str != "")
            {
                getprams.MapColor[6] = Color.FromArgb(Convert.ToInt32(str));
            }
            str = ReadINI("MapColor", "MapColor7", "SystemOption.ini");
            if (str != "")
            {
                getprams.MapColor[7] = Color.FromArgb(Convert.ToInt32(str));
            }
            str = ReadINI("MapColor", "MapColor8", "SystemOption.ini");
            if (str != "")
            {
                getprams.MapColor[8] = Color.FromArgb(Convert.ToInt32(str));
            }
            str = ReadINI("MapColor", "MapColor9", "SystemOption.ini");
            if (str != "")
            {
                getprams.MapColor[9] = Color.FromArgb(Convert.ToInt32(str));
            }
            str = ReadINI("MapColor", "LineColor", "SystemOption.ini");
            if (str != "")
            {
                getprams.LineColor = Color.FromArgb(Convert.ToInt32(str));
            }
            str = ReadINI("MapColor", "BackColor", "SystemOption.ini");
            if (str != "")
            {
                getprams.BackColor = Color.FromArgb(Convert.ToInt32(str));
            }
            str = ReadINI("MapColor", "LeftMargin", "SystemOption.ini");
            if (str != "")
            {
                getprams.LeftMargin = Convert.ToInt32(str);
            }
            str = ReadINI("MapColor", "RightMargin", "SystemOption.ini");
            if (str != "")
            {
                getprams.RightMargin = Convert.ToInt32(str);
            }
            str = ReadINI("MapColor", "TopMargin", "SystemOption.ini");
            if (str != "")
            {
                getprams.TopMargin = Convert.ToInt32(str);
            }
            str = ReadINI("MapColor", "DownMargin", "SystemOption.ini");
            if (str != "")
            {
                getprams.DownMargin = Convert.ToInt32(str);
            }
            str = ReadINI("MapColor", "MaxElec", "SystemOption.ini");
            if (str != "")
            {
                getprams.MaxElec = Convert.ToInt32(str);
            }
            str = ReadINI("MapColor", "MinElec", "SystemOption.ini");
            if (str != "")
            {
                getprams.MinElec = Convert.ToInt32(str);
            }
            str = ReadINI("MapColor", "KeduElec", "SystemOption.ini");
            if (str != "")
            {
                getprams.KeduElec = Convert.ToInt32(str);
            }
            str = ReadINI("MapColor", "KeduAngle", "SystemOption.ini");
            if (str != "")
            {
                getprams.KeduAngle = Convert.ToInt32(str);
            }
            str = ReadINI("AngleData", "testFX", "SystemOption.ini");
            if (str != "")
            {
                SCM.testFX = Convert.ToInt32(str);
            }
            str = ReadINI("AngleData", "testZhou", "SystemOption.ini");
            if (str != "")
            {
                SCM.testZhou = Convert.ToInt32(str);
            }
            str = ReadINI("AngleData", "testMode", "SystemOption.ini");
            if (str != "")
            {
                SCM.testMode = Convert.ToInt32(str);
            }
            str = ReadINI("AngleData", "azLimit", "SystemOption.ini");
            if (str != "")
            {
                SCM.Limit_CWazAngle = Convert.ToSingle(str);
            }
            str = ReadINI("AngleData", "azAngle", "SystemOption.ini");
            if (str != "")
            {
                SCM.azAngle = Convert.ToSingle(str);
            }
            str = ReadINI("AngleData", "elAngle", "SystemOption.ini");
            if (str != "")
            {
                SCM.elAngle = Convert.ToSingle(str);
            }
            str = ReadINI("AngleData", "dnAngle", "SystemOption.ini");
            if (str != "")
            {
                SCM.dnAngle = Convert.ToSingle(str);
            }
            str = ReadINI("AngleData", "sdAngle", "SystemOption.ini");
            if (str != "")
            {
                SCM.sdAngle = Convert.ToSingle(str);
            }
            str = ReadINI("AngleData", "ptAngle", "SystemOption.ini");
            if (str != "")
            {
                SCM.ptAngle = Convert.ToSingle(str);
            }
            str = ReadINI("AngleData", "rvAngle", "SystemOption.ini");
            if (str != "")
            {
                SCM.rvAngle = Convert.ToSingle(str);
            }
            str = ReadINI("AngleData", "fsAngle", "SystemOption.ini");
            if (str != "")
            {
                SCM.fsAngle = Convert.ToSingle(str);
            }
            SCM.limit_azangle = SCM.azAngle;
            if (SCM.limit_azangle >= SCM.Limit_angleL)
            {
                this.labelDnLimDn.BackColor = Color.Tomato;
                this.labelDnLimTop.BackColor = Color.GreenYellow;
            }
            else if (SCM.limit_azangle <= -SCM.Limit_angleL)
            {
                this.labelDnLimDn.BackColor = Color.GreenYellow;
                this.labelDnLimTop.BackColor = Color.Tomato;
            }
            str = ReadINI("AngleData", "azAngleZero", "SystemOption.ini");
            if (str != "")
            {
                SCM.azAngleZero = Convert.ToSingle(str);
            }
            str = ReadINI("AngleData", "elAngleZero", "SystemOption.ini");
            if (str != "")
            {
                SCM.elAngleZero = Convert.ToSingle(str);
            }
            str = ReadINI("AngleData", "dnAngleZero", "SystemOption.ini");
            if (str != "")
            {
                SCM.dnAngleZero = Convert.ToSingle(str);
            }
            str = ReadINI("AngleData", "sdAngleZero", "SystemOption.ini");
            if (str != "")
            {
                SCM.sdAngleZero = Convert.ToSingle(str);
            }
            str = ReadINI("AngleData", "ptAngleZero", "SystemOption.ini");
            if (str != "")
            {
                SCM.ptAngleZero = Convert.ToSingle(str);
            }
            str = ReadINI("AngleData", "rvAngleZero", "SystemOption.ini");
            if (str != "")
            {
                SCM.rvAngleZero = Convert.ToSingle(str);
            }
            str = ReadINI("AntnaMode", "AntnaMode", "SystemOption.ini");
            string[] separator = new string[] { "," };
            string[] strArray2 = str.Split(separator, StringSplitOptions.None);
            for (int i = 0; i < strArray2.Length; i++)
            {
                if (strArray2[i] != "")
                {
                    Array.Resize<string>(ref SCM.AntnaMode, i + 1);
                    SCM.AntnaMode[i] = strArray2[i];
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("Main--LoadOptionINI + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void Main_FormClosing(object sender, FormClosingEventArgs e)
    {
        try
        {
            WriteSystemOption();
        }
        catch
        {
            Environment.Exit(Environment.ExitCode);
        }
    }

    private void Main_Load(object sender, EventArgs e)
    {
        try
        {
            new MainShow().Show();
            Thread.CurrentThread.IsBackground = true;
            base.Width = 0x550;
            base.Height = 0x2e0;
            base.Left = 0;
            base.Top = 0;
            this.listBoxSystem.Items[2] = " 系统状态: 设备未连接";
            this.listBoxSystem.Items[3] = " 仪器状态: 仪器未连接";
            this.LoadOptionINI();
            this.InitPNA();
            if (define.ConnetDevice)
            {
                this.InitCom232();
                this.InitDevice();
            }
            this.InitSysVar();
            GraphicsPath path = new GraphicsPath();
            path.AddEllipse(0, 0, 20, 20);
            this.labelElLimDn.Region = new Region(path);
            this.labelElLimTop.Region = new Region(path);
            this.labelSdLimDn.Region = new Region(path);
            this.labelSdLimTop.Region = new Region(path);
            this.labelDnLimDn.Region = new Region(path);
            this.labelDnLimTop.Region = new Region(path);
            this.labelRvLimDn.Region = new Region(path);
            this.labelRvLimTop.Region = new Region(path);
            this.labelPtLimDn.Region = new Region(path);
            this.labelPtLimTop.Region = new Region(path);
            this.labelFsLimTop.Region = new Region(path);
            this.labelFsLimUP.Region = new Region(path);
            path.Dispose();
            this.label51.Text = DateTime.Now.ToString("yyyy年MM月dd日");
            int num = 3;
            num++;
            this.listBoxSystem.Items[num] = " 方位轴转动范围——(0\x00b0～360\x00b0)";
            num++;
            this.listBoxSystem.Items[num] = " 接收轴转动范围——(0\x00b0～360\x00b0) ";
            num++;
            this.listBoxSystem.Items[num] = " 发射轴转动范围——(0\x00b0～360\x00b0) ";
            this.sBItmap = (Bitmap) this.pictureBox2.BackgroundImage;
            Control.CheckForIllegalCrossThreadCalls = false;
            this.pictureBox1.BackColor = getprams.BackColor;
            this.Main_Resize(sender, e);
            this.gs.getprams1(this.pictureBox1);
            if (!this.gs.DrawZhiJiao())
            {
                MessageBox.Show("画图函数出错");
            }
            this.tabControlRize();
            Array.Resize<string>(ref SCM.testFreqArr, 2);
        }
        catch (Exception exception)
        {
            errLogFunction("Main--Main_Load + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void Main_Resize(object sender, EventArgs e)
    {
        try
        {
            if (base.WindowState != FormWindowState.Minimized)
            {
                this.pictureBox1.Width = ((base.Width - this.groupBoxLeft.Width) - 10) - this.tabControl2.Width;
                this.pictureBox1.Height = ((base.Height - this.tabControl1.Height) - this.label7.Height) - 0x2d;
                this.tabControl2.Height = (this.pictureBox1.Height + this.tabControl1.Height) - 0x19;
                this.tabControl2.Left = (base.Width - this.tabControl2.Width) - 5;
                this.groupBoxLeft.Left = 0;
                this.tabControl1.Width = this.pictureBox1.Width + 15;
                this.pictureBox1.Left = (this.groupBoxLeft.Left + this.groupBoxLeft.Width) + 2;
                this.pictureBox1.Top = this.groupBoxLeft.Left;
                this.tabControl2.Top = this.pictureBox1.Top;
                this.tabControl1.Left = this.pictureBox1.Left;
                this.tabControl1.Top = (this.pictureBox1.Top + this.pictureBox1.Height) + 2;
                this.toolStripButton6.Width = (((((base.Width - this.toolStripButton1.Width) - this.toolStripButton2.Width) - this.toolStripButton4.Width) - this.toolStripButton8.Width) - this.toolStripButton5.Width) - 2;
                this.label7.Left = 750;
                this.label7.Top = (this.tabControl1.Top + this.tabControl1.Height) - 0x12;
                this.gs.getprams1(this.pictureBox1);
                if (!this.gs.DrawZhiJiao())
                {
                    MessageBox.Show("画图函数出错");
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("Main--Main_Resize + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void numUpDownVNAAverage_ValueChanged(object sender, EventArgs e)
    {
        long num = -65535L;
        try
        {
            if ((SCM.PNARunning && !(define.VNAType == "")) && (this.numUpDownVNAAverage.Value != 0M))
            {
                string str;
                if ((define.VNAConnect == "TCPIP") || (define.VNAConnect == "USB"))
                {
                    if (define.SetAVER != "")
                    {
                        str = define.SetAVER + this.numUpDownVNAAverage.Value.ToString() + "\n";
                        num = visa32.viPrintf(visa32.vi, str, str.Length);
                    }
                }
                else if ((define.VNAConnect == "NI") && (define.SetAVER != ""))
                {
                    str = define.SetAVER + this.numUpDownVNAAverage.Value.ToString() + "\n";
                    SCM.device.Write(str);
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("numUpDownVNAAverage_KeyDown + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void numUpDownVNAIFBW_ValueChanged(object sender, EventArgs e)
    {
        long num = -65535L;
        try
        {
            if (SCM.PNARunning && !(define.VNAType == ""))
            {
                string str;
                string[] strArray;
                string[] strArray2;
                if (Convert.ToInt32(this.textBox6.Text) != 0)
                {
                    if ((define.VNAConnect == "TCPIP") || (define.VNAConnect == "USB"))
                    {
                        if (define.SetBAND != "")
                        {
                            str = define.SetBAND + (Convert.ToInt32(this.textBox6.Text) * 0x3e8) + "\n";
                            num = visa32.viPrintf(visa32.vi, str, str.Length);
                        }
                    }
                    else if (define.VNAConnect == "NI")
                    {
                        SCM.testFreqArr[1] = Convert.ToInt32(this.textBox6.Text).ToString();
                        if (define.SetBAND != "")
                        {
                            str = define.SetBAND + (Convert.ToInt32(this.textBox6.Text) * 0x3e8) + "\n";
                            SCM.device.Write(str);
                        }
                    }
                }
                if ((define.VNAConnect == "TCPIP") || (define.VNAConnect == "USB"))
                {
                    strArray2 = new string[] { "," };
                    if (define.SetBAND != "")
                    {
                        str = define.SetBAND.Trim() + "?\n";
                        num = visa32.viPrintf(visa32.vi, str, str.Length);
                        num = visa32.viScanf(visa32.vi, define.ReadData, visa32.BufferString);
                        strArray = visa32.BufferString.ToString().Split(strArray2, StringSplitOptions.None);
                        this.listBoxNVA.Items[5] = "IFBW:" + ((Convert.ToDouble(strArray[0]) / 1000.0)).ToString() + "KHz";
                    }
                }
                else if ((define.VNAConnect == "NI") && (define.SetBAND != ""))
                {
                    strArray2 = new string[] { "," };
                    str = define.SetBAND.Trim() + "?\n";
                    SCM.device.Write(str);
                    strArray = SCM.device.ReadString().Split(strArray2, StringSplitOptions.None);
                    this.listBoxNVA.Items[5] = "IFBW:" + Convert.ToDouble(strArray[0]).ToString() + "dBm";
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("numUpDownVNACenter_KeyDown + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void numUpDownVNAPower_ValueChanged(object sender, EventArgs e)
    {
        long num = -65535L;
        try
        {
            if (SCM.PNARunning && !(define.VNAType == ""))
            {
                if (this.numUpDownVNAPower.Value > 20M)
                {
                    this.numUpDownVNAPower.Value = 0M;
                }
                if (this.numUpDownVNAPower.Value != 0M)
                {
                    string str;
                    if ((define.VNAConnect == "TCPIP") || (define.VNAConnect == "USB"))
                    {
                        if (define.SetPower != "")
                        {
                            str = define.SetPower + this.numUpDownVNAPower.Value.ToString() + "\n";
                            num = visa32.viPrintf(visa32.vi, str, str.Length);
                        }
                    }
                    else if ((define.VNAConnect == "NI") && (define.SetPower != ""))
                    {
                        str = define.SetPower + this.numUpDownVNAPower.Value.ToString() + "\n";
                        SCM.device.Write(str);
                    }
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("numUpDownVNAPower_KeyDown + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void numUpDownVNARLV_ValueChanged(object sender, EventArgs e)
    {
        long num = -65535L;
        try
        {
            if ((SCM.PNARunning && !(define.VNAType == "")) && (Convert.ToInt32(this.textBox6.Text) != 0))
            {
                string str;
                if ((define.VNAConnect == "TCPIP") || (define.VNAConnect == "USB"))
                {
                    if (define.SetRLEV != "")
                    {
                        str = define.SetRLEV + Convert.ToInt32(this.textBox6.Text).ToString() + "\n";
                        num = visa32.viPrintf(visa32.vi, str, str.Length);
                    }
                }
                else if ((define.VNAConnect == "NI") && (define.SetRLEV != ""))
                {
                    str = define.SetRLEV + Convert.ToInt32(this.textBox6.Text).ToString() + "\n";
                    SCM.device.Write(str);
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("numUpDownVNARLV_KeyDown + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    public void OpenTxtData(string ttStr, int n)
    {
        string str = "";
        int index = 0;
        string[] separator = new string[] { "\t", "   ", "," };
        try
        {
            string[] strArray2;
            int num2;
            Array.Resize<define.map>(ref savedata, n + 1);
            Array.Resize<define.map>(ref savedata, n + 1);
            StreamReader reader = new StreamReader(ttStr, Encoding.Default);
            string str2 = ttStr.Substring(ttStr.LastIndexOf(@"\") + 1, (ttStr.IndexOf(".txt") - ttStr.LastIndexOf(@"\")) - 1);
            if (!reader.EndOfStream)
            {
                str = reader.ReadLine();
            }
            if (str.Substring(0, 1) != "!")
            {
                while (!reader.EndOfStream)
                {
                    str = reader.ReadLine();
                    if (str != "")
                    {
                        if (((str.Substring(0, 1) != "测") && (str.Substring(0, 1) != "T")) && (str.Substring(0, 4) != "Freq"))
                        {
                            strArray2 = str.Split(separator, StringSplitOptions.None);
                            if (strArray2.Length > 1)
                            {
                                Array.Resize<float>(ref savedata[n].Angle, index + 1);
                                Array.Resize<float>(ref savedata[n].Elec, index + 1);
                                savedata[n].Angle[index] = Convert.ToSingle(strArray2[0]);
                                savedata[n].Elec[index] = Convert.ToSingle(strArray2[1]);
                                index++;
                            }
                        }
                        else
                        {
                            strArray2 = str.Split(separator, StringSplitOptions.None);
                            num2 = 0;
                            while (num2 < strArray2.Length)
                            {
                                if (strArray2[num2].Length >= 4)
                                {
                                    if ((strArray2[num2].Substring(0, 4) == "测试频率") || (strArray2[num2].Substring(0, 4) == "Freq"))
                                    {
                                        savedata[n].Freq = Convert.ToString(strArray2[num2].Substring(5, (strArray2[num2].Length - 5) - 3));
                                    }
                                    if ((strArray2[num2].Substring(0, 4) == "测试时间") || (strArray2[num2].Substring(0, 4) == "Date"))
                                    {
                                        savedata[n].sDataTime = Convert.ToDateTime(strArray2[num2].Substring(5));
                                    }
                                    if ((strArray2[num2].Substring(0, 4) == "测试状态") || (strArray2[num2].Substring(0, 4) == "Stat"))
                                    {
                                        string[] strArray3 = new string[] { ",", "   ", " " };
                                        string[] strArray4 = strArray2[num2].Split(strArray3, StringSplitOptions.None);
                                        savedata[n].Face = strArray4[0].Substring(5, strArray4[0].Length - 5);
                                        savedata[n].Across = strArray4[1];
                                        savedata[n].Pol = strArray4[2];
                                    }
                                    if (strArray2[num2].Substring(0, 4) == "测试平面")
                                    {
                                        savedata[n].Face = strArray2[num2].Substring(5);
                                        if (savedata[n].Face == "H")
                                        {
                                            savedata[n].Face = "水平面";
                                        }
                                        else if (savedata[n].Face == "V")
                                        {
                                            savedata[n].Face = "垂直面";
                                        }
                                    }
                                    if (strArray2[num2].Substring(0, 4) == "极化方式")
                                    {
                                        savedata[n].Pol = strArray2[num2].Substring(5);
                                        if (savedata[n].Pol == "H")
                                        {
                                            savedata[n].Pol = "水平";
                                        }
                                        else if (savedata[n].Pol == "E")
                                        {
                                            savedata[n].Pol = "垂直";
                                        }
                                        else if (savedata[n].Pol == "+45")
                                        {
                                            savedata[n].Pol = "+45\x00b0";
                                        }
                                        else if (savedata[n].Pol == "-45")
                                        {
                                            savedata[n].Pol = "-45\x00b0";
                                        }
                                    }
                                }
                                num2++;
                            }
                        }
                    }
                }
                goto Label_0C55;
            }
            strArray2 = str.Split(separator, StringSplitOptions.None);
            if (strArray2[1] == "NAME")
            {
                savedata[n].Mode = strArray2[2];
            }
            else
            {
                savedata[n].Mode = strArray2[1];
            }
        Label_0C42:
            while (!reader.EndOfStream)
            {
                str = reader.ReadLine();
                if (str != "")
                {
                    separator = new string[] { "\t", "   " };
                    strArray2 = str.Split(separator, StringSplitOptions.None);
                    if (strArray2.Length > 1)
                    {
                        if ((Convert.ToString(strArray2[0]).Substring(0, 1) != "#") && (Convert.ToString(strArray2[0]).Substring(0, 1) != "!"))
                        {
                            Array.Resize<float>(ref savedata[n].Angle, index + 1);
                            Array.Resize<float>(ref savedata[n].Elec, index + 1);
                            savedata[n].Angle[index] = Convert.ToSingle(strArray2[0]);
                            savedata[n].Elec[index] = Convert.ToSingle(strArray2[1]);
                            index++;
                        }
                        else
                        {
                            if (Convert.ToString(strArray2[0]) == "!")
                            {
                                strArray2 = str.Split(separator, StringSplitOptions.None);
                                if (strArray2[1].Trim() == "NAME")
                                {
                                    savedata[n].Mode = strArray2[2];
                                }
                                strArray2 = str.Split(separator, StringSplitOptions.None);
                                if (strArray2[1].Trim() == "DATE")
                                {
                                    savedata[n].sDataTime = Convert.ToDateTime(strArray2[2]);
                                }
                                strArray2 = str.Split(separator, StringSplitOptions.None);
                                if (strArray2[1].Trim() == "FREQ")
                                {
                                    if (strArray2[2].Contains("MHz"))
                                    {
                                        savedata[n].Freq = Convert.ToString(strArray2[2].Substring(0, strArray2[2].Length - 3));
                                    }
                                    else
                                    {
                                        savedata[n].Freq = Convert.ToString(strArray2[2]);
                                    }
                                }
                                strArray2 = str.Split(separator, StringSplitOptions.None);
                                if (strArray2[1].Trim() == "COUNT")
                                {
                                    savedata[n].point = Convert.ToInt16(strArray2[2]);
                                }
                                strArray2 = str.Split(separator, StringSplitOptions.None);
                                if (strArray2[1].Trim() == "GAIN")
                                {
                                    savedata[n].Gain = Convert.ToSingle(strArray2[2]);
                                }
                                strArray2 = str.Split(separator, StringSplitOptions.None);
                                if (strArray2[1].Trim() == "PLANE")
                                {
                                    savedata[n].Face = strArray2[2];
                                }
                                if (savedata[n].Face == "H")
                                {
                                    savedata[n].Face = "水平面";
                                }
                                else if (savedata[n].Face == "V")
                                {
                                    savedata[n].Face = "垂直面";
                                }
                                strArray2 = str.Split(separator, StringSplitOptions.None);
                                if (strArray2[1].Trim() == "MAIN")
                                {
                                    savedata[n].Across = strArray2[2];
                                }
                                if (savedata[n].Across == "M")
                                {
                                    savedata[n].Across = "主极化";
                                }
                                else if (savedata[n].Across == "A")
                                {
                                    savedata[n].Across = "交叉极化";
                                }
                                strArray2 = str.Split(separator, StringSplitOptions.None);
                                if (strArray2[1].Trim() == "POLARIZE")
                                {
                                    savedata[n].Pol = strArray2[2];
                                }
                                if (savedata[n].Pol == "H")
                                {
                                    savedata[n].Pol = "水平";
                                }
                                else if (savedata[n].Pol == "E")
                                {
                                    savedata[n].Pol = "垂直";
                                }
                                else if (savedata[n].Pol == "+45")
                                {
                                    savedata[n].Pol = "+45\x00b0";
                                }
                                else if (savedata[n].Pol == "-45")
                                {
                                    savedata[n].Pol = "-45\x00b0";
                                }
                                if (str.Split(separator, StringSplitOptions.None)[1].Trim() == "PORT")
                                {
                                    savedata[n].port = Convert.ToInt16("0");
                                }
                                strArray2 = str.Split(separator, StringSplitOptions.None);
                                goto Label_0C42;
                            }
                            if (Convert.ToString(strArray2[0]).Substring(0, 1) == "#")
                            {
                                strArray2 = str.Split(separator, StringSplitOptions.None);
                                for (num2 = 0; num2 < strArray2.Length; num2++)
                                {
                                    if ((strArray2[num2].Length >= 3) && ((strArray2[num2].Substring(0, 2) == "倾角") || (strArray2[num2].Substring(0, 2) == "Obl")))
                                    {
                                        savedata[n].BeamOffset = Convert.ToSingle(strArray2[num2].Split(new char[] { 0xff1a })[1].Substring(0, strArray2[num2].Split(new char[] { 0xff1a })[1].Length - 2));
                                    }
                                }
                            }
                        }
                    }
                }
            }
        Label_0C55:
            reader.Close();
        }
        catch (Exception exception)
        {
            errLogFunction("OpenTxtData + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    public void OpenZero()
    {
        try
        {
            if (define.OpenZeroButton)
            {
                this.buttonAzCa.Enabled = true;
                this.buttonElCa.Enabled = true;
                this.buttonSdCa.Enabled = true;
                this.buttonDnCa.Enabled = true;
                this.buttonRvCa.Enabled = true;
                this.buttonPtCa.Enabled = true;
                this.buttonFsCa.Enabled = true;
                this.buttonAzXL.Enabled = true;
                this.buttonElXL.Enabled = true;
                this.buttonSdXL.Enabled = true;
                this.buttonRvXL.Enabled = true;
                define.OpenZeroButton = false;
            }
            else
            {
                this.buttonAzCa.Enabled = false;
                this.buttonElCa.Enabled = false;
                this.buttonSdCa.Enabled = false;
                this.buttonDnCa.Enabled = false;
                this.buttonRvCa.Enabled = false;
                this.buttonPtCa.Enabled = false;
                this.buttonFsCa.Enabled = false;
                this.buttonAzXL.Enabled = false;
                this.buttonElXL.Enabled = false;
                this.buttonSdXL.Enabled = false;
                this.buttonRvXL.Enabled = false;
            }
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void OptAndRegCompare()
    {
        try
        {
            define.countkeyReg = ((Convert.ToInt64(define.countkeyReg) - 0x23L) / 7L).ToString();
            define.datakeyReg = ((Convert.ToInt64(define.datakeyReg) - 0x23L) / 7L).ToString();
            if (define.countkeyOpt != define.countkeyReg)
            {
                MessageBox.Show("系统软件试用到期！", "错误信息", MessageBoxButtons.OK);
                base.Close();
                Application.Exit();
                Environment.Exit(Environment.ExitCode);
            }
            else if (define.datakeyOpt != define.datakeyReg)
            {
                MessageBox.Show("系统软件试用到期，请联系销售厂家！", "错误信息", MessageBoxButtons.OK);
                base.Close();
                Application.Exit();
                Environment.Exit(Environment.ExitCode);
            }
            else
            {
                this.RegWriteData();
            }
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void OptionForm_Click(object sender, EventArgs e)
    {
        try
        {
            if (this.systemOption != null)
            {
                if (this.systemOption.IsDisposed)
                {
                    this.systemOption = new SystemOption();
                    this.systemOption.Show();
                    this.systemOption.Focus();
                }
                else
                {
                    this.systemOption.Show();
                    this.systemOption.Focus();
                }
            }
            else
            {
                this.systemOption = new SystemOption();
                this.systemOption.Show();
                this.systemOption.Focus();
            }
        }
        catch (Exception exception)
        {
            errLogFunction("Main--OptionForm_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void PassDoubleData()
    {
        try
        {
            float[] array = new float[1];
            float[] numArray2 = new float[1];
            float[] numArray3 = new float[1];
            float num3 = 0f;
            for (int i = 1; i < SCM.testFreqArr.Length; i++)
            {
                if (SCM.testFreqArr[i] == "")
                {
                    break;
                }
                if (SCM.testFX == 1)
                {
                    int num5 = this.AzD3Angle[i].Length - 1;
                    for (int m = 0; m < (num5 / 2); m++)
                    {
                        float num = this.AzD3Angle[i][num5 - m];
                        this.AzD3Angle[i][num5 - m] = this.AzD3Angle[i][m];
                        this.AzD3Angle[i][m] = num;
                        float num2 = this.RvD3Angle[i][num5 - m];
                        this.RvD3Angle[i][num5 - m] = this.RvD3Angle[i][m];
                        this.RvD3Angle[i][m] = num2;
                        num3 = this.D3Elec[i][num5 - m];
                        this.D3Elec[i][num5 - m] = this.D3Elec[i][m];
                        this.D3Elec[i][m] = num3;
                    }
                }
                Array.Resize<float>(ref array, 1);
                Array.Resize<float>(ref numArray2, 1);
                Array.Resize<float>(ref numArray3, 1);
                array[0] = this.AzD3Angle[i][0];
                numArray2[0] = this.RvD3Angle[i][0];
                numArray3[0] = this.D3Elec[i][0];
                int index = 0;
                for (int j = 1; j < this.RvD3Angle[i].Length; j++)
                {
                    if (!(numArray2[index] == this.RvD3Angle[i][j]))
                    {
                        index++;
                        Array.Resize<float>(ref array, index + 1);
                        Array.Resize<float>(ref numArray2, index + 1);
                        Array.Resize<float>(ref numArray3, index + 1);
                        array[index] = this.AzD3Angle[i][j];
                        numArray2[index] = this.RvD3Angle[i][j];
                        numArray3[index] = this.D3Elec[i][j];
                    }
                }
                Save3DDataPoint(ref array, ref numArray2, ref numArray3, (double) define.RvCutAngle);
                int length = this.saveAzD3Angle[i].Length;
                Array.Resize<float>(ref this.saveAzD3Angle[i], length + array.Length);
                Array.Resize<float>(ref this.saveRvD3Angle[i], length + array.Length);
                Array.Resize<float>(ref this.saveD3Elec[i], length + array.Length);
                for (int k = 0; k < array.Length; k++)
                {
                    this.saveAzD3Angle[i][k + length] = array[k];
                    this.saveRvD3Angle[i][k + length] = numArray2[k];
                    this.saveD3Elec[i][k + length] = numArray3[k];
                }
            }
            if (SCM.autoTestStart > 0)
            {
                SCM.autoTestend++;
            }
        }
        catch (Exception exception)
        {
            errLogFunction("PassDoubleData + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void ptDisplay()
    {
        try
        {
            float num = this.pictureBoxPt.Height / 2;
            float num2 = this.pictureBoxPt.Height / 2;
            Bitmap image = new Bitmap(this.sBItmap);
            Graphics graphics = Graphics.FromImage(image);
            Pen pen = new Pen(Color.Black);
            graphics.InterpolationMode = InterpolationMode.High;
            graphics.SmoothingMode = SmoothingMode.AntiAlias;
            graphics.TranslateTransform((float) (this.pictureBoxPt.Height / 2), (float) (this.pictureBoxPt.Height / 2));
            graphics.RotateTransform(SCM.ptAngle);
            GraphicsPath path = new GraphicsPath();
            path.AddLine((float) -7f, (float) 0f, (float) 0f, (float) (0f - ((num / 6f) * 5f)));
            path.AddLine((float) 0f, (float) (0f - ((num / 6f) * 5f)), (float) 7f, (float) 0f);
            path.CloseFigure();
            PathGradientBrush brush = new PathGradientBrush(path);
            brush.CenterColor = Color.Black;
            brush.SurroundColors = new Color[] { Color.White };
            graphics.FillPath(brush, path);
            graphics.ResetTransform();
            SolidBrush brush2 = new SolidBrush(Color.LightBlue);
            graphics.FillEllipse(brush2, (float) (num - 10f), (float) (num - 10f), (float) 20f, (float) 20f);
            this.pictureBoxPt.Image = image;
            pen.Dispose();
            graphics.Dispose();
        }
        catch (Exception exception)
        {
            errLogFunction("ptDisplay + " + exception.ToString());
        }
    }

    private void radButtonTestZhouAz_CheckedChanged(object sender, EventArgs e)
    {
        SCM.testZhou = 1;
    }

    private void radButtonTestZhouEl_CheckedChanged(object sender, EventArgs e)
    {
        SCM.testZhou = 2;
    }

    private void radButtonTestZhouSd_CheckedChanged(object sender, EventArgs e)
    {
        SCM.testZhou = 3;
    }

    private void ReadElec()
    {
        try
        {
            bool flag;
            goto Label_05BC;
        Label_0007:
            this.StopAngle = SCM.azAngle - this.StartAngle;
            if (this.StopAngle < 0f)
            {
                this.StopAngle += 360f;
            }
            if (this.TestOver)
            {
                return;
            }
            if ((SCM.autoTestStart == 3) || (SCM.autoTestend == 1))
            {
                int num;
                if ((define.VNAConnect == "TCPIP") || (define.VNAConnect == "USB"))
                {
                    if (SCM.testMode == 2)
                    {
                        for (num = 1; num <= 9; num++)
                        {
                            if (!(SCM.testFreqArr[num] != ""))
                            {
                                break;
                            }
                            Array.Resize<float>(ref this.AzD3Angle[num], this.sPointNum + 1);
                            Array.Resize<float>(ref this.RvD3Angle[num], this.sPointNum + 1);
                            Array.Resize<float>(ref this.D3Elec[num], this.sPointNum + 1);
                            this.str = define.ActiveMark[num] + "\n";
                            this.flag = visa32.viPrintf(visa32.vi, this.str, this.str.Length);
                            this.flags = visa32.viScanf(visa32.vi, define.ReadData, visa32.BufferString);
                            this.rData = visa32.BufferString.ToString();
                            this.adata = this.rData.Split(this.strSplit, StringSplitOptions.None);
                            this.D3Elec[num][this.sPointNum] = Convert.ToSingle(this.adata[0]);
                            this.AzD3Angle[num][this.sPointNum] = Convert.ToInt32(SCM.azAngle);
                            this.RvD3Angle[num][this.sPointNum] = SCM.rvAngle;
                        }
                    }
                    else if (SCM.testMode == 1)
                    {
                        Array.Resize<float>(ref this.AzD3Angle[1], this.sPointNum + 1);
                        Array.Resize<float>(ref this.RvD3Angle[1], this.sPointNum + 1);
                        Array.Resize<float>(ref this.D3Elec[1], this.sPointNum + 1);
                        this.str = define.ActiveMark[1] + "\n";
                        this.flag = visa32.viPrintf(visa32.vi, this.str, this.str.Length);
                        this.flags = visa32.viScanf(visa32.vi, define.ReadData, visa32.BufferString);
                        this.rData = visa32.BufferString.ToString();
                        this.adata = this.rData.Split(this.strSplit, StringSplitOptions.None);
                        this.D3Elec[1][this.sPointNum] = Convert.ToSingle(this.adata[0]);
                        this.AzD3Angle[1][this.sPointNum] = Convert.ToInt32(SCM.azAngle);
                        this.RvD3Angle[1][this.sPointNum] = SCM.rvAngle;
                    }
                }
                else if (define.VNAConnect == "NI")
                {
                    if (SCM.testMode == 2)
                    {
                        for (num = 1; num <= 9; num++)
                        {
                            if (!(SCM.testFreqArr[num] != ""))
                            {
                                break;
                            }
                            Array.Resize<float>(ref this.AzD3Angle[num], this.sPointNum + 1);
                            Array.Resize<float>(ref this.RvD3Angle[num], this.sPointNum + 1);
                            Array.Resize<float>(ref this.D3Elec[num], this.sPointNum + 1);
                            if (define.AntName == "8753")
                            {
                                SCM.device.Write(define.OutMarK + "\n");
                            }
                            SCM.device.Write(define.ActiveMark[num] + "\n");
                            Thread.Sleep(30);
                            this.rData = SCM.device.ReadString();
                            this.adata = this.rData.Split(this.strSplit, StringSplitOptions.None);
                            this.D3Elec[1][this.sPointNum] = Convert.ToSingle(this.adata[0]);
                            this.AzD3Angle[1][this.sPointNum] = Convert.ToInt32((float) (SCM.azAngle + this.stsAngle));
                            this.RvD3Angle[1][this.sPointNum] = SCM.rvAngle;
                        }
                    }
                    else if (SCM.testMode == 1)
                    {
                        Array.Resize<float>(ref this.AzD3Angle[1], this.sPointNum + 1);
                        Array.Resize<float>(ref this.RvD3Angle[1], this.sPointNum + 1);
                        Array.Resize<float>(ref this.D3Elec[1], this.sPointNum + 1);
                        this.rData = "-20";
                        Thread.Sleep(30);
                        this.adata = this.rData.Split(this.strSplit, StringSplitOptions.None);
                        this.D3Elec[1][this.sPointNum] = Convert.ToSingle(this.adata[0]);
                        this.AzD3Angle[1][this.sPointNum] = Convert.ToInt32((float) (SCM.azAngle + this.stsAngle));
                        this.RvD3Angle[1][this.sPointNum] = SCM.rvAngle;
                    }
                }
                Thread.Sleep(15);
                this.Drawm3D();
                this.sPointNum++;
            }
        Label_05BC:
            flag = true;
            goto Label_0007;
        }
        catch (Exception exception)
        {
            errLogFunction("ReadElec: + " + exception.ToString());
        }
    }

    public static string ReadINI(string Section, string Key, string filename)
    {
        try
        {
            StringBuilder retVal = new StringBuilder(500);
            string filePath = AppDomain.CurrentDomain.BaseDirectory + filename;
            int num = define.GetPrivateProfileString(Section, Key, "", retVal, 0x400, filePath);
            return retVal.ToString();
        }
        catch (Exception exception)
        {
            errLogFunction("Main--ReadINI + " + exception.ToString());
            return "";
        }
    }

    private void ReadPassData()
    {
        try
        {
            string[] array = new string[] { "" };
            string[] strArray2 = new string[] { "" };
            StreamReader reader = new StreamReader(AppDomain.CurrentDomain.BaseDirectory + "PsData.dll", Encoding.Default);
            Array.Resize<string>(ref array, 3);
            Array.Resize<string>(ref strArray2, 3);
            array[0] = reader.ReadLine();
            array[1] = reader.ReadLine();
            array[2] = reader.ReadLine();
            reader.Close();
            array[0] = ((Convert.ToInt32(array[0]) - 0xd8) / 0x48).ToString();
            array[1] = ((Math.Sqrt((double) Convert.ToInt32(array[1])) - 65.0) / 13.0).ToString();
            int num = (Convert.ToInt32(array[2]) - 0xd8) / 0x48;
            array[2] = num.ToString();
            string str = DateTime.Today.Year.ToString();
            string str2 = DateTime.Today.Month.ToString();
            string str3 = DateTime.Today.Day.ToString();
            if (Convert.ToInt32(str2) < 10)
            {
                str2 = "0" + str2;
            }
            if (Convert.ToInt32(str3) < 10)
            {
                str3 = "0" + str3;
            }
            strArray2[0] = str + str2 + str3;
            strArray2[1] = "20141101";
            strArray2[2] = "3000";
            if (Convert.ToInt64(array[0]) >= Convert.ToInt64(strArray2[1]))
            {
                if (MessageBox.Show("系统软件试用到期，请输入密码！", "提示信息", MessageBoxButtons.OKCancel) == DialogResult.OK)
                {
                    new PassWordMessage().ShowDialog(this);
                    if (!define.login && !define.login)
                    {
                        base.Close();
                        Application.Exit();
                        Environment.Exit(Environment.ExitCode);
                    }
                    if (Convert.ToInt16(array[2]) > 10)
                    {
                        MessageBox.Show("使用次数已到，请联系生产厂家！", "提示信息", MessageBoxButtons.OK);
                        base.Close();
                        Application.Exit();
                        Environment.Exit(Environment.ExitCode);
                    }
                    if (define.login)
                    {
                        num = Convert.ToInt32(array[2]) + 1;
                        array[2] = num.ToString();
                    }
                }
                else
                {
                    base.Close();
                    Application.Exit();
                    Environment.Exit(Environment.ExitCode);
                }
            }
            if (Convert.ToInt64(array[0]) > Convert.ToInt64(strArray2[0]))
            {
                MessageBox.Show("系统时间错误！", "错误信息", MessageBoxButtons.OK);
                base.Close();
                Application.Exit();
                Environment.Exit(Environment.ExitCode);
            }
            else
            {
                array[0] = strArray2[0];
            }
            if (Convert.ToInt32(array[1]) >= Convert.ToInt32(strArray2[2]))
            {
                MessageBox.Show("系统软件试用到期！", "错误信息", MessageBoxButtons.OK);
                base.Close();
                Application.Exit();
                Environment.Exit(Environment.ExitCode);
            }
            else
            {
                array[1] = (Convert.ToInt32(array[1]) + 1).ToString();
            }
            StreamWriter writer = new StreamWriter(AppDomain.CurrentDomain.BaseDirectory + "PsData.dll", false, Encoding.Default);
            array[0] = ((Convert.ToInt32(array[0]) * 0x48) + 0xd8).ToString();
            array[1] = Math.Pow((double) ((Convert.ToInt32(array[1]) * 13) + 0x41), 2.0).ToString();
            array[2] = ((Convert.ToInt32(array[2]) * 0x48) + 0xd8).ToString();
            writer.WriteLine(array[0]);
            writer.WriteLine(array[1]);
            writer.WriteLine(array[2]);
            writer.Close();
        }
        catch (Exception)
        {
            MessageBox.Show("系统文件丢失！", "错误信息", MessageBoxButtons.OK);
            base.Close();
            Application.Exit();
            Environment.Exit(Environment.ExitCode);
        }
    }

    private void RegReadData()
    {
        string[] strArray = new string[] { "" };
        try
        {
            using (this.rsg = Registry.CurrentUser.OpenSubKey(@"Software\sld", true))
            {
                if (this.rsg == null)
                {
                    MessageBox.Show("未注册有效信息，系统退出！", "错误信息", MessageBoxButtons.OK);
                    Environment.Exit(Environment.ExitCode);
                }
                string[] valueNames = this.rsg.GetValueNames();
                foreach (string str in valueNames)
                {
                    if ((this.rsg.GetValue("Count") != null) || (this.rsg.GetValue("Data") != null))
                    {
                        define.countkeyReg = this.rsg.GetValue("Count").ToString();
                        define.datakeyReg = this.rsg.GetValue("Data").ToString();
                    }
                    else
                    {
                        MessageBox.Show("没有检测到有效的配置信息，请检查软件是否完整！确定后系统退出！", "错误信息", MessageBoxButtons.OK);
                        base.Close();
                        Application.Exit();
                        Environment.Exit(Environment.ExitCode);
                    }
                }
                this.rsg.Close();
            }
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void RegWriteData()
    {
        string[] strArray = new string[] { "" };
        try
        {
            string str = DateTime.Today.Year.ToString();
            string str2 = DateTime.Today.Month.ToString();
            string str3 = DateTime.Today.Day.ToString();
            string str4 = DateTime.Now.Hour.ToString();
            string str5 = DateTime.Now.Minute.ToString();
            string str6 = DateTime.Now.Second.ToString();
            if (Convert.ToInt64(str2) < 10L)
            {
                str2 = "0" + str2;
            }
            if (Convert.ToInt64(str3) < 10L)
            {
                str3 = "0" + str3;
            }
            if (Convert.ToInt64(str4) < 10L)
            {
                str4 = "0" + str4;
            }
            if (Convert.ToInt64(str5) < 10L)
            {
                str5 = "0" + str5;
            }
            if (Convert.ToInt64(str6) < 10L)
            {
                str6 = "0" + str6;
            }
            string str7 = str + str2 + str3 + str4 + str5 + str6;
            Registry.CurrentUser.CreateSubKey(@"Software\sld");
            this.rsg = Registry.CurrentUser.OpenSubKey(@"Software\sld", true);
            this.rsg.SetValue("Count", Convert.ToString((long) (((Convert.ToInt64(define.countkeyOpt) + 1L) * 7L) + 0x23L)));
            this.rsg.SetValue("Data", Convert.ToString((long) ((Convert.ToInt64(str7) * 7L) + 0x23L)));
            this.rsg.Close();
            StreamWriter writer = new StreamWriter(AppDomain.CurrentDomain.BaseDirectory + "PsData.dll", false, Encoding.Default);
            str7 = ((Convert.ToInt64(str7) * 12L) + 0x24L).ToString();
            writer.WriteLine(str7);
            writer.WriteLine((long) (((Convert.ToInt64(define.countkeyOpt) + 1L) * 12L) + 0x24L));
            writer.WriteLine((long) (((Convert.ToInt64(define.countkey) + 1L) * 12L) + 0x24L));
            writer.Close();
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void rvDisplay()
    {
        try
        {
            float num = this.pictureBoxRv.Height / 2;
            float num2 = this.pictureBoxRv.Height / 2;
            Bitmap image = new Bitmap(this.sBItmap);
            Graphics graphics = Graphics.FromImage(image);
            Pen pen = new Pen(Color.Black);
            graphics.InterpolationMode = InterpolationMode.High;
            graphics.SmoothingMode = SmoothingMode.AntiAlias;
            graphics.TranslateTransform((float) (this.pictureBoxRv.Height / 2), (float) (this.pictureBoxRv.Height / 2));
            graphics.RotateTransform(SCM.rvAngle);
            GraphicsPath path = new GraphicsPath();
            path.AddLine((float) -7f, (float) 0f, (float) 0f, (float) (0f - ((num / 6f) * 5f)));
            path.AddLine((float) 0f, (float) (0f - ((num / 6f) * 5f)), (float) 7f, (float) 0f);
            path.CloseFigure();
            PathGradientBrush brush = new PathGradientBrush(path);
            brush.CenterColor = Color.Black;
            brush.SurroundColors = new Color[] { Color.White };
            graphics.FillPath(brush, path);
            graphics.ResetTransform();
            SolidBrush brush2 = new SolidBrush(Color.LightBlue);
            graphics.FillEllipse(brush2, (float) (num - 10f), (float) (num - 10f), (float) 20f, (float) 20f);
            this.pictureBoxRv.Image = image;
            pen.Dispose();
            graphics.Dispose();
        }
        catch (Exception exception)
        {
            errLogFunction("rvDisplay + " + exception.ToString());
        }
    }

    private static void Save3DDataPoint(ref float[] MainDataAzAngle, ref float[] MainDataRvAngle, ref float[] MainDataElec, double SaveAngle)
    {
        try
        {
            int num4;
            float[] numArray = new float[MainDataAzAngle.Length];
            float[] numArray2 = new float[MainDataRvAngle.Length];
            float[] numArray3 = new float[MainDataElec.Length];
            numArray = MainDataAzAngle;
            numArray2 = MainDataRvAngle;
            numArray3 = MainDataElec;
            ArrayList list = new ArrayList();
            ArrayList list2 = new ArrayList();
            ArrayList list3 = new ArrayList();
            int length = 0;
            double num2 = 0.0;
            length = MainDataAzAngle.Length;
            int index = 0;
            list.Add(Convert.ToSingle(numArray[0]));
            list2.Add(Convert.ToSingle(numArray2[0]));
            list3.Add(Convert.ToSingle(numArray3[0]));
            for (num4 = 0; num4 < length; num4++)
            {
                if (!(numArray2[num4] == numArray2[index]))
                {
                    index++;
                    list.Add(Convert.ToSingle(numArray[num4]));
                    list2.Add(Convert.ToSingle(numArray2[num4]));
                    list3.Add(Convert.ToSingle(numArray3[num4]));
                }
            }
            numArray = new float[list.Count];
            numArray2 = new float[list2.Count];
            numArray3 = new float[list3.Count];
            numArray = (float[]) list.ToArray(typeof(float));
            numArray2 = (float[]) list2.ToArray(typeof(float));
            numArray3 = (float[]) list3.ToArray(typeof(float));
            for (num4 = 0; num4 < (numArray2.Length - 1); num4++)
            {
                for (int j = num4 + 1; j < numArray2.Length; j++)
                {
                    if (numArray2[num4] > numArray2[j])
                    {
                        float num6 = numArray[num4];
                        numArray[num4] = numArray[j];
                        numArray[j] = num6;
                        float num7 = numArray2[num4];
                        numArray2[num4] = numArray2[j];
                        numArray2[j] = num7;
                        float num8 = numArray3[num4];
                        numArray3[num4] = numArray3[j];
                        numArray3[j] = num8;
                    }
                }
            }
            if (numArray2[0] > (((int) numArray2[0]) + SaveAngle))
            {
                num2 = 0.0;
            }
            else if (numArray2[0] > ((int) numArray2[0]))
            {
                num2 = ((int) numArray2[0]) + SaveAngle;
            }
            else
            {
                num2 = (int) numArray2[0];
            }
            list = new ArrayList();
            list2 = new ArrayList();
            list3 = new ArrayList();
            float num9 = 0f;
            float num10 = 0f;
            float num11 = 0f;
            float num12 = 0f;
            for (num4 = 1; num4 < numArray2.Length; num4++)
            {
                if (numArray2[num4] < num2)
                {
                    num9 = numArray2[num4];
                    num11 = numArray3[num4];
                }
                else
                {
                    num10 = numArray2[num4];
                    num12 = numArray3[num4];
                    list2.Add(Convert.ToSingle(num2));
                    list.Add(Convert.ToSingle(numArray[num4]));
                    if (num9 < -180f)
                    {
                        num9 += 360f;
                    }
                    if ((num10 < -179f) && (num2 == 180.0))
                    {
                        list3.Add(Convert.ToSingle((double) ((((num2 - (num10 + 360f)) * (num11 - num12)) / ((double) (num9 - (num10 + 360f)))) + num12)));
                    }
                    else
                    {
                        list3.Add(Convert.ToSingle((double) ((((num2 - num10) * (num11 - num12)) / ((double) (num9 - num10))) + num12)));
                    }
                    if ((num10 < -179f) && (num2 == 180.0))
                    {
                        num2 = -180.0 + SaveAngle;
                    }
                    else
                    {
                        num2 += SaveAngle;
                    }
                    if (num2 >= 360.0)
                    {
                        num2 -= 360.0;
                    }
                    num9 = num10;
                    num11 = num12;
                }
            }
            for (int i = 0; i < list2.Count; i++)
            {
                list2[i] = Convert.ToSingle(list2[i]) + 179f;
            }
            if (list2.Count <= (360.0 / SaveAngle))
            {
                list.Add(Convert.ToSingle(list[0]));
                list2.Add(Convert.ToSingle(list2[list2.Count - 1]) + Convert.ToSingle(SaveAngle));
                list3.Add(Convert.ToSingle(list3[0]));
            }
            MainDataAzAngle = new float[list.Count];
            MainDataRvAngle = new float[list2.Count];
            MainDataElec = new float[list3.Count];
            MainDataAzAngle = (float[]) list.ToArray(typeof(float));
            MainDataRvAngle = (float[]) list2.ToArray(typeof(float));
            MainDataElec = (float[]) list3.ToArray(typeof(float));
        }
        catch (Exception exception)
        {
            errLogFunction("SaveDataPoint + " + exception.ToString());
        }
    }

    private static void save3DTxtData(float[] tAngle, float[] tRvAngle, float[] tElec, string fileStr)
    {
        try
        {
            StreamWriter writer = new StreamWriter(fileStr, false, Encoding.Default);
            writer.WriteLine("!3DS");
            writer.WriteLine(string.Concat(new object[] { "!M,", (180 / define.CutAngle) + 1, ",", 0x49 }));
            for (int i = 1; i < tAngle.Length; i++)
            {
                writer.WriteLine(tAngle[i].ToString("N") + "," + tRvAngle[i].ToString("N") + "," + tElec[i].ToString("N"));
            }
            writer.Close();
        }
        catch (Exception exception)
        {
            errLogFunction("save3DTxtData + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void SaveData(string str)
    {
        try
        {
            for (int i = 1; i < SCM.testFreqArr.Length; i++)
            {
                if ((SCM.testFreqArr[i] == "") || (SCM.testFreqArr[i] == null))
                {
                    return;
                }
                string fileStr = "";
                if (str.Substring(str.Length - 3, 3) == "txt")
                {
                    str = str.Substring(0, str.Length - 4);
                }
                if (SCM.testFreqArr[i] == null)
                {
                    fileStr = str + ".txt";
                }
                else
                {
                    fileStr = str + "-" + SCM.testFreqArr[i].ToString() + ".txt";
                }
                save3DTxtData(this.saveAzD3Angle[i], this.saveRvD3Angle[i], this.saveD3Elec[i], fileStr);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("SaveData + " + exception.ToString());
        }
    }

    public static void saveDataFunction(string str)
    {
        try
        {
            float[] array = new float[1];
            float[] numArray2 = new float[1];
            for (int i = 1; i < savedata.Length; i++)
            {
                if (savedata[i].Angle == null)
                {
                    return;
                }
                Array.Resize<float>(ref array, savedata[i].Angle.Length);
                Array.Resize<float>(ref numArray2, savedata[i].Elec.Length);
                savedata[i].Angle.CopyTo(array, 0);
                savedata[i].Elec.CopyTo(numArray2, 0);
                if (define.saveFlag.sampleFlag == 1)
                {
                    SaveDataPoint(ref array, ref numArray2, (double) define.saveFlag.sampleAngle);
                }
                if (SCM.testMode == 3)
                {
                    savedata[i].Freq = (Convert.ToInt32(SCM.freqStar) + (((i - 1) * (Convert.ToInt32(SCM.freqStop) - Convert.ToInt32(SCM.freqStar))) / (Convert.ToInt32(SCM.freqPoint) - 1))).ToString();
                }
                else
                {
                    savedata[i].Freq = SCM.testFreqArr[i];
                }
                savedata[i].Face = define.saveFlag.Face;
                savedata[i].Across = define.saveFlag.Across;
                savedata[i].Pol = define.saveFlag.Pol;
                savedata[i].port = define.saveFlag.port;
                savedata[i].sDataTime = DateTime.Now;
                savedata[i].point = array.Length;
                savedata[i].Mode = define.saveFlag.TxMode;
                if (define.saveFlag.dataMode == 0)
                {
                    string fileStr = "";
                    if (str.Substring(str.Length - 3, 3) == "txt")
                    {
                        str = str.Substring(0, str.Length - 4);
                    }
                    if (savedata[i].Freq == null)
                    {
                        fileStr = str + ".txt";
                    }
                    else
                    {
                        fileStr = str + "-" + savedata[i].Freq.ToString() + ".txt";
                    }
                    if (SCM.autoTestStart > 0)
                    {
                        saveTxtData(array, numArray2, i, fileStr);
                    }
                    else
                    {
                        saveTxtData(array, numArray2, i, fileStr);
                    }
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("saveDataFunction + " + exception.Message);
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private static void SaveDataPoint(ref float[] MainDataAngle, ref float[] MainDataElec, double SaveAngle)
    {
        try
        {
            int num4;
            float[] numArray = new float[MainDataAngle.Length];
            float[] numArray2 = new float[MainDataElec.Length];
            numArray = MainDataAngle;
            numArray2 = MainDataElec;
            ArrayList list = new ArrayList();
            ArrayList list2 = new ArrayList();
            int length = 0;
            double num2 = 0.0;
            length = MainDataAngle.Length;
            int index = 0;
            list.Add(Convert.ToSingle(numArray[0]));
            list2.Add(Convert.ToSingle(numArray2[0]));
            for (num4 = 0; num4 < length; num4++)
            {
                if (!(numArray[num4] == numArray[index]))
                {
                    index++;
                    list.Add(Convert.ToSingle(numArray[num4]));
                    list2.Add(Convert.ToSingle(numArray2[num4]));
                }
            }
            numArray = new float[list.Count];
            numArray2 = new float[list2.Count];
            numArray = (float[]) list.ToArray(typeof(float));
            numArray2 = (float[]) list2.ToArray(typeof(float));
            if (numArray[0] > (((int) numArray[0]) + SaveAngle))
            {
                num2 = ((int) numArray[0]) + 1;
            }
            else if (numArray[0] > ((int) numArray[0]))
            {
                num2 = ((int) numArray[0]) + SaveAngle;
            }
            else
            {
                num2 = (int) numArray[0];
            }
            list = new ArrayList();
            list2 = new ArrayList();
            float num5 = 0f;
            float num6 = 0f;
            float num7 = 0f;
            float num8 = 0f;
            for (num4 = 0; num4 < numArray.Length; num4++)
            {
                if (numArray[num4] < num2)
                {
                    num5 = numArray[num4];
                    num7 = numArray2[num4];
                }
                else
                {
                    num6 = numArray[num4];
                    num8 = numArray2[num4];
                    list.Add(Convert.ToSingle(num2));
                    if (num5 < -180f)
                    {
                        num5 += 360f;
                    }
                    if ((num6 < -179f) && (num2 == 180.0))
                    {
                        list2.Add(Convert.ToSingle((double) ((((num2 - (num6 + 360f)) * (num7 - num8)) / ((double) (num5 - (num6 + 360f)))) + num8)));
                    }
                    else
                    {
                        list2.Add(Convert.ToSingle((double) ((((num2 - num6) * (num7 - num8)) / ((double) (num5 - num6))) + num8)));
                    }
                    if ((num6 < -179f) && (num2 == 180.0))
                    {
                        num2 = -180.0 + SaveAngle;
                    }
                    else
                    {
                        num2 += SaveAngle;
                    }
                    if (num2 >= 360.0)
                    {
                        num2 -= 360.0;
                    }
                    num5 = num6;
                    num7 = num8;
                }
            }
            if (list.Count <= (360.0 / SaveAngle))
            {
                num5 = (float) list[list.Count - 1];
                num7 = (float) list2[list2.Count - 1];
                num6 = (float) list[list.Count - 2];
                num8 = (float) list2[list2.Count - 2];
                if (num5 < 180f)
                {
                    list.Add(Convert.ToSingle(180));
                    list2.Add((Convert.ToSingle((double) ((((num2 - num6) * (num7 - num8)) / ((double) (num5 - num6))) + num8)) + ((float) list2[0])) / 2f);
                    list2[0] = (Convert.ToSingle((double) ((((num2 - num6) * (num7 - num8)) / ((double) (num5 - num6))) + num8)) + ((float) list2[0])) / 2f;
                }
            }
            MainDataAngle = new float[list.Count];
            MainDataElec = new float[list2.Count];
            MainDataAngle = (float[]) list.ToArray(typeof(float));
            MainDataElec = (float[]) list2.ToArray(typeof(float));
        }
        catch (Exception exception)
        {
            errLogFunction("SaveDataPoint + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private static void saveTxtData(float[] tAngle, float[] tElec, int n, string fileStr)
    {
        try
        {
            StreamWriter writer = new StreamWriter(fileStr, false, Encoding.Default);
            writer.WriteLine("!\tNAME\t" + savedata[n].Mode);
            writer.WriteLine("!\tDATE\t" + savedata[n].sDataTime);
            writer.WriteLine("!\tFREQ\t" + savedata[n].Freq);
            writer.WriteLine("!\tCOUNT\t" + savedata[n].point);
            writer.WriteLine("!\tGAIN\t" + savedata[n].Gain);
            if (savedata[n].Face == "水平面")
            {
                savedata[n].Face = "H";
            }
            else if (savedata[n].Face == "垂直面")
            {
                savedata[n].Face = "V";
            }
            writer.WriteLine("!\tPLANE\t" + savedata[n].Face);
            if (savedata[n].Across == "主极化")
            {
                savedata[n].Across = "M";
            }
            else if (savedata[n].Across == "交叉极化")
            {
                savedata[n].Across = "A";
            }
            writer.WriteLine("!\tMAIN\t" + savedata[n].Across);
            if (savedata[n].Pol == "水平")
            {
                savedata[n].Pol = "H";
            }
            else if (savedata[n].Pol == "垂直")
            {
                savedata[n].Pol = "E";
            }
            else if (savedata[n].Pol == "+45\x00b0")
            {
                savedata[n].Pol = "+45";
            }
            else if (savedata[n].Pol == "-45\x00b0")
            {
                savedata[n].Pol = "-45";
            }
            writer.WriteLine("!\tPOLARIZE\t" + savedata[n].Pol);
            writer.WriteLine("!\tAZ_Angle\t" + string.Format("{0:F}", SCM.azAngle));
            for (int i = 0; i < tAngle.Length; i++)
            {
                writer.WriteLine(string.Format("{0:f}", tAngle[i].ToString("n")) + "\t" + tElec[i].ToString());
            }
            string str2 = "#\t最大电平：" + savedata[n].MaxV + "dB\t";
            str2 = string.Concat(new object[] { str2, "XdBW(3dB):", savedata[n].HPBW3, "\x00b0\t" });
            str2 = string.Concat(new object[] { str2, "XdBW(10dB):", savedata[n].HPBW10, "\x00b0\t" });
            str2 = string.Concat(new object[] { str2, "XdBW(XdB):", savedata[n].HPBWX, "\x00b0\t" });
            str2 = string.Concat(new object[] { str2, "前后比：", savedata[n].FBR, "dB\t" });
            str2 = string.Concat(new object[] { str2, "前后比(X度)：", savedata[n].FBRX, "dB\t" });
            str2 = string.Concat(new object[] { str2, "方向性：", savedata[n].Direction, "dBi\t" });
            str2 = string.Concat(new object[] { str2, "第1上瓣：", savedata[n].BeamU1, "dB\t" });
            str2 = string.Concat(new object[] { str2, "第1下瓣：", savedata[n].BeamD1, "dB\t" });
            str2 = string.Concat(new object[] { str2, "第2上瓣：", savedata[n].BeamU2, "dB\t" });
            str2 = string.Concat(new object[] { str2, "第2下瓣：", savedata[n].BeamD2, "dB\t" });
            str2 = string.Concat(new object[] { str2, "上零深：", savedata[n].ZeroU, "dB\t" });
            str2 = string.Concat(new object[] { str2, "下零深：", savedata[n].ZeroD, "dB\t" });
            str2 = string.Concat(new object[] { str2, "轴比：", savedata[n].AxisR, "dB\t" });
            str2 = string.Concat(new object[] { str2, "不圆度：", savedata[n].Circularity, "dB\t" });
            str2 = string.Concat(new object[] { str2, "倾角(双图)：", savedata[n].beamOffset1, "dB\t" });
            str2 = string.Concat(new object[] { str2, "起始角度：", savedata[n].StarAngle, "\x00b0\t" });
            str2 = string.Concat(new object[] { str2, "结束角度：", savedata[n].StarAngle, "\x00b0\t" });
            str2 = string.Concat(new object[] { str2, "XPD0du：", savedata[n].XPD0, "dB\t" });
            str2 = string.Concat(new object[] { str2, "XPD60du：", savedata[n].XPD60, "dB\t" });
            str2 = string.Concat(new object[] { str2, "XPDXdu：", savedata[n].XPDX, "dB\t" });
            str2 = string.Concat(new object[] { str2, "XPD3db：", savedata[n].XPD3db, "dB\t" });
            str2 = string.Concat(new object[] { str2, "XPD10db：", savedata[n].XPD10db, "dB\t" });
            str2 = string.Concat(new object[] { str2, "XPDXdb：", savedata[n].XPDXdb, "dB\t" });
            str2 = string.Concat(new object[] { str2, "XPDFBR30：", savedata[n].XPDFBR30, "dB\t" });
            str2 = string.Concat(new object[] { str2, "XPDFBRX：", savedata[n].XPDFBRX, "dB" });
            writer.WriteLine(str2);
            writer.Close();
        }
        catch (Exception exception)
        {
            errLogFunction("saveTxtData + " + exception.Message);
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void saveTxtDataOBL(float[] tAngle, float[] tElec, int n, string fileStr)
    {
        try
        {
            StreamWriter writer = new StreamWriter(fileStr, false, Encoding.Default);
            writer.WriteLine("!\tNAME\t" + savedata[n].Mode);
            writer.WriteLine("!\tLENTH\t" + savedata[n].TxAntlength);
            writer.WriteLine("!\tDATE\t" + string.Format("{0:d}", savedata[n].sDataTime));
            writer.WriteLine("!\tFREQ\t" + savedata[n].Freq);
            writer.WriteLine("!\tCOUNT\t" + tAngle.Length);
            writer.WriteLine("!\tGAIN\t" + savedata[n].Gain);
            if (savedata[n].Face == "水平面")
            {
                savedata[n].Face = "H";
            }
            else if (savedata[n].Face == "垂直面")
            {
                savedata[n].Face = "V";
            }
            writer.WriteLine("!\tPLANE\t" + savedata[n].Face);
            if (savedata[n].Across == "主极化")
            {
                savedata[n].Across = "M";
            }
            else if (savedata[n].Across == "交叉极化")
            {
                savedata[n].Across = "A";
            }
            writer.WriteLine("!\tMAIN\t" + savedata[n].Across);
            if (savedata[n].Pol == "水平")
            {
                savedata[n].Pol = "H";
            }
            else if (savedata[n].Pol == "垂直")
            {
                savedata[n].Pol = "E";
            }
            else if (savedata[n].Pol == "+45\x00b0")
            {
                savedata[n].Pol = "+45";
            }
            else if (savedata[n].Pol == "-45\x00b0")
            {
                savedata[n].Pol = "-45";
            }
            writer.WriteLine("!\tPOLARIZE\t" + savedata[n].Pol);
            writer.WriteLine("!\tPORT\t" + savedata[n].port);
            for (int i = 0; i < tAngle.Length; i++)
            {
                writer.WriteLine(tAngle[i].ToString("N") + "\t" + tElec[i].ToString("N"));
            }
            string str = ((((((((((((((((((((((((("#   最大电平：" + savedata[n].MaxV.ToString("N") + "dB   ") + "XdBW(3dB):" + savedata[n].HPBW3.ToString("N") + "\x00b0   ") + "XdBW(10dB):" + savedata[n].HPBW10.ToString("N") + "\x00b0   ") + "XdBW(XdB):" + savedata[n].HPBWX.ToString("N") + "\x00b0   ") + "前后比：" + savedata[n].FBR.ToString("N") + "dB   ") + "前后比(X度)：" + savedata[n].FBRX.ToString("N") + "dB   ") + "方向性：" + savedata[n].Direction.ToString("N") + "dBi   ") + "第1上瓣：" + savedata[n].BeamU1.ToString("N") + "dB   ") + "第1下瓣：" + savedata[n].BeamD1.ToString("N") + "dB   ") + "第2上瓣：" + savedata[n].BeamU2.ToString("N") + "dB   ") + "第2下瓣：" + savedata[n].BeamD2.ToString("N") + "dB   ") + "上零深：" + savedata[n].ZeroU.ToString("N") + "dB   ") + "下零深：" + savedata[n].ZeroD.ToString("N") + "dB   ") + "轴比：" + savedata[n].AxisR.ToString("N") + "dB   ") + "不圆度：" + savedata[n].Circularity.ToString("N") + "dB   ") + "倾角(双图)：" + savedata[n].beamOffset1.ToString("N") + "dB   ") + "起始角度：" + savedata[n].StarAngle.ToString("N") + "\x00b0   ") + "结束角度：" + savedata[n].StarAngle.ToString("N") + "\x00b0   ") + "XPD0\x00b0：" + savedata[n].XPD0.ToString("N") + "dB   ") + "XPD60\x00b0：" + savedata[n].XPD60.ToString("N") + "dB   ") + "XPDX\x00b0：" + savedata[n].XPDX.ToString("N") + "dB   ") + "XPD3db：" + savedata[n].XPD3db.ToString("N") + "dB   ") + "XPD10db：" + savedata[n].XPD10db.ToString("N") + "dB   ") + "XPDXdb：" + savedata[n].XPDXdb.ToString("N") + "dB   ") + "XPDFBR30：" + savedata[n].XPDFBR30.ToString("N") + "dB   ") + "XPDFBRX：" + savedata[n].XPDFBRX.ToString("N") + "dB";
            writer.WriteLine(str);
            writer.Close();
        }
        catch (Exception exception)
        {
            errLogFunction("saveTxtData + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void sdDisplay()
    {
        try
        {
            Bitmap image = new Bitmap(this.sBItmap);
            Graphics graphics = Graphics.FromImage(image);
            Pen pen = new Pen(Color.Black);
            SolidBrush brush = new SolidBrush(Color.Black);
            float num = this.pictureBoxSd.Height / 2;
            float num2 = (this.pictureBoxSd.Height / 3) * 2;
            graphics.InterpolationMode = InterpolationMode.High;
            graphics.SmoothingMode = SmoothingMode.HighQuality;
            graphics.TranslateTransform((float) (this.pictureBoxSd.Height / 2), (float) (this.pictureBoxSd.Height / 2));
            graphics.RotateTransform(SCM.sdAngle);
            GraphicsPath path = new GraphicsPath();
            path.AddLine((float) -7f, (float) 0f, (float) 0f, (float) (0f - ((num / 5f) * 4f)));
            path.AddLine((float) 0f, (float) (0f - ((num / 5f) * 4f)), (float) 7f, (float) 0f);
            path.CloseFigure();
            PathGradientBrush brush2 = new PathGradientBrush(path);
            brush2.CenterColor = Color.Black;
            brush2.SurroundColors = new Color[] { Color.White };
            graphics.FillPath(brush2, path);
            graphics.ResetTransform();
            brush = new SolidBrush(Color.LightBlue);
            graphics.FillEllipse(brush, (float) (num - 10f), (float) (num - 10f), (float) 20f, (float) 20f);
            this.pictureBoxSd.Image = image;
            pen.Dispose();
            graphics.Dispose();
        }
        catch (Exception exception)
        {
            errLogFunction("sdDisplay + " + exception.ToString());
        }
    }

    private void search()
    {
        try
        {
            bool flag;
            long num = 0L;
            string[] separator = new string[] { "," };
            float num2 = 0f;
            goto Label_014F;
        Label_002C:
            if ((define.VNAConnect == "TCPIP") || (define.VNAConnect == "USB"))
            {
                string writeFmt = define.ActiveMark[this.DataSearchInt] + "\n";
                num = visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                num = visa32.viScanf(visa32.vi, define.ReadData, visa32.BufferString);
                num2 = Convert.ToSingle(visa32.BufferString.ToString().Split(separator, StringSplitOptions.None)[0]);
            }
            else if (define.VNAConnect == "NI")
            {
                SCM.device.Write(define.ActiveMark[this.DataSearchInt] + "\n");
                Thread.Sleep(30);
                num2 = Convert.ToSingle(SCM.device.ReadString().Split(separator, StringSplitOptions.None)[0]);
            }
            this.textBoxEL.Text = num2.ToString("0.000");
            if (!this.DataSearch)
            {
                return;
            }
            define.Sleep(10L);
        Label_014F:
            flag = true;
            goto Label_002C;
        }
        catch (Exception exception)
        {
            errLogFunction("search + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void serialPortAz_DataReceived(object sender, SerialDataReceivedEventArgs e)
    {
        char[] buffer = new char[13];
        char[] destinationArray = new char[13];
        int index = 0;
        try
        {
            this.serialPortAz.Read(buffer, 0, 13);
            if (buffer[0] != '=')
            {
                int num2;
                for (num2 = 0; num2 < buffer.Length; num2++)
                {
                    if ((buffer[num2] == '=') || (buffer[num2] == '?'))
                    {
                        index = num2;
                        break;
                    }
                }
                if ((buffer[index] != '=') && (buffer[index] != '?'))
                {
                    return;
                }
                Array.Copy(buffer, destinationArray, buffer.Length);
                for (num2 = 0; num2 < buffer.Length; num2++)
                {
                    int num4;
                    int num3 = Math.DivRem((num2 + buffer.Length) - index, buffer.Length, out num4);
                    buffer[num4] = destinationArray[num2];
                }
            }
            if (((buffer[index] == '=') || (buffer[index] == '?')) || (buffer[12] == '\r'))
            {
                string str = buffer[0].ToString() + buffer[1].ToString() + buffer[2].ToString() + buffer[3].ToString() + buffer[4].ToString() + buffer[5].ToString() + buffer[6].ToString() + buffer[7].ToString() + buffer[8].ToString() + buffer[9].ToString() + buffer[10].ToString() + buffer[11].ToString() + buffer[12].ToString();
                if (SCM.Az_angle_Flag == 1)
                {
                    SCM.azAngleOld = -Convert.ToSingle(str.Substring(3, 10)) / 100f;
                    if (SCM.theFirstAngleFlag == 0)
                    {
                        SCM.azFirstAngle = SCM.azAngleOld;
                        SCM.theFirstAngleFlag = 1;
                        SCM.azAngle = SCM.azAngleOld - SCM.azAngleZero;
                        if (SCM.azAngle > 180f)
                        {
                            SCM.azAngle -= 360f;
                        }
                        if (SCM.azAngle < -180f)
                        {
                            SCM.azAngle += 360f;
                        }
                    }
                    else if ((Math.Abs((float) (SCM.azFirstAngle - SCM.azAngleOld)) < 8f) || (Math.Abs((float) (SCM.azFirstAngle - SCM.azAngleOld)) > 352f))
                    {
                        SCM.azFirstAngle = SCM.azAngleOld;
                        SCM.azAngle = SCM.azAngleOld - SCM.azAngleZero;
                        if (SCM.azAngle > 180f)
                        {
                            SCM.azAngle -= 360f;
                        }
                        if (SCM.azAngle < -180f)
                        {
                            SCM.azAngle += 360f;
                        }
                    }
                }
                else if (SCM.Dn_angle_Flag == 1)
                {
                    SCM.dnAngleOld = -Convert.ToSingle(str.Substring(3, 10)) / 100f;
                    SCM.dnAngle = SCM.dnAngleOld - SCM.dnAngleZero;
                    if (SCM.dnAngle > 180f)
                    {
                        SCM.dnAngle -= 360f;
                    }
                    if (SCM.dnAngle < -180f)
                    {
                        SCM.dnAngle += 360f;
                    }
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("serialPortAz_DataReceived + " + exception.ToString());
        }
    }

    private void serialPortDn_DataReceived(object sender, SerialDataReceivedEventArgs e)
    {
        char[] buffer = new char[13];
        char[] destinationArray = new char[13];
        int index = 0;
        try
        {
            this.serialPortDn.Read(buffer, 0, 13);
            if (buffer[0] != '=')
            {
                int num2;
                for (num2 = 0; num2 < buffer.Length; num2++)
                {
                    if (buffer[num2] == '=')
                    {
                        index = num2;
                        break;
                    }
                }
                if (buffer[index] != '=')
                {
                    return;
                }
                Array.Copy(buffer, destinationArray, buffer.Length);
                for (num2 = 0; num2 < buffer.Length; num2++)
                {
                    int num4;
                    int num3 = Math.DivRem((num2 + buffer.Length) - index, buffer.Length, out num4);
                    buffer[num4] = destinationArray[num2];
                }
            }
            if ((buffer[0] == '=') && (buffer[12] == '\r'))
            {
                string str = buffer[0].ToString() + buffer[1].ToString() + buffer[2].ToString() + buffer[3].ToString() + buffer[4].ToString() + buffer[5].ToString() + buffer[6].ToString() + buffer[7].ToString() + buffer[8].ToString() + buffer[9].ToString() + buffer[10].ToString() + buffer[11].ToString() + buffer[12].ToString();
            }
        }
        catch (Exception exception)
        {
            errLogFunction("serialPortDn_DataReceived + " + exception.ToString());
        }
    }

    private void serialPortEl_DataReceived(object sender, SerialDataReceivedEventArgs e)
    {
        char[] buffer = new char[13];
        char[] destinationArray = new char[13];
        int index = 0;
        try
        {
            this.serialPortEl.Read(buffer, 0, 13);
            if (buffer[0] != '=')
            {
                int num2;
                for (num2 = 0; num2 < buffer.Length; num2++)
                {
                    if ((buffer[num2] == '=') || (buffer[num2] == '?'))
                    {
                        index = num2;
                        break;
                    }
                }
                if ((buffer[index] != '=') && (buffer[index] != '?'))
                {
                    return;
                }
                Array.Copy(buffer, destinationArray, buffer.Length);
                for (num2 = 0; num2 < buffer.Length; num2++)
                {
                    int num4;
                    int num3 = Math.DivRem((num2 + buffer.Length) - index, buffer.Length, out num4);
                    buffer[num4] = destinationArray[num2];
                }
            }
            if (((buffer[index] == '=') || (buffer[index] == '?')) || (buffer[12] == '\r'))
            {
                SCM.elAngleOld = Convert.ToSingle((buffer[0].ToString() + buffer[1].ToString() + buffer[2].ToString() + buffer[3].ToString() + buffer[4].ToString() + buffer[5].ToString() + buffer[6].ToString() + buffer[7].ToString() + buffer[8].ToString() + buffer[9].ToString() + buffer[10].ToString() + buffer[11].ToString() + buffer[12].ToString()).Substring(3, 10)) / 200f;
                SCM.elAngle = SCM.elAngleOld - SCM.elAngleZero;
                if (SCM.elAngle > 40f)
                {
                    SCM.elAngle -= 180f;
                }
                if (SCM.elAngle < -140f)
                {
                    SCM.elAngle += 180f;
                }
            }
        }
        catch
        {
        }
    }

    private void serialPortGF_DataReceived(object sender, SerialDataReceivedEventArgs e)
    {
        try
        {
            byte[] buffer = new byte[11];
            byte[] buffer2 = new byte[11];
            this.serialPortGF.Read(buffer, 0, 13);
            for (int i = 0; i <= 10; i++)
            {
                int num4;
                if ((i == 10) && (buffer[i] == 0x7e))
                {
                    byte num = buffer[10];
                    num4 = 10;
                    while (num4 >= 1)
                    {
                        buffer[num4] = buffer[num4 - 1];
                        num4--;
                    }
                }
                else if ((i != 10) && (buffer[i] == 0x7e))
                {
                    int num2 = i;
                    num4 = 0;
                    while (num4 <= (num2 - 1))
                    {
                        buffer2[num4] = buffer[num4];
                        num4++;
                    }
                    num4 = 0;
                    while (num4 <= num2)
                    {
                        buffer[num4 - num2] = buffer[num4];
                        num4++;
                    }
                    for (num4 = 0; num4 <= (num2 - 1); num4++)
                    {
                        buffer[((10 - num2) + num4) + 1] = buffer2[num4];
                    }
                }
            }
            if ((buffer[7] == 0) && (define.Gf_Ask == 1))
            {
                this.label41.Text = "功放1";
                define.Gf_Ask = 0;
            }
            else if (define.Gf_Ask == 1)
            {
                this.comboBoxPNAN_SelectedIndexChanged(sender, e);
            }
            if ((buffer[7] == 1) && (define.Gf_Ask == 2))
            {
                this.label41.Text = "功放2";
                define.Gf_Ask = 0;
            }
            else if (define.Gf_Ask == 2)
            {
                this.comboBoxPNAN_SelectedIndexChanged(sender, e);
            }
            if ((buffer[7] == 2) && (define.Gf_Ask == 3))
            {
                this.label41.Text = "功放3";
                define.Gf_Ask = 0;
            }
            else if (define.Gf_Ask == 3)
            {
                this.comboBoxPNAN_SelectedIndexChanged(sender, e);
            }
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void serialPortPt_DataReceived(object sender, SerialDataReceivedEventArgs e)
    {
        byte[] buffer = new byte[6];
        byte[] destinationArray = new byte[6];
        int index = 0;
        try
        {
            this.serialPortPt.Read(buffer, 0, 6);
            if (buffer[0] != 0xff)
            {
                int num2;
                for (num2 = 0; num2 < buffer.Length; num2++)
                {
                    if (buffer[num2] == 0xff)
                    {
                        index = num2;
                        break;
                    }
                }
                if (buffer[index] != 0xff)
                {
                    return;
                }
                Array.Copy(buffer, destinationArray, buffer.Length);
                for (num2 = 0; num2 < buffer.Length; num2++)
                {
                    int num4;
                    int num3 = Math.DivRem((num2 + buffer.Length) - index, buffer.Length, out num4);
                    buffer[num4] = destinationArray[num2];
                }
            }
            if (buffer[4] == 2)
            {
                SCM.ptLimFlag = 1;
            }
            else if (buffer[4] == 1)
            {
                SCM.ptLimFlag = 2;
            }
            else
            {
                SCM.ptLimFlag = 0;
            }
        }
        catch (Exception exception)
        {
            errLogFunction("serialPortPt_DataReceived + " + exception.ToString());
        }
    }

    private void serialPortRv_DataReceived(object sender, SerialDataReceivedEventArgs e)
    {
        char[] buffer = new char[13];
        char[] destinationArray = new char[13];
        int index = 0;
        try
        {
            this.serialPortRv.Read(buffer, 0, 13);
            if (buffer[0] != '=')
            {
                int num2;
                for (num2 = 0; num2 < buffer.Length; num2++)
                {
                    if ((buffer[num2] == '=') || (buffer[num2] == '?'))
                    {
                        index = num2;
                        break;
                    }
                }
                if ((buffer[index] != '=') && (buffer[index] != '?'))
                {
                    return;
                }
                Array.Copy(buffer, destinationArray, buffer.Length);
                for (num2 = 0; num2 < buffer.Length; num2++)
                {
                    int num4;
                    int num3 = Math.DivRem((num2 + buffer.Length) - index, buffer.Length, out num4);
                    buffer[num4] = destinationArray[num2];
                }
            }
            if (((buffer[index] == '=') || (buffer[index] == '?')) || (buffer[12] == '\r'))
            {
                string str = buffer[0].ToString() + buffer[1].ToString() + buffer[2].ToString() + buffer[3].ToString() + buffer[4].ToString() + buffer[5].ToString() + buffer[6].ToString() + buffer[7].ToString() + buffer[8].ToString() + buffer[9].ToString() + buffer[10].ToString() + buffer[11].ToString() + buffer[12].ToString();
                if (SCM.Rv_angle_Flag == 1)
                {
                    SCM.rvAngleOld = -Convert.ToSingle(str.Substring(3, 10)) / 150f;
                    SCM.rvAngle = SCM.rvAngleOld - SCM.rvAngleZero;
                    if (SCM.rvAngle > 120f)
                    {
                        SCM.rvAngle -= 240f;
                    }
                    if (SCM.rvAngle < -120f)
                    {
                        SCM.rvAngle += 240f;
                    }
                }
                else if (SCM.Sd_angle_Flag == 1)
                {
                    SCM.sdAngleOld = Convert.ToSingle(str.Substring(3, 10)) / 100f;
                    SCM.sdAngle = SCM.sdAngleOld - SCM.sdAngleZero;
                    if (SCM.sdAngle > 180f)
                    {
                        SCM.sdAngle -= 360f;
                    }
                    if (SCM.sdAngle < -180f)
                    {
                        SCM.sdAngle += 360f;
                    }
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("serialPortRv_DataReceived + " + exception.ToString());
        }
    }

    private void serialPortScm_DataReceived(object sender, SerialDataReceivedEventArgs e)
    {
        byte[] buffer = new byte[0x1c];
        try
        {
            this.serialPortScm.Read(buffer, 0, 0x1c);
            if (((((buffer[0] != 0) || (buffer[1] != 0)) || ((buffer[2] != 0) || (buffer[3] != 0))) || ((buffer[4] != 0) || (buffer[5] != 0))) || (buffer[6] != 0))
            {
                BackgroundWorker worker = new BackgroundWorker();
                worker.DoWork += new DoWorkEventHandler(this.bgWorker_DoWork);
                worker.RunWorkerAsync(buffer);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("serialPortScm_DataReceived + " + exception.ToString());
        }
    }

    private void serialPortScm_ErrorReceived(object sender, SerialErrorReceivedEventArgs e)
    {
    }

    private void serialPortSd_DataReceived(object sender, SerialDataReceivedEventArgs e)
    {
        char[] buffer = new char[13];
        char[] destinationArray = new char[13];
        int index = 0;
        try
        {
            this.serialPortSd.Read(buffer, 0, 13);
            if (buffer[0] != '=')
            {
                int num2;
                for (num2 = 0; num2 < buffer.Length; num2++)
                {
                    if (buffer[num2] == '=')
                    {
                        index = num2;
                        break;
                    }
                }
                if (buffer[index] != '=')
                {
                    return;
                }
                Array.Copy(buffer, destinationArray, buffer.Length);
                for (num2 = 0; num2 < buffer.Length; num2++)
                {
                    int num4;
                    int num3 = Math.DivRem((num2 + buffer.Length) - index, buffer.Length, out num4);
                    buffer[num4] = destinationArray[num2];
                }
            }
            if ((buffer[0] == '=') && (buffer[12] == '\r'))
            {
                string str = buffer[0].ToString() + buffer[1].ToString() + buffer[2].ToString() + buffer[3].ToString() + buffer[4].ToString() + buffer[5].ToString() + buffer[6].ToString() + buffer[7].ToString() + buffer[8].ToString() + buffer[9].ToString() + buffer[10].ToString() + buffer[11].ToString() + buffer[12].ToString();
            }
        }
        catch (Exception exception)
        {
            errLogFunction("serialPortSd_DataReceived + " + exception.ToString());
        }
    }

    private void serialPortSwitch_DataReceived(object sender, SerialDataReceivedEventArgs e)
    {
        char[] buffer = new char[2];
        try
        {
            this.serialPortSwitch.Read(buffer, 0, 2);
            if (buffer[0] != 'T')
            {
                return;
            }
            if (SCM.autoTestStart == 0)
            {
                switch (buffer[1])
                {
                    case '1':
                        this.label5.Text = "选通1";
                        define.Sleep(10L);
                        this.comboBoxVANPower.Text = "ON";
                        this.comboBoxVANPower_SelectedIndexChanged(sender, e);
                        goto Label_03BF;

                    case '2':
                        this.label5.Text = "选通2";
                        define.Sleep(10L);
                        this.comboBoxVANPower.Text = "ON";
                        this.comboBoxVANPower_SelectedIndexChanged(sender, e);
                        goto Label_03BF;

                    case '3':
                        this.label5.Text = "选通3";
                        define.Sleep(10L);
                        this.comboBoxVANPower.Text = "ON";
                        this.comboBoxVANPower_SelectedIndexChanged(sender, e);
                        goto Label_03BF;

                    case '4':
                        this.label5.Text = "选通4";
                        define.Sleep(10L);
                        this.comboBoxVANPower.Text = "ON";
                        this.comboBoxVANPower_SelectedIndexChanged(sender, e);
                        goto Label_03BF;

                    case '5':
                        this.label5.Text = "选通5";
                        define.Sleep(10L);
                        this.comboBoxVANPower.Text = "ON";
                        this.comboBoxVANPower_SelectedIndexChanged(sender, e);
                        goto Label_03BF;

                    case '6':
                        this.label5.Text = "选通6";
                        define.Sleep(10L);
                        this.comboBoxVANPower.Text = "ON";
                        this.comboBoxVANPower_SelectedIndexChanged(sender, e);
                        goto Label_03BF;

                    case '7':
                        this.label5.Text = "选通7";
                        define.Sleep(10L);
                        this.comboBoxVANPower.Text = "ON";
                        this.comboBoxVANPower_SelectedIndexChanged(sender, e);
                        goto Label_03BF;

                    case '8':
                        this.label5.Text = "选通8";
                        define.Sleep(10L);
                        this.comboBoxVANPower.Text = "ON";
                        this.comboBoxVANPower_SelectedIndexChanged(sender, e);
                        goto Label_03BF;

                    case '9':
                        this.label5.Text = "选通9";
                        define.Sleep(10L);
                        this.comboBoxVANPower.Text = "ON";
                        this.comboBoxVANPower_SelectedIndexChanged(sender, e);
                        goto Label_03BF;

                    case 'a':
                        this.label5.Text = "选通10";
                        goto Label_03BF;
                }
                this.label5.Text = "未选通";
            }
            else
            {
                switch (buffer[1])
                {
                    case '1':
                        this.label5.Text = "选通1";
                        goto Label_03BF;

                    case '2':
                        this.label5.Text = "选通2";
                        goto Label_03BF;

                    case '3':
                        this.label5.Text = "选通3";
                        goto Label_03BF;

                    case '4':
                        this.label5.Text = "选通4";
                        goto Label_03BF;

                    case '5':
                        this.label5.Text = "选通5";
                        goto Label_03BF;

                    case '6':
                        this.label5.Text = "选通6";
                        goto Label_03BF;

                    case '7':
                        this.label5.Text = "选通7";
                        goto Label_03BF;

                    case '8':
                        this.label5.Text = "选通8";
                        goto Label_03BF;

                    case '9':
                        this.label5.Text = "选通9";
                        goto Label_03BF;

                    case 'a':
                        this.label5.Text = "选通10";
                        goto Label_03BF;
                }
                this.label5.Text = "未选通";
            }
        Label_03BF:
            if (SCM.autoTestStart > 0)
            {
                define.saveFlag.port = buffer[1];
            }
        }
        catch (Exception exception)
        {
            errLogFunction("serialPortAz_DataReceived + " + exception.ToString());
            MessageBox.Show(exception.ToString());
        }
    }

    private void serialPtAngle_DataReceived(object sender, SerialDataReceivedEventArgs e)
    {
        char[] buffer = new char[13];
        char[] destinationArray = new char[13];
        int index = 0;
        try
        {
            this.serialPtAngle.Read(buffer, 0, 13);
            if (buffer[0] != '=')
            {
                int num2;
                for (num2 = 0; num2 < buffer.Length; num2++)
                {
                    if (buffer[num2] == '=')
                    {
                        index = num2;
                        break;
                    }
                }
                if (buffer[index] != '=')
                {
                    return;
                }
                Array.Copy(buffer, destinationArray, buffer.Length);
                for (num2 = 0; num2 < buffer.Length; num2++)
                {
                    int num4;
                    int num3 = Math.DivRem((num2 + buffer.Length) - index, buffer.Length, out num4);
                    buffer[num4] = destinationArray[num2];
                }
            }
            if ((buffer[0] == '=') && (buffer[12] == '\r'))
            {
                SCM.ptAngleOld = Convert.ToSingle((buffer[0].ToString() + buffer[1].ToString() + buffer[2].ToString() + buffer[3].ToString() + buffer[4].ToString() + buffer[5].ToString() + buffer[6].ToString() + buffer[7].ToString() + buffer[8].ToString() + buffer[9].ToString() + buffer[10].ToString() + buffer[11].ToString() + buffer[12].ToString()).Substring(3, 10)) / 100f;
                SCM.ptAngle = SCM.ptAngleOld - SCM.ptAngleZero;
                if (SCM.ptAngle > 180f)
                {
                    SCM.ptAngle -= 360f;
                }
                if (SCM.ptAngle < -180f)
                {
                    SCM.ptAngle += 360f;
                }
                if (SCM.Pt_Zero_Flag > 0)
                {
                    SCM.Pt_Zero_Flag++;
                    if (SCM.Pt_Zero_Flag == 5)
                    {
                        SCM.Pt_Zero_Flag = 0;
                    }
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("serialPtAngle_DataReceived + " + exception.ToString());
        }
    }

    public int SetBoard()
    {
        glTotalAxes = MPC08.auto_set();
        if (glTotalAxes <= 0)
        {
            if (glTotalAxes == -1)
            {
                return -1;
            }
            if (glTotalAxes == -10)
            {
                return -10;
            }
            return -2;
        }
        glTotalCards = MPC08.init_board();
        if (glTotalCards <= 0)
        {
            if (glTotalCards == -5)
            {
                return -5;
            }
            if (glTotalCards == -6)
            {
                return -6;
            }
            if (glTotalCards == -10)
            {
                return -10;
            }
            return -2;
        }
        return 0;
    }

    public int SetEncoder(int zhouNum, int PulseSource, int EncoderMode)
    {
        if (PulseSource == 1)
        {
            MPC08.set_encoder_mode(zhouNum, EncoderMode - 1, EncoderMode, 1);
            MPC08.set_getpos_mode(zhouNum, 0);
            return 1;
        }
        MPC08.set_encoder_mode(zhouNum, 2 - EncoderMode, 1, 1);
        MPC08.set_getpos_mode(zhouNum, 1);
        return 1;
    }

    private void SetFreqency()
    {
        try
        {
            string str;
            int num2;
            int num = -65535;
            if (define.VNAConnect == "NI")
            {
                if (SCM.freqStar != "")
                {
                    str = define.SetStart + (Convert.ToSingle(SCM.freqStar) * 1000000f) + "\n";
                    SCM.device.Write(str);
                }
                if (SCM.freqStop != "")
                {
                    str = define.SetStop + (Convert.ToSingle(SCM.freqStop) * 1000000f) + "\n";
                    SCM.device.Write(str);
                }
                for (num2 = 1; num2 <= 9; num2++)
                {
                    if (SCM.testFreqArr[num2] != "")
                    {
                        str = define.SetMarkON[num2] + "\n";
                        SCM.device.Write(str);
                        str = define.SetMark[num2] + (Convert.ToSingle(SCM.testFreqArr[num2]) * 1000000f) + "\n";
                        SCM.device.Write(str);
                    }
                    else
                    {
                        str = define.SetMarkOFF[num2] + "\n";
                        SCM.device.Write(str);
                    }
                }
            }
            else if ((define.VNAConnect == "TCPIP") || (define.VNAConnect == "USB"))
            {
                if (SCM.freqStar != "")
                {
                    str = define.SetStart + (Convert.ToSingle(SCM.freqStar) * 1000000f) + "\n";
                    num = visa32.viPrintf(visa32.vi, str, str.Length);
                }
                if (SCM.freqStop != "")
                {
                    str = define.SetStop + (Convert.ToSingle(SCM.freqStop) * 1000000f) + "\n";
                    num = visa32.viPrintf(visa32.vi, str, str.Length);
                }
                for (num2 = 1; num2 <= 9; num2++)
                {
                    if (SCM.testFreqArr[num2] != "")
                    {
                        str = define.SetMarkON[num2] + "\n";
                        num = visa32.viPrintf(visa32.vi, str, str.Length);
                        str = define.SetMark[num2] + (Convert.ToSingle(SCM.testFreqArr[num2]) * 1000000f) + "\n";
                        num = visa32.viPrintf(visa32.vi, str, str.Length);
                    }
                    else
                    {
                        str = define.SetMarkOFF[num2] + "\n";
                        num = visa32.viPrintf(visa32.vi, str, str.Length);
                    }
                }
            }
        }
        catch
        {
        }
    }

    private void SetFreqency_Click(object sender, EventArgs e)
    {
        this.toolStripButton3_Click(sender, e);
    }

    private void SetNet()
    {
        try
        {
            ChatSession session;
            bool flag;
            this.serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            this.serverPoint = new IPEndPoint(IPAddress.Parse(define.ServerComIP), this.remoteIPEndPoint);
            this.serverSocket.Bind(this.serverPoint);
            this.serverSocket.Listen(100);
            goto Label_007B;
        Label_004D:
            session = new ChatSession(this.serverSocket.Accept());
            new Thread(new ThreadStart(session.StartChat)).Start();
        Label_007B:
            flag = true;
            goto Label_004D;
        }
        catch (Exception exception)
        {
            errLogFunction("SetNet + " + exception.ToString());
            MessageBox.Show("网络初始化错误,请检查网络是否通畅", "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void ShowFrom()
    {
        try
        {
            new SaveOption().Show();
        }
        catch (Exception exception)
        {
            errLogFunction("保存ShowFrom + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void StartMultAxesMove()
    {
        switch (((MMoveType + (MSpeedType * 10)) + (MAxesNumType * 100)))
        {
            case 0x6f:
                MPC08.con_pmove(MAxesNum, MDis);
                break;

            case 0x70:
                MPC08.con_vmove(MAxesNum, this.GetDirFromDis((float) MDis));
                break;

            case 0x71:
                MPC08.con_hmove(MAxesNum, this.GetDirFromDis((float) MDis));
                break;

            case 0x79:
                MPC08.fast_pmove(MAxesNum, MDis);
                break;

            case 0x7a:
                MPC08.fast_vmove(MAxesNum, this.GetDirFromDis((float) MDis));
                break;

            case 0x7b:
                MPC08.fast_hmove(MAxesNum, this.GetDirFromDis((float) MDis));
                break;

            default:
                MPC08.fast_pmove(MAxesNum, MDis);
                break;
        }
    }

    public void tabControlRize()
    {
        try
        {
            int num = 0;
            if (define.comAz)
            {
                this.groupBoxAz.Visible = true;
                this.groupBoxAz.Location = new Point(4 + (290 * num), 4);
                num++;
            }
            else
            {
                this.groupBoxAz.Visible = false;
            }
            if (define.comRv)
            {
                this.groupBoxRv.Visible = true;
                this.groupBoxRv.Location = new Point(4 + (290 * num), 4);
                num++;
            }
            else
            {
                this.groupBoxRv.Visible = false;
            }
            if (define.comNSd)
            {
                this.groupBoxSd.Visible = true;
                this.groupBoxSd.Location = new Point(4 + (290 * num), 4);
                num++;
            }
            else
            {
                this.groupBoxSd.Visible = false;
            }
            if (define.comEl)
            {
                if (num >= 3)
                {
                    if ((num >= 3) && !this.tabControl1.TabPages.Contains(this.tabPage2))
                    {
                        this.tabControl1.TabPages.Add(this.tabPage2);
                    }
                    this.tabControl1.TabPages[1].Controls.Add(this.groupBoxEl);
                    this.groupBoxEl.Location = new Point(4 + (290 * (num - 3)), 4);
                    this.groupBoxEl.Visible = true;
                    num++;
                }
                else if (num < 3)
                {
                    this.tabControl1.TabPages[0].Controls.Add(this.groupBoxEl);
                    this.groupBoxEl.Location = new Point(4 + (290 * num), 4);
                    this.groupBoxEl.Visible = true;
                    num++;
                }
            }
            else
            {
                this.groupBoxEl.Visible = false;
            }
            if (define.comDn)
            {
                if (num >= 3)
                {
                    if ((num >= 3) && !this.tabControl1.TabPages.Contains(this.tabPage2))
                    {
                        this.tabControl1.TabPages.Add(this.tabPage2);
                    }
                    this.tabControl1.TabPages[1].Controls.Add(this.groupBoxDn);
                    this.groupBoxDn.Location = new Point(4 + (290 * (num - 3)), 4);
                    this.groupBoxDn.Visible = true;
                    num++;
                }
                else if (num < 3)
                {
                    this.tabControl1.TabPages[0].Controls.Add(this.groupBoxDn);
                    this.groupBoxDn.Location = new Point(4 + (290 * num), 4);
                    this.groupBoxDn.Visible = true;
                    num++;
                }
            }
            else
            {
                this.groupBoxDn.Visible = false;
            }
            if (define.comPt)
            {
                if (num >= 3)
                {
                    if ((num >= 3) && !this.tabControl1.TabPages.Contains(this.tabPage2))
                    {
                        this.tabControl1.TabPages.Add(this.tabPage2);
                    }
                    this.tabControl1.TabPages[1].Controls.Add(this.groupBoxPt);
                    this.groupBoxPt.Location = new Point(4 + (290 * (num - 3)), 4);
                    this.groupBoxPt.Visible = true;
                    num++;
                }
                else if (num < 3)
                {
                    this.tabControl1.TabPages[0].Controls.Add(this.groupBoxPt);
                    this.groupBoxPt.Location = new Point(4 + (290 * num), 4);
                    this.groupBoxPt.Visible = true;
                    num++;
                }
            }
            else
            {
                this.groupBoxPt.Visible = false;
            }
            if (num <= 3)
            {
                this.tabControl1.TabPages.Remove(this.tabPage2);
                this.tabControl1.TabPages.Remove(this.tabPage3);
            }
            this.comboBoxPNAN.Enabled = define.comGF;
            this.comboBoxLNAN.Enabled = define.comDF;
            this.comboBoxSwitchN.Enabled = define.comSwitch;
            if ((define.comSwitch || define.comGF) || define.comDF)
            {
                if (!this.tabControl1.TabPages.Contains(this.tabPage3))
                {
                    this.tabControl1.TabPages.Add(this.tabPage3);
                }
            }
            else
            {
                this.tabControl1.TabPages.Remove(this.tabPage3);
            }
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void ThreadFunc()
    {
        MethodInvoker method = new MethodInvoker(this.ShowFrom);
        base.BeginInvoke(method);
    }

    public void ThreadInvoke()
    {
        Main.mouseg mouseg = new Main.mouseg(this.search);
        mouseg();
    }

    private void timer3D_Tick(object sender, EventArgs e)
    {
        try
        {
            if (this.StopAngle > (SCM.testAngleBound + 1f))
            {
                this.buttonStopAuto_Click(sender, e);
                this.TestOver = true;
                SCM.autoTestStart = 0;
                SCM.autoTestend = 0;
                this.timer3D.Enabled = false;
                this.SaveData(this.DirStrPath);
                MessageBox.Show("3D数据已经测试完成,请查看！", "提示", MessageBoxButtons.OK, MessageBoxIcon.None);
            }
            switch (SCM.autoTestStart)
            {
                case 2:
                    break;

                case 3:
                    if (this.buttonElCW.Enabled && this.buttonSdCW.Enabled)
                    {
                        this.buttonElStop_Click(sender, e);
                        this.listBoxAutoTest.Items[4] = " 当前动作:处理数据";
                        SCM.autoTestStart = 4;
                        this.PassDoubleData();
                    }
                    return;

                case 4:
                    SCM.autoTestStart = 5;
                    this.textBoxAzYD.Text = Convert.ToString(Convert.ToSingle(define.CutAngle));
                    this.buttonAzYD_Click(sender, e);
                    this.listBoxAutoTest.Items[4] = " 当前动作:方位轴顺转";
                    return;

                case 5:
                    if (this.buttonAzCW.Enabled)
                    {
                        SCM.autoTestStart = 2;
                    }
                    return;

                default:
                    return;
            }
            this.sBitmap = new Bitmap(this.pictureBox1.Width, this.pictureBox1.Height);
            this.Drawsn();
            this.sPointNum = 0;
            if (SCM.testFX == 1)
            {
                this.textBoxElYD.Text = Convert.ToString(360);
                this.buttonElYD_Click(sender, e);
                if (this.radioButton1.Checked)
                {
                    this.textBoxSdYD.Text = Convert.ToString((Math.Abs(SCM.azAngle) < 90f) ? -360 : 360);
                    this.buttonSdYD_Click(sender, e);
                }
                this.listBoxAutoTest.Items[4] = " 当前动作:接收轴顺转";
            }
            if (SCM.testFX == 2)
            {
                this.textBoxElYD.Text = Convert.ToString(-360);
                this.buttonElYD_Click(sender, e);
                if (this.radioButton1.Checked)
                {
                    this.textBoxSdYD.Text = Convert.ToString((Math.Abs(SCM.azAngle) < 90f) ? 360 : -360);
                    this.buttonSdYD_Click(sender, e);
                }
                this.listBoxAutoTest.Items[4] = " 当前动作:接收轴逆转";
            }
            this.listBoxAutoTest.Items[5] = " 当前方位角度:" + SCM.azAngle.ToString("0.00");
            SCM.autoTestStart = 3;
        }
        catch (Exception exception)
        {
            errLogFunction("timer3D_Tick: + " + exception.ToString());
        }
    }

    private void timer5_Tick(object sender, EventArgs e)
    {
        try
        {
            if ((a % 2) == 1)
            {
                this.groupBoxAz.BackgroundColor = Color.White;
                this.trackBarAz.BackColor = Color.White;
                this.groupBoxEl.BackgroundColor = Color.White;
                this.trackBarEl.BackColor = Color.White;
                this.groupBoxSd.BackgroundColor = Color.White;
                this.trackBarSd.BackColor = Color.White;
                this.groupBoxDn.BackgroundColor = Color.White;
                this.trackBarDn.BackColor = Color.White;
                this.groupBoxRv.BackgroundColor = Color.White;
                this.trackBarRv.BackColor = Color.White;
                this.groupBoxPt.BackgroundColor = Color.White;
                this.trackBarPt.BackColor = Color.White;
            }
            else
            {
                this.groupBoxAz.BackgroundColor = Color.LightGreen;
                this.trackBarAz.BackColor = Color.LightGreen;
                this.groupBoxEl.BackgroundColor = Color.LightGreen;
                this.trackBarEl.BackColor = Color.LightGreen;
                this.groupBoxSd.BackgroundColor = Color.LightGreen;
                this.trackBarSd.BackColor = Color.LightGreen;
                this.groupBoxDn.BackgroundColor = Color.LightGreen;
                this.trackBarDn.BackColor = Color.LightGreen;
                this.groupBoxRv.BackgroundColor = Color.LightGreen;
                this.trackBarRv.BackColor = Color.LightGreen;
                this.groupBoxPt.BackgroundColor = Color.LightGreen;
                this.trackBarPt.BackColor = Color.LightGreen;
            }
            a++;
            if (a == 8)
            {
                this.timerShowGroup.Enabled = false;
                this.groupBoxAz.BackgroundColor = Color.White;
                this.trackBarAz.BackColor = Color.White;
                this.groupBoxEl.BackgroundColor = Color.White;
                this.trackBarEl.BackColor = Color.White;
                this.groupBoxSd.BackgroundColor = Color.White;
                this.trackBarSd.BackColor = Color.White;
                this.groupBoxDn.BackgroundColor = Color.White;
                this.trackBarDn.BackColor = Color.White;
                this.groupBoxRv.BackgroundColor = Color.White;
                this.trackBarRv.BackColor = Color.White;
                this.groupBoxPt.BackgroundColor = Color.White;
                this.trackBarPt.BackColor = Color.White;
                a = 1;
            }
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void timerAsk_Tick(object sender, EventArgs e)
    {
        try
        {
            if ((!define.ScmAz && define.comAz) && (SCM.Az_angle_Flag == 1))
            {
                SCM.Send_Cmd[1] = 0x65;
                this.serialPortAz.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
            }
            if ((!define.ScmEl && define.comEl) && (SCM.El_angle_Flag == 1))
            {
                SCM.Send_Cmd[1] = 0x65;
                this.serialPortEl.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
            }
            if ((!define.ScmDn && define.comDn) && (SCM.Dn_angle_Flag == 1))
            {
                SCM.Send_Cmd[1] = 0x65;
                this.serialPortAz.Write(SCM.Send_Cmd, 0, SCM.Send_Cmd.Length);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("timerAsk_Tick + " + exception.ToString());
        }
    }

    private void timerAutoEl_Tick(object sender, EventArgs e)
    {
        try
        {
            float num;
            if (define.riseFX == 1)
            {
                if ((SCM.autoTestStart == 1) && (SCM.autoTestend == 0))
                {
                    if (Math.Abs((float) (0f - SCM.elAngle)) > 0.3)
                    {
                        SCM.autoTestStart = 2;
                        num = 0f - SCM.elAngle;
                        this.textBoxElYD.Text = num.ToString("0.00");
                        this.buttonElYD_Click(sender, e);
                    }
                    else
                    {
                        SCM.autoTestStart = 2;
                        SCM.autoTestend = 1;
                    }
                }
                if ((SCM.autoTestStart == 2) && (SCM.autoTestend == 1))
                {
                    if (Math.Abs((float) (0f - SCM.azAngle)) > 0.3)
                    {
                        SCM.autoTestStart = 3;
                        num = 0f - SCM.azAngle;
                        this.textBoxAzYD.Text = num.ToString("0.00");
                        this.buttonAzYD_Click(sender, e);
                    }
                    else
                    {
                        SCM.autoTestStart = 3;
                        SCM.autoTestend = 2;
                    }
                }
                if ((SCM.autoTestStart == 3) && (SCM.autoTestend == 2))
                {
                    SCM.autoTestStart = 4;
                    num = 0f - SCM.dnAngle;
                    this.textBoxDnYD.Text = num.ToString("0.00");
                    this.buttonDnYD_Click(sender, e);
                }
                if ((SCM.autoTestStart == 4) && (SCM.autoTestend == 3))
                {
                    this.timerAutoEl.Enabled = false;
                    this.comboBoxVANPower.Text = "ON";
                    SCM.autoTestStart = 0;
                    SCM.autoTestend = 0;
                    if (define.riseFX == 1)
                    {
                        this.buttonElUP.Enabled = false;
                        this.buttonElDN.Enabled = true;
                    }
                    else if (define.riseFX == 2)
                    {
                        this.buttonElUP.Enabled = true;
                        this.buttonElDN.Enabled = false;
                    }
                }
            }
            else if (define.riseFX == 2)
            {
                if ((SCM.autoTestStart == 1) && (SCM.autoTestend == 0))
                {
                    this.comboBoxVANPower.Text = "OFF";
                    SCM.autoTestStart = 2;
                    SCM.autoTestend = 1;
                }
                if ((SCM.autoTestStart == 2) && (SCM.autoTestend == 1))
                {
                    SCM.autoTestStart = 3;
                    num = -30f - SCM.dnAngle;
                    this.textBoxDnYD.Text = num.ToString("0.00");
                    this.buttonDnYD_Click(sender, e);
                }
                if ((SCM.autoTestStart == 3) && (SCM.autoTestend == 2))
                {
                    if (Math.Abs((float) (0f - SCM.azAngle)) > 0.3)
                    {
                        SCM.autoTestStart = 4;
                        num = 0f - SCM.azAngle;
                        this.textBoxAzYD.Text = num.ToString("0.00");
                        this.buttonAzYD_Click(sender, e);
                    }
                    else
                    {
                        SCM.autoTestStart = 4;
                        SCM.autoTestend = 3;
                    }
                }
                if ((SCM.autoTestStart == 4) && (SCM.autoTestend == 3))
                {
                    if (Math.Abs((float) (90f - SCM.rvAngle)) > 0.4)
                    {
                        SCM.autoTestStart = 5;
                        num = 90f - SCM.rvAngle;
                        this.textBoxRvYD.Text = num.ToString("0.00");
                        this.buttonRvYD_Click(sender, e);
                    }
                    else
                    {
                        SCM.autoTestStart = 5;
                        SCM.autoTestend = 4;
                    }
                }
                if ((SCM.autoTestStart == 5) && (SCM.autoTestend == 4))
                {
                    if (Math.Abs((float) (-90f - SCM.elAngle)) > 0.4)
                    {
                        SCM.autoTestStart = 6;
                        this.textBoxElYD.Text = (-90f - SCM.elAngle).ToString();
                        this.buttonElYD_Click(sender, e);
                    }
                    else
                    {
                        SCM.autoTestStart = 6;
                        SCM.autoTestend = 5;
                    }
                }
                if ((SCM.autoTestStart == 6) && (SCM.autoTestend == 5))
                {
                    this.timerAutoEl.Enabled = false;
                    SCM.autoTestStart = 0;
                    SCM.autoTestend = 0;
                    if (define.riseFX == 1)
                    {
                        this.buttonElUP.Enabled = false;
                        this.buttonElDN.Enabled = true;
                    }
                    else if (define.riseFX == 2)
                    {
                        this.buttonElUP.Enabled = true;
                        this.buttonElDN.Enabled = false;
                    }
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("timer1_Tick + " + exception.ToString());
        }
    }

    private void timerAutoTestP2_Two_Tick(object sender, EventArgs e)
    {
        try
        {
            if (SCM.testFreq1.Length > 0)
            {
                Array.Resize<string>(ref SCM.testFreqArr, 10);
                SCM.testFreqArr[1] = SCM.testFreq1[1];
                SCM.testFreqArr[2] = SCM.testFreq1[2];
                SCM.testFreqArr[3] = SCM.testFreq1[3];
                SCM.testFreqArr[4] = SCM.testFreq1[4];
                SCM.testFreqArr[5] = SCM.testFreq1[5];
                SCM.testFreqArr[6] = SCM.testFreq1[6];
                SCM.testFreqArr[7] = SCM.testFreq1[7];
                SCM.testFreqArr[8] = SCM.testFreq1[8];
                SCM.testFreqArr[9] = SCM.testFreq1[9];
                SCM.freqStar = SCM.testFreq1[10];
                SCM.freqStop = SCM.testFreq1[11];
                Array.Resize<string>(ref SCM.testFreq1, 0);
                this.SetFreqency();
            }
            else if ((SCM.autoTestStart == 1) && (SCM.autoTestend == 0))
            {
                this.timerAutoTestP2_Two.Enabled = false;
                MessageBox.Show("未设置频率，请设置频率后再自动化测试！", "提示信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                SCM.autoTestStart = 0;
                SCM.autoTestend = 0;
            }
            if (SCM.testPort[1].flag && SCM.testPort[1].H)
            {
                if ((SCM.autoTestStart == 1) && (SCM.autoTestend == 0))
                {
                    SCM.autoTestStart = 2;
                    this.AutoTestSetAntna("端口1", "", "水平面", "主极化", "+45\x00b0", 1, "");
                }
                if ((SCM.autoTestStart == 2) && (SCM.autoTestend == 1))
                {
                    SCM.autoTestStart = 3;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 1) && (SCM.autoTestend == 0))
            {
                SCM.autoTestStart = 3;
                SCM.autoTestend = 2;
            }
            if (SCM.testPort[2].flag && SCM.testPort[2].Hxpd)
            {
                if ((SCM.autoTestStart == 3) && (SCM.autoTestend == 2))
                {
                    SCM.autoTestStart = 4;
                    this.AutoTestSetAntna("端口2", "", "水平面", "交叉极化", "+45\x00b0", 2, "");
                }
                if ((SCM.autoTestStart == 4) && (SCM.autoTestend == 3))
                {
                    SCM.autoTestStart = 5;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 3) && (SCM.autoTestend == 2))
            {
                SCM.autoTestStart = 5;
                SCM.autoTestend = 4;
            }
            if (!(((SCM.autoTestStart != 5) || (SCM.autoTestend != 4)) || SCM.sdYDFlag))
            {
                SCM.autoTestStart = 6;
                this.textBoxSdDW.Text = "-45";
                this.buttonSdDW_Click(sender, e);
                this.listBoxAutoTest.Items[9] = " 当前动作:旋转发射极化，更换极化";
            }
            if (SCM.testPort[1].flag && SCM.testPort[1].Hxpd)
            {
                if ((SCM.autoTestStart == 6) && (SCM.autoTestend == 5))
                {
                    SCM.autoTestStart = 7;
                    this.AutoTestSetAntna("端口1", "", "水平面", "交叉极化", "-45\x00b0", 1, "");
                }
                if ((SCM.autoTestStart == 7) && (SCM.autoTestend == 6))
                {
                    SCM.autoTestStart = 8;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 6) && (SCM.autoTestend == 5))
            {
                SCM.autoTestStart = 8;
                SCM.autoTestend = 7;
            }
            if (SCM.testPort[2].flag && SCM.testPort[2].H)
            {
                if ((SCM.autoTestStart == 8) && (SCM.autoTestend == 7))
                {
                    SCM.autoTestStart = 9;
                    this.AutoTestSetAntna("端口2", "", "水平面", "主极化", "-45\x00b0", 2, "");
                }
                if ((SCM.autoTestStart == 9) && (SCM.autoTestend == 8))
                {
                    SCM.autoTestStart = 10;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 8) && (SCM.autoTestend == 7))
            {
                SCM.autoTestStart = 10;
                SCM.autoTestend = 9;
            }
            if ((SCM.testPort[1].flag && SCM.testPort[1].V) || (SCM.testPort[2].flag && SCM.testPort[2].V))
            {
                if (((SCM.autoTestStart == 10) && (SCM.autoTestend == 9)) && !SCM.elYDFlag)
                {
                    if (Math.Abs((float) (0f - SCM.elAngle)) > 0.5)
                    {
                        SCM.autoTestStart = 11;
                        this.textBoxElDW.Text = "0";
                        this.buttonElDW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:旋转俯仰轴归零";
                    }
                    else
                    {
                        SCM.autoTestStart = 11;
                        SCM.autoTestend = 10;
                    }
                }
                if (SCM.testPort[1].V || SCM.testPort[3].V)
                {
                    if (!(((SCM.autoTestStart != 11) || (SCM.autoTestend != 10)) || SCM.rvYDFlag))
                    {
                        SCM.autoTestStart = 12;
                        this.textBoxRvDW.Text = "90";
                        this.buttonRvDW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:旋转接收极化，更换测试面";
                    }
                }
                else if ((SCM.autoTestStart == 11) && (SCM.autoTestend == 10))
                {
                    SCM.autoTestStart = 12;
                    SCM.autoTestend = 10;
                }
                if (SCM.testPort[1].flag && SCM.testPort[1].V)
                {
                    if ((SCM.autoTestStart == 12) && (SCM.autoTestend == 11))
                    {
                        SCM.autoTestStart = 13;
                        this.AutoTestSetAntna("端口1", "", "垂直面", "主极化", "-45\x00b0", 1, "");
                    }
                    if ((SCM.autoTestStart == 13) && (SCM.autoTestend == 12))
                    {
                        SCM.autoTestStart = 14;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 12) && (SCM.autoTestend == 11))
                {
                    SCM.autoTestStart = 14;
                    SCM.autoTestend = 13;
                }
                if (!(((SCM.autoTestStart != 14) || (SCM.autoTestend != 13)) || SCM.sdYDFlag))
                {
                    SCM.autoTestStart = 15;
                    this.textBoxSdDW.Text = "45";
                    this.buttonSdDW_Click(sender, e);
                    this.listBoxAutoTest.Items[9] = " 当前动作:旋转发射极化,更换极化";
                }
                if (SCM.testPort[2].flag && SCM.testPort[2].V)
                {
                    if ((SCM.autoTestStart == 15) && (SCM.autoTestend == 14))
                    {
                        SCM.autoTestStart = 0x10;
                        this.AutoTestSetAntna("端口2", "", "垂直面", "主极化", "+45\x00b0", 2, "");
                    }
                    if ((SCM.autoTestStart == 0x10) && (SCM.autoTestend == 15))
                    {
                        SCM.autoTestStart = 0x11;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 15) && (SCM.autoTestend == 14))
                {
                    SCM.autoTestStart = 0x11;
                    SCM.autoTestend = 0x10;
                }
            }
            else if ((SCM.autoTestStart == 10) && (SCM.autoTestend == 9))
            {
                SCM.autoTestStart = 0x11;
                SCM.autoTestend = 0x10;
            }
            if ((SCM.autoTestStart == 0x11) && (SCM.autoTestend == 0x10))
            {
                SCM.autoTestStart = 0;
                SCM.autoTestend = 0;
                this.timerAutoTestP2_Two.Enabled = false;
                this.listBoxAutoTest.Items[2] = " 测试状态 :未进行自动化测试";
                for (int i = 3; i < 10; i++)
                {
                    this.listBoxAutoTest.Items[i] = "";
                }
                MessageBox.Show("自动化测试完成.请查看数据完整性", "测试完成", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("timerAutoTestP2_Two_Tick + " + exception.ToString());
        }
    }

    private void timerAutoTestP4_1_Four_Tick(object sender, EventArgs e)
    {
        try
        {
            if (SCM.testPort[1].flag || SCM.testPort[2].flag)
            {
                if (SCM.testFreq1.Length > 0)
                {
                    Array.Resize<string>(ref SCM.testFreqArr, 10);
                    SCM.testFreqArr[1] = SCM.testFreq1[1];
                    SCM.testFreqArr[2] = SCM.testFreq1[2];
                    SCM.testFreqArr[3] = SCM.testFreq1[3];
                    SCM.testFreqArr[4] = SCM.testFreq1[4];
                    SCM.testFreqArr[5] = SCM.testFreq1[5];
                    SCM.testFreqArr[6] = SCM.testFreq1[6];
                    SCM.testFreqArr[7] = SCM.testFreq1[7];
                    SCM.testFreqArr[8] = SCM.testFreq1[8];
                    SCM.testFreqArr[9] = SCM.testFreq1[9];
                    SCM.freqStar = SCM.testFreq1[10];
                    SCM.freqStop = SCM.testFreq1[11];
                    Array.Resize<string>(ref SCM.testFreq1, 0);
                    this.SetFreqency();
                }
                else if ((SCM.autoTestStart == 1) && (SCM.autoTestend == 0))
                {
                    this.timerAutoTestP4_1_Four.Enabled = false;
                    MessageBox.Show("未设置频率，请设置频率后再自动化测试！", "提示信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                    SCM.autoTestStart = 0;
                    SCM.autoTestend = 0;
                }
            }
            if ((SCM.testPort[1].flag && (SCM.testPort[1].H || SCM.testPort[1].Hxpd)) || (SCM.testPort[2].flag && (SCM.testPort[2].H || SCM.testPort[2].Hxpd)))
            {
                if (SCM.testPort[1].flag && SCM.testPort[1].H)
                {
                    if ((SCM.autoTestStart == 1) && (SCM.autoTestend == 0))
                    {
                        SCM.autoTestStart = 2;
                        this.AutoTestSetAntna("端口1", "", "水平面", "主极化", "+45\x00b0", 1, "");
                    }
                    if ((SCM.autoTestStart == 2) && (SCM.autoTestend == 1))
                    {
                        SCM.autoTestStart = 3;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 1) && (SCM.autoTestend == 0))
                {
                    SCM.autoTestStart = 3;
                    SCM.autoTestend = 2;
                }
                if (SCM.testPort[2].flag && SCM.testPort[2].Hxpd)
                {
                    if ((SCM.autoTestStart == 3) && (SCM.autoTestend == 2))
                    {
                        SCM.autoTestStart = 4;
                        this.AutoTestSetAntna("端口2", "", "水平面", "交叉极化", "+45\x00b0", 2, "");
                    }
                    if ((SCM.autoTestStart == 4) && (SCM.autoTestend == 3))
                    {
                        SCM.autoTestStart = 5;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 3) && (SCM.autoTestend == 2))
                {
                    SCM.autoTestStart = 5;
                    SCM.autoTestend = 4;
                }
                if (!(((SCM.autoTestStart != 5) || (SCM.autoTestend != 4)) || SCM.sdYDFlag))
                {
                    SCM.autoTestStart = 6;
                    this.textBoxSdDW.Text = "-45";
                    this.buttonSdDW_Click(sender, e);
                    this.listBoxAutoTest.Items[9] = " 当前动作:旋转发射极化，更换极化";
                }
                if (SCM.testPort[1].flag && SCM.testPort[1].Hxpd)
                {
                    if ((SCM.autoTestStart == 6) && (SCM.autoTestend == 5))
                    {
                        SCM.autoTestStart = 7;
                        this.AutoTestSetAntna("端口1", "", "水平面", "交叉极化", "-45\x00b0", 1, "");
                    }
                    if ((SCM.autoTestStart == 7) && (SCM.autoTestend == 6))
                    {
                        SCM.autoTestStart = 8;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 6) && (SCM.autoTestend == 5))
                {
                    SCM.autoTestStart = 8;
                    SCM.autoTestend = 7;
                }
                if (SCM.testPort[2].flag && SCM.testPort[2].H)
                {
                    if ((SCM.autoTestStart == 8) && (SCM.autoTestend == 7))
                    {
                        SCM.autoTestStart = 9;
                        this.AutoTestSetAntna("端口2", "", "水平面", "主极化", "-45\x00b0", 2, "");
                    }
                    if ((SCM.autoTestStart == 9) && (SCM.autoTestend == 8))
                    {
                        SCM.autoTestStart = 10;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 8) && (SCM.autoTestend == 7))
                {
                    SCM.autoTestStart = 10;
                    SCM.autoTestend = 9;
                }
            }
            else if ((SCM.autoTestStart == 1) && (SCM.autoTestend == 0))
            {
                SCM.autoTestStart = 10;
                SCM.autoTestend = 9;
            }
            if ((SCM.testPort[1].flag && SCM.testPort[1].V) || (SCM.testPort[2].flag && SCM.testPort[2].V))
            {
                if (((SCM.autoTestStart == 10) && (SCM.autoTestend == 9)) && !SCM.elYDFlag)
                {
                    if (Math.Abs((float) (0f - SCM.elAngle)) > 0.5)
                    {
                        SCM.autoTestStart = 11;
                        this.textBoxElDW.Text = "0";
                        SCM.DownAngle = SCM.elAngle;
                        this.buttonElDW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:旋转俯仰轴归零";
                    }
                    else
                    {
                        SCM.autoTestStart = 11;
                        SCM.autoTestend = 10;
                    }
                }
                if (SCM.testPort[1].V || (SCM.testPort[3].V && !SCM.rvYDFlag))
                {
                    if ((SCM.autoTestStart == 11) && (SCM.autoTestend == 10))
                    {
                        SCM.autoTestStart = 12;
                        this.textBoxRvYD.Text = "90";
                        this.buttonRvYD_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:旋转接收极化，更换测试面";
                    }
                }
                else if ((SCM.autoTestStart == 11) && (SCM.autoTestend == 10))
                {
                    SCM.autoTestStart = 12;
                    SCM.autoTestend = 10;
                }
                if (SCM.testPort[1].flag && SCM.testPort[1].V)
                {
                    if ((SCM.autoTestStart == 12) && (SCM.autoTestend == 11))
                    {
                        SCM.autoTestStart = 13;
                        this.AutoTestSetAntna("端口1", "", "垂直面", "主极化", "-45\x00b0", 1, "");
                    }
                    if ((SCM.autoTestStart == 13) && (SCM.autoTestend == 12))
                    {
                        SCM.autoTestStart = 14;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 12) && (SCM.autoTestend == 11))
                {
                    SCM.autoTestStart = 14;
                    SCM.autoTestend = 13;
                }
                if (!(((SCM.autoTestStart != 14) || (SCM.autoTestend != 13)) || SCM.sdYDFlag))
                {
                    SCM.autoTestStart = 15;
                    this.textBoxSdDW.Text = "45";
                    this.buttonSdDW_Click(sender, e);
                    this.listBoxAutoTest.Items[9] = " 当前动作:旋转发射极化,更换极化";
                }
                if (SCM.testPort[2].flag && SCM.testPort[2].V)
                {
                    if ((SCM.autoTestStart == 15) && (SCM.autoTestend == 14))
                    {
                        SCM.autoTestStart = 0x10;
                        this.AutoTestSetAntna("端口2", "", "垂直面", "主极化", "+45\x00b0", 2, "");
                    }
                    if ((SCM.autoTestStart == 0x10) && (SCM.autoTestend == 15))
                    {
                        SCM.autoTestStart = 0x11;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 15) && (SCM.autoTestend == 14))
                {
                    SCM.autoTestStart = 0x11;
                    SCM.autoTestend = 0x10;
                }
            }
            else if ((SCM.autoTestStart == 10) && (SCM.autoTestend == 9))
            {
                SCM.autoTestStart = 0x11;
                SCM.autoTestend = 0x10;
            }
            if ((SCM.autoTestStart == 0x11) && (SCM.autoTestend == 0x10))
            {
                this.timerAutoTestP4_1_Four.Enabled = false;
                this.listBoxAutoTest.Items[2] = " 测试状态 :未进行自动化测试";
                new Mgbox().Show();
            }
        }
        catch (Exception exception)
        {
            errLogFunction("timerAutoTestP4_1_Two_Tick + " + exception.ToString());
        }
    }

    private void timerAutoTestP4_2_Four_Tick(object sender, EventArgs e)
    {
        try
        {
            if (SCM.testFreq2.Length > 0)
            {
                Array.Resize<string>(ref SCM.testFreqArr, 10);
                SCM.testFreqArr[1] = SCM.testFreq2[1];
                SCM.testFreqArr[2] = SCM.testFreq2[2];
                SCM.testFreqArr[3] = SCM.testFreq2[3];
                SCM.testFreqArr[4] = SCM.testFreq2[4];
                SCM.testFreqArr[5] = SCM.testFreq2[5];
                SCM.testFreqArr[6] = SCM.testFreq2[6];
                SCM.testFreqArr[7] = SCM.testFreq2[7];
                SCM.testFreqArr[8] = SCM.testFreq2[8];
                SCM.testFreqArr[9] = SCM.testFreq2[9];
                SCM.freqStar = SCM.testFreq2[10];
                SCM.freqStop = SCM.testFreq2[11];
                Array.Resize<string>(ref SCM.testFreq2, 0);
                this.SetFreqency();
            }
            else if ((SCM.autoTestStart == 10) && (SCM.autoTestend == 9))
            {
                this.timerAutoTestP4_2_Four.Enabled = false;
                MessageBox.Show("未设置频率，请设置频率后再自动化测试！", "提示信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                SCM.autoTestStart = 0;
                SCM.autoTestend = 0;
            }
            if ((SCM.testPort[3].flag && SCM.testPort[3].V) || (SCM.testPort[4].flag && SCM.testPort[4].V))
            {
                if (SCM.testPort[4].flag && SCM.testPort[4].V)
                {
                    if ((SCM.autoTestStart == 0x13) && (SCM.autoTestend == 0x12))
                    {
                        SCM.autoTestStart = 20;
                        this.AutoTestSetAntna("端口4", "", "垂直面", "主极化", "+45\x00b0", 4, "");
                    }
                    if ((SCM.autoTestStart == 20) && (SCM.autoTestend == 0x13))
                    {
                        SCM.autoTestStart = 0x15;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 0x13) && (SCM.autoTestend == 0x12))
                {
                    SCM.autoTestStart = 0x15;
                    SCM.autoTestend = 20;
                }
                if (!(((SCM.autoTestStart != 0x15) || (SCM.autoTestend != 20)) || SCM.sdYDFlag))
                {
                    SCM.autoTestStart = 0x16;
                    this.textBoxSdDW.Text = "-45";
                    this.buttonSdDW_Click(sender, e);
                    this.listBoxAutoTest.Items[9] = " 当前动作:旋转发射极化,更换极化";
                }
                if (SCM.testPort[3].flag && SCM.testPort[3].V)
                {
                    if ((SCM.autoTestStart == 0x16) && (SCM.autoTestend == 0x15))
                    {
                        SCM.autoTestStart = 0x17;
                        this.AutoTestSetAntna("端口3", "", "垂直面", "主极化", "-45\x00b0", 3, "");
                    }
                    if ((SCM.autoTestStart == 0x17) && (SCM.autoTestend == 0x16))
                    {
                        SCM.autoTestStart = 0x18;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 0x16) && (SCM.autoTestend == 0x15))
                {
                    SCM.autoTestStart = 0x18;
                    SCM.autoTestend = 0x17;
                }
            }
            else if ((SCM.autoTestStart == 0x13) && (SCM.autoTestend == 0x12))
            {
                SCM.autoTestStart = 0x18;
                SCM.autoTestend = 0x17;
            }
            if ((SCM.testPort[3].flag && (SCM.testPort[3].H || SCM.testPort[3].Hxpd)) || (SCM.testPort[4].flag && (SCM.testPort[4].H || SCM.testPort[4].Hxpd)))
            {
                if (((SCM.autoTestStart == 0x18) && (SCM.autoTestend == 0x17)) && !SCM.elYDFlag)
                {
                    if (Math.Abs((float) (SCM.DownAngle - SCM.elAngle)) > 0.3)
                    {
                        SCM.autoTestStart = 0x19;
                        this.textBoxElDW.Text = SCM.DownAngle.ToString();
                        this.buttonElDW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:旋转俯仰轴回复到初始位置";
                    }
                    else
                    {
                        SCM.autoTestStart = 0x19;
                        SCM.autoTestend = 0x18;
                    }
                }
                if (!(((SCM.autoTestStart != 0x19) || (SCM.autoTestend != 0x18)) || SCM.rvYDFlag))
                {
                    SCM.autoTestStart = 0x1a;
                    this.textBoxRvDW.Text = "0";
                    this.buttonRvDW_Click(sender, e);
                    this.listBoxAutoTest.Items[9] = " 当前动作:旋转接收极化，更换测试面";
                }
                else if ((SCM.autoTestStart == 0x19) && (SCM.autoTestend == 0x18))
                {
                    SCM.autoTestStart = 0x1a;
                    SCM.autoTestend = 0x19;
                }
                if (SCM.testPort[4].flag && SCM.testPort[4].H)
                {
                    if ((SCM.autoTestStart == 0x1a) && (SCM.autoTestend == 0x19))
                    {
                        SCM.autoTestStart = 0x1b;
                        this.AutoTestSetAntna("端口4", "", "水平面", "主极化", "-45\x00b0", 4, "");
                    }
                    if ((SCM.autoTestStart == 0x1b) && (SCM.autoTestend == 0x1a))
                    {
                        SCM.autoTestStart = 0x1c;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 0x1a) && (SCM.autoTestend == 0x19))
                {
                    SCM.autoTestStart = 0x1c;
                    SCM.autoTestend = 0x1b;
                }
                if (SCM.testPort[3].flag && SCM.testPort[3].Hxpd)
                {
                    if ((SCM.autoTestStart == 0x1c) && (SCM.autoTestend == 0x1b))
                    {
                        SCM.autoTestStart = 0x1d;
                        this.AutoTestSetAntna("端口3", "", "水平面", "交叉极化", "-45\x00b0", 3, "");
                    }
                    if ((SCM.autoTestStart == 0x1d) && (SCM.autoTestend == 0x1c))
                    {
                        SCM.autoTestStart = 30;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 0x1c) && (SCM.autoTestend == 0x1b))
                {
                    SCM.autoTestStart = 30;
                    SCM.autoTestend = 0x1d;
                }
                if (!(((SCM.autoTestStart != 30) || (SCM.autoTestend != 0x1d)) || SCM.sdYDFlag))
                {
                    SCM.autoTestStart = 0x1f;
                    this.textBoxSdDW.Text = "45";
                    this.buttonSdDW_Click(sender, e);
                    this.listBoxAutoTest.Items[9] = " 当前动作:旋转发射极化，更换极化";
                }
                if (SCM.testPort[4].flag && SCM.testPort[4].Hxpd)
                {
                    if ((SCM.autoTestStart == 0x1f) && (SCM.autoTestend == 30))
                    {
                        SCM.autoTestStart = 0x20;
                        this.AutoTestSetAntna("端口4", "", "水平面", "交叉极化", "+45\x00b0", 4, "");
                    }
                    if ((SCM.autoTestStart == 0x20) && (SCM.autoTestend == 0x1f))
                    {
                        SCM.autoTestStart = 0x21;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 0x1f) && (SCM.autoTestend == 30))
                {
                    SCM.autoTestStart = 0x21;
                    SCM.autoTestend = 0x20;
                }
                if (SCM.testPort[3].flag && SCM.testPort[3].H)
                {
                    if ((SCM.autoTestStart == 0x21) && (SCM.autoTestend == 0x20))
                    {
                        SCM.autoTestStart = 0x22;
                        this.AutoTestSetAntna("端口3", "", "水平面", "主极化", "+45\x00b0", 3, "");
                    }
                    if ((SCM.autoTestStart == 0x22) && (SCM.autoTestend == 0x21))
                    {
                        SCM.autoTestStart = 0x23;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 0x21) && (SCM.autoTestend == 0x20))
                {
                    SCM.autoTestStart = 0x23;
                    SCM.autoTestend = 0x22;
                }
            }
            else if ((SCM.autoTestStart == 0x18) && (SCM.autoTestend == 0x17))
            {
                SCM.autoTestStart = 0x23;
                SCM.autoTestend = 0x22;
            }
            if ((SCM.autoTestStart == 0x23) && (SCM.autoTestend == 0x22))
            {
                SCM.autoTestStart = 0;
                SCM.autoTestend = 0;
                this.timerAutoTestP4_2_Four.Enabled = false;
                this.listBoxAutoTest.Items[2] = " 测试状态 :未进行自动化测试";
                for (int i = 3; i < 10; i++)
                {
                    this.listBoxAutoTest.Items[i] = "";
                }
                MessageBox.Show("自动化测试完成.请查看数据完整性", "测试完成", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("timerAutoTestP4_2_Two_Tick + " + exception.ToString());
        }
    }

    private void timerAutoTestP4_Four_Tick(object sender, EventArgs e)
    {
        try
        {
            if (SCM.testPort[1].flag && SCM.testPort[1].H)
            {
                if ((SCM.autoTestStart == 1) && (SCM.autoTestend == 0))
                {
                    if (SCM.testFreq1.Length > 0)
                    {
                        if (SCM.testFreqArr.Length < 10)
                        {
                            Array.Resize<string>(ref SCM.testFreqArr, 10);
                        }
                        SCM.testFreqArr[1] = SCM.testFreq1[1];
                        SCM.testFreqArr[2] = SCM.testFreq1[2];
                        SCM.testFreqArr[3] = SCM.testFreq1[3];
                        SCM.testFreqArr[4] = SCM.testFreq1[4];
                        SCM.testFreqArr[5] = SCM.testFreq1[5];
                        SCM.testFreqArr[6] = SCM.testFreq1[6];
                        SCM.testFreqArr[7] = SCM.testFreq1[7];
                        SCM.testFreqArr[8] = SCM.testFreq1[8];
                        SCM.testFreqArr[9] = SCM.testFreq1[9];
                        SCM.freqStar = SCM.testFreq1[10];
                        SCM.freqStop = SCM.testFreq1[11];
                        this.SetFreqency();
                    }
                    else if ((SCM.autoTestStart == 1) && (SCM.autoTestend == 0))
                    {
                        this.timerAutoTestP4_Four.Enabled = false;
                        MessageBox.Show("未设置频率，请设置频率后再自动化测试！", "提示信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                        SCM.autoTestStart = 0;
                        SCM.autoTestend = 0;
                    }
                    SCM.autoTestStart = 2;
                    this.AutoTestSetAntna("端口1", "", "水平面", "主极化", "+45\x00b0", 1, "");
                }
                if ((SCM.autoTestStart == 2) && (SCM.autoTestend == 1))
                {
                    SCM.autoTestStart = 3;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 1) && (SCM.autoTestend == 0))
            {
                SCM.autoTestStart = 3;
                SCM.autoTestend = 2;
            }
            if (SCM.testPort[3].flag && SCM.testPort[3].H)
            {
                if ((SCM.autoTestStart == 3) && (SCM.autoTestend == 2))
                {
                    if (SCM.testFreq2.Length > 0)
                    {
                        if (SCM.testFreqArr.Length < 10)
                        {
                            Array.Resize<string>(ref SCM.testFreqArr, 10);
                        }
                        SCM.testFreqArr[1] = SCM.testFreq2[1];
                        SCM.testFreqArr[2] = SCM.testFreq2[2];
                        SCM.testFreqArr[3] = SCM.testFreq2[3];
                        SCM.testFreqArr[4] = SCM.testFreq2[4];
                        SCM.testFreqArr[5] = SCM.testFreq2[5];
                        SCM.testFreqArr[6] = SCM.testFreq2[6];
                        SCM.testFreqArr[7] = SCM.testFreq2[7];
                        SCM.testFreqArr[8] = SCM.testFreq2[8];
                        SCM.testFreqArr[9] = SCM.testFreq2[9];
                        SCM.freqStar = SCM.testFreq2[10];
                        SCM.freqStop = SCM.testFreq2[11];
                        this.SetFreqency();
                    }
                    else if ((SCM.autoTestStart == 3) && (SCM.autoTestend == 2))
                    {
                        this.timerAutoTestP4_Four.Enabled = false;
                        MessageBox.Show("未设置频率，请设置频率后再自动化测试！", "提示信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                        SCM.autoTestStart = 0;
                        SCM.autoTestend = 0;
                    }
                    SCM.autoTestStart = 4;
                    this.AutoTestSetAntna("端口3", "", "水平面", "主极化", "+45\x00b0", 3, "");
                }
                if ((SCM.autoTestStart == 4) && (SCM.autoTestend == 3))
                {
                    SCM.autoTestStart = 5;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 3) && (SCM.autoTestend == 2))
            {
                SCM.autoTestStart = 5;
                SCM.autoTestend = 4;
            }
            if (SCM.testPort[2].flag && SCM.testPort[2].Hxpd)
            {
                if ((SCM.autoTestStart == 5) && (SCM.autoTestend == 4))
                {
                    if (SCM.testFreq1.Length > 0)
                    {
                        if (SCM.testFreqArr.Length < 10)
                        {
                            Array.Resize<string>(ref SCM.testFreqArr, 10);
                        }
                        SCM.testFreqArr[1] = SCM.testFreq1[1];
                        SCM.testFreqArr[2] = SCM.testFreq1[2];
                        SCM.testFreqArr[3] = SCM.testFreq1[3];
                        SCM.testFreqArr[4] = SCM.testFreq1[4];
                        SCM.testFreqArr[5] = SCM.testFreq1[5];
                        SCM.testFreqArr[6] = SCM.testFreq1[6];
                        SCM.testFreqArr[7] = SCM.testFreq1[7];
                        SCM.testFreqArr[8] = SCM.testFreq1[8];
                        SCM.testFreqArr[9] = SCM.testFreq1[9];
                        SCM.freqStar = SCM.testFreq1[10];
                        SCM.freqStop = SCM.testFreq1[11];
                        this.SetFreqency();
                    }
                    else if ((SCM.autoTestStart == 5) && (SCM.autoTestend == 4))
                    {
                        this.timerAutoTestP4_Four.Enabled = false;
                        MessageBox.Show("未设置频率，请设置频率后再自动化测试！", "提示信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                        SCM.autoTestStart = 0;
                        SCM.autoTestend = 0;
                    }
                    SCM.autoTestStart = 6;
                    this.AutoTestSetAntna("端口2", "", "水平面", "交叉极化", "+45\x00b0", 2, "");
                }
                if ((SCM.autoTestStart == 6) && (SCM.autoTestend == 5))
                {
                    SCM.autoTestStart = 7;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 5) && (SCM.autoTestend == 4))
            {
                SCM.autoTestStart = 7;
                SCM.autoTestend = 6;
            }
            if (SCM.testPort[4].flag && SCM.testPort[4].Hxpd)
            {
                if ((SCM.autoTestStart == 7) && (SCM.autoTestend == 6))
                {
                    if (SCM.testFreq2.Length > 0)
                    {
                        if (SCM.testFreqArr.Length < 10)
                        {
                            Array.Resize<string>(ref SCM.testFreqArr, 10);
                        }
                        SCM.testFreqArr[1] = SCM.testFreq2[1];
                        SCM.testFreqArr[2] = SCM.testFreq2[2];
                        SCM.testFreqArr[3] = SCM.testFreq2[3];
                        SCM.testFreqArr[4] = SCM.testFreq2[4];
                        SCM.testFreqArr[5] = SCM.testFreq2[5];
                        SCM.testFreqArr[6] = SCM.testFreq2[6];
                        SCM.testFreqArr[7] = SCM.testFreq2[7];
                        SCM.testFreqArr[8] = SCM.testFreq2[8];
                        SCM.testFreqArr[9] = SCM.testFreq2[9];
                        SCM.freqStar = SCM.testFreq2[10];
                        SCM.freqStop = SCM.testFreq2[11];
                        this.SetFreqency();
                    }
                    else if ((SCM.autoTestStart == 7) && (SCM.autoTestend == 6))
                    {
                        this.timerAutoTestP4_Four.Enabled = false;
                        MessageBox.Show("未设置频率，请设置频率后再自动化测试！", "提示信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                        SCM.autoTestStart = 0;
                        SCM.autoTestend = 0;
                    }
                    SCM.autoTestStart = 8;
                    this.AutoTestSetAntna("端口4", "", "水平面", "交叉极化", "+45\x00b0", 4, "");
                }
                if ((SCM.autoTestStart == 8) && (SCM.autoTestend == 7))
                {
                    SCM.autoTestStart = 9;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 7) && (SCM.autoTestend == 6))
            {
                SCM.autoTestStart = 9;
                SCM.autoTestend = 8;
            }
            if ((SCM.autoTestStart == 9) && (SCM.autoTestend == 8))
            {
                SCM.autoTestStart = 10;
                this.textBoxSdYD.Text = "-90";
                this.buttonSdYD_Click(sender, e);
                this.listBoxAutoTest.Items[9] = " 当前动作:旋转发射极化，更换极化";
            }
            if (SCM.testPort[1].flag && SCM.testPort[1].Hxpd)
            {
                if ((SCM.autoTestStart == 10) && (SCM.autoTestend == 9))
                {
                    if (SCM.testFreq1.Length > 0)
                    {
                        if (SCM.testFreqArr.Length < 10)
                        {
                            Array.Resize<string>(ref SCM.testFreqArr, 10);
                        }
                        SCM.testFreqArr[1] = SCM.testFreq1[1];
                        SCM.testFreqArr[2] = SCM.testFreq1[2];
                        SCM.testFreqArr[3] = SCM.testFreq1[3];
                        SCM.testFreqArr[4] = SCM.testFreq1[4];
                        SCM.testFreqArr[5] = SCM.testFreq1[5];
                        SCM.testFreqArr[6] = SCM.testFreq1[6];
                        SCM.testFreqArr[7] = SCM.testFreq1[7];
                        SCM.testFreqArr[8] = SCM.testFreq1[8];
                        SCM.testFreqArr[9] = SCM.testFreq1[9];
                        SCM.freqStar = SCM.testFreq1[10];
                        SCM.freqStop = SCM.testFreq1[11];
                        this.SetFreqency();
                    }
                    else if ((SCM.autoTestStart == 10) && (SCM.autoTestend == 9))
                    {
                        this.timerAutoTestP4_Four.Enabled = false;
                        MessageBox.Show("未设置频率，请设置频率后再自动化测试！", "提示信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                        SCM.autoTestStart = 0;
                        SCM.autoTestend = 0;
                    }
                    SCM.autoTestStart = 11;
                    this.AutoTestSetAntna("端口1", "", "水平面", "交叉极化", "-45\x00b0", 1, "");
                }
                if ((SCM.autoTestStart == 11) && (SCM.autoTestend == 10))
                {
                    SCM.autoTestStart = 12;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 10) && (SCM.autoTestend == 9))
            {
                SCM.autoTestStart = 12;
                SCM.autoTestend = 11;
            }
            if (SCM.testPort[3].flag && SCM.testPort[3].Hxpd)
            {
                if ((SCM.autoTestStart == 12) && (SCM.autoTestend == 11))
                {
                    if (SCM.testFreq2.Length > 0)
                    {
                        if (SCM.testFreqArr.Length < 10)
                        {
                            Array.Resize<string>(ref SCM.testFreqArr, 10);
                        }
                        SCM.testFreqArr[1] = SCM.testFreq2[1];
                        SCM.testFreqArr[2] = SCM.testFreq2[2];
                        SCM.testFreqArr[3] = SCM.testFreq2[3];
                        SCM.testFreqArr[4] = SCM.testFreq2[4];
                        SCM.testFreqArr[5] = SCM.testFreq2[5];
                        SCM.testFreqArr[6] = SCM.testFreq2[6];
                        SCM.testFreqArr[7] = SCM.testFreq2[7];
                        SCM.testFreqArr[8] = SCM.testFreq2[8];
                        SCM.testFreqArr[9] = SCM.testFreq2[9];
                        SCM.freqStar = SCM.testFreq2[10];
                        SCM.freqStop = SCM.testFreq2[11];
                        this.SetFreqency();
                    }
                    else if ((SCM.autoTestStart == 12) && (SCM.autoTestend == 11))
                    {
                        this.timerAutoTestP4_Four.Enabled = false;
                        MessageBox.Show("未设置频率，请设置频率后再自动化测试！", "提示信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                        SCM.autoTestStart = 0;
                        SCM.autoTestend = 0;
                    }
                    SCM.autoTestStart = 13;
                    this.AutoTestSetAntna("端口3", "", "水平面", "交叉极化", "-45\x00b0", 3, "");
                }
                if ((SCM.autoTestStart == 13) && (SCM.autoTestend == 12))
                {
                    SCM.autoTestStart = 14;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 12) && (SCM.autoTestend == 11))
            {
                SCM.autoTestStart = 14;
                SCM.autoTestend = 13;
            }
            if (SCM.testPort[2].flag && SCM.testPort[2].H)
            {
                if ((SCM.autoTestStart == 14) && (SCM.autoTestend == 13))
                {
                    if (SCM.testFreq1.Length > 0)
                    {
                        if (SCM.testFreqArr.Length < 10)
                        {
                            Array.Resize<string>(ref SCM.testFreqArr, 10);
                        }
                        SCM.testFreqArr[1] = SCM.testFreq1[1];
                        SCM.testFreqArr[2] = SCM.testFreq1[2];
                        SCM.testFreqArr[3] = SCM.testFreq1[3];
                        SCM.testFreqArr[4] = SCM.testFreq1[4];
                        SCM.testFreqArr[5] = SCM.testFreq1[5];
                        SCM.testFreqArr[6] = SCM.testFreq1[6];
                        SCM.testFreqArr[7] = SCM.testFreq1[7];
                        SCM.testFreqArr[8] = SCM.testFreq1[8];
                        SCM.testFreqArr[9] = SCM.testFreq1[9];
                        SCM.freqStar = SCM.testFreq1[10];
                        SCM.freqStop = SCM.testFreq1[11];
                        this.SetFreqency();
                    }
                    else if ((SCM.autoTestStart == 14) && (SCM.autoTestend == 13))
                    {
                        this.timerAutoTestP4_Four.Enabled = false;
                        MessageBox.Show("未设置频率，请设置频率后再自动化测试！", "提示信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                        SCM.autoTestStart = 0;
                        SCM.autoTestend = 0;
                    }
                    SCM.autoTestStart = 15;
                    this.AutoTestSetAntna("端口2", "", "水平面", "主极化", "-45\x00b0", 2, "");
                }
                if ((SCM.autoTestStart == 15) && (SCM.autoTestend == 14))
                {
                    SCM.autoTestStart = 0x10;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 14) && (SCM.autoTestend == 13))
            {
                SCM.autoTestStart = 0x10;
                SCM.autoTestend = 15;
            }
            if (SCM.testPort[4].flag && SCM.testPort[4].H)
            {
                if ((SCM.autoTestStart == 0x10) && (SCM.autoTestend == 15))
                {
                    if (SCM.testFreq2.Length > 0)
                    {
                        if (SCM.testFreqArr.Length < 10)
                        {
                            Array.Resize<string>(ref SCM.testFreqArr, 10);
                        }
                        SCM.testFreqArr[1] = SCM.testFreq2[1];
                        SCM.testFreqArr[2] = SCM.testFreq2[2];
                        SCM.testFreqArr[3] = SCM.testFreq2[3];
                        SCM.testFreqArr[4] = SCM.testFreq2[4];
                        SCM.testFreqArr[5] = SCM.testFreq2[5];
                        SCM.testFreqArr[6] = SCM.testFreq2[6];
                        SCM.testFreqArr[7] = SCM.testFreq2[7];
                        SCM.testFreqArr[8] = SCM.testFreq2[8];
                        SCM.testFreqArr[9] = SCM.testFreq2[9];
                        SCM.freqStar = SCM.testFreq2[10];
                        SCM.freqStop = SCM.testFreq2[11];
                        this.SetFreqency();
                    }
                    else if ((SCM.autoTestStart == 0x10) && (SCM.autoTestend == 15))
                    {
                        this.timerAutoTestP4_Four.Enabled = false;
                        MessageBox.Show("未设置频率，请设置频率后再自动化测试！", "提示信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                        SCM.autoTestStart = 0;
                        SCM.autoTestend = 0;
                    }
                    SCM.autoTestStart = 0x11;
                    this.AutoTestSetAntna("端口4", "", "水平面", "主极化", "-45\x00b0", 4, "");
                }
                if ((SCM.autoTestStart == 0x11) && (SCM.autoTestend == 0x10))
                {
                    SCM.autoTestStart = 0x12;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 0x10) && (SCM.autoTestend == 15))
            {
                SCM.autoTestStart = 0x12;
                SCM.autoTestend = 0x11;
            }
            if ((((SCM.testPort[1].flag && SCM.testPort[1].V) || (SCM.testPort[2].flag && SCM.testPort[2].V)) || (SCM.testPort[3].flag && SCM.testPort[3].V)) || (SCM.testPort[4].flag && SCM.testPort[4].V))
            {
                if ((SCM.autoTestStart == 0x12) && (SCM.autoTestend == 0x11))
                {
                    if (Math.Abs(Convert.ToSingle(this.textBoxElAngle.Text)) > 0.5)
                    {
                        SCM.autoTestStart = 0x13;
                        this.textBoxElDW.Text = "0";
                        this.buttonElDW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:旋转俯仰轴归零";
                    }
                    else
                    {
                        SCM.autoTestStart = 0x13;
                        SCM.autoTestend = 0x12;
                    }
                }
                if ((SCM.autoTestStart == 0x13) && (SCM.autoTestend == 0x12))
                {
                    SCM.autoTestStart = 20;
                    this.textBoxRvDW.Text = "90";
                    this.buttonRvDW_Click(sender, e);
                    this.listBoxAutoTest.Items[9] = " 当前动作:旋转接收极化，更换测试面";
                }
                if (SCM.testPort[1].flag && SCM.testPort[1].V)
                {
                    if ((SCM.autoTestStart == 20) && (SCM.autoTestend == 0x13))
                    {
                        if (SCM.testFreq1.Length > 0)
                        {
                            if (SCM.testFreqArr.Length < 10)
                            {
                                Array.Resize<string>(ref SCM.testFreqArr, 10);
                            }
                            SCM.testFreqArr[1] = SCM.testFreq1[1];
                            SCM.testFreqArr[2] = SCM.testFreq1[2];
                            SCM.testFreqArr[3] = SCM.testFreq1[3];
                            SCM.testFreqArr[4] = SCM.testFreq1[4];
                            SCM.testFreqArr[5] = SCM.testFreq1[5];
                            SCM.testFreqArr[6] = SCM.testFreq1[6];
                            SCM.testFreqArr[7] = SCM.testFreq1[7];
                            SCM.testFreqArr[8] = SCM.testFreq1[8];
                            SCM.testFreqArr[9] = SCM.testFreq1[9];
                            SCM.freqStar = SCM.testFreq1[10];
                            SCM.freqStop = SCM.testFreq1[11];
                            this.SetFreqency();
                        }
                        else if ((SCM.autoTestStart == 20) && (SCM.autoTestend == 0x13))
                        {
                            this.timerAutoTestP4_Four.Enabled = false;
                            MessageBox.Show("未设置频率，请设置频率后再自动化测试！", "提示信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                            SCM.autoTestStart = 0;
                            SCM.autoTestend = 0;
                        }
                        SCM.autoTestStart = 0x15;
                        SCM.autoTestend = 20;
                        this.AutoTestSetAntna("端口1", "", "垂直面", "主极化", "-45\x00b0", 1, "");
                    }
                    if ((SCM.autoTestStart == 0x15) && (SCM.autoTestend == 20))
                    {
                        SCM.autoTestStart = 0x16;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 20) && (SCM.autoTestend == 0x13))
                {
                    SCM.autoTestStart = 0x16;
                    SCM.autoTestend = 0x15;
                }
                if (SCM.testPort[3].flag && SCM.testPort[3].V)
                {
                    if ((SCM.autoTestStart == 0x16) && (SCM.autoTestend == 0x15))
                    {
                        if (SCM.testFreq1.Length > 0)
                        {
                            if (SCM.testFreqArr.Length < 10)
                            {
                                Array.Resize<string>(ref SCM.testFreqArr, 10);
                            }
                            SCM.testFreqArr[1] = SCM.testFreq2[1];
                            SCM.testFreqArr[2] = SCM.testFreq2[2];
                            SCM.testFreqArr[3] = SCM.testFreq2[3];
                            SCM.testFreqArr[4] = SCM.testFreq2[4];
                            SCM.testFreqArr[5] = SCM.testFreq2[5];
                            SCM.testFreqArr[6] = SCM.testFreq2[6];
                            SCM.testFreqArr[7] = SCM.testFreq2[7];
                            SCM.testFreqArr[8] = SCM.testFreq2[8];
                            SCM.testFreqArr[9] = SCM.testFreq2[9];
                            SCM.freqStar = SCM.testFreq2[10];
                            SCM.freqStop = SCM.testFreq2[11];
                            this.SetFreqency();
                        }
                        else if ((SCM.autoTestStart == 0x16) && (SCM.autoTestend == 0x15))
                        {
                            this.timerAutoTestP4_Four.Enabled = false;
                            MessageBox.Show("未设置频率，请设置频率后再自动化测试！", "提示信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                            SCM.autoTestStart = 0;
                            SCM.autoTestend = 0;
                        }
                        SCM.autoTestStart = 0x17;
                        this.AutoTestSetAntna("端口3", "", "垂直面", "主极化", "-45\x00b0", 3, "");
                    }
                    if ((SCM.autoTestStart == 0x17) && (SCM.autoTestend == 0x16))
                    {
                        SCM.autoTestStart = 0x18;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 0x16) && (SCM.autoTestend == 0x15))
                {
                    SCM.autoTestStart = 0x18;
                    SCM.autoTestend = 0x17;
                }
                if (!(((SCM.autoTestStart != 0x18) || (SCM.autoTestend != 0x17)) || SCM.sdYDFlag))
                {
                    SCM.autoTestStart = 0x19;
                    this.textBoxSdYD.Text = "90";
                    this.buttonSdYD_Click(sender, e);
                    this.listBoxAutoTest.Items[9] = " 当前动作:旋转发射极化，更换极化";
                }
                if (SCM.testPort[2].flag && SCM.testPort[2].V)
                {
                    if ((SCM.autoTestStart == 0x19) && (SCM.autoTestend == 0x18))
                    {
                        if (SCM.testFreq1.Length > 0)
                        {
                            if (SCM.testFreqArr.Length < 10)
                            {
                                Array.Resize<string>(ref SCM.testFreqArr, 10);
                            }
                            SCM.testFreqArr[1] = SCM.testFreq1[1];
                            SCM.testFreqArr[2] = SCM.testFreq1[2];
                            SCM.testFreqArr[3] = SCM.testFreq1[3];
                            SCM.testFreqArr[4] = SCM.testFreq1[4];
                            SCM.testFreqArr[5] = SCM.testFreq1[5];
                            SCM.testFreqArr[6] = SCM.testFreq1[6];
                            SCM.testFreqArr[7] = SCM.testFreq1[7];
                            SCM.testFreqArr[8] = SCM.testFreq1[8];
                            SCM.testFreqArr[9] = SCM.testFreq1[9];
                            SCM.freqStar = SCM.testFreq1[10];
                            SCM.freqStop = SCM.testFreq1[11];
                            this.SetFreqency();
                        }
                        else if ((SCM.autoTestStart == 0x19) && (SCM.autoTestend == 0x18))
                        {
                            this.timerAutoTestP4_Four.Enabled = false;
                            MessageBox.Show("未设置频率，请设置频率后再自动化测试！", "提示信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                            SCM.autoTestStart = 0;
                            SCM.autoTestend = 0;
                        }
                        SCM.autoTestStart = 0x1a;
                        this.AutoTestSetAntna("端口2", "", "垂直面", "主极化", "+45\x00b0", 2, "");
                    }
                    if ((SCM.autoTestStart == 0x1a) && (SCM.autoTestend == 0x19))
                    {
                        SCM.autoTestStart = 0x1b;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 0x19) && (SCM.autoTestend == 0x18))
                {
                    SCM.autoTestStart = 0x1b;
                    SCM.autoTestend = 0x1a;
                }
                if (SCM.testPort[4].flag && SCM.testPort[4].V)
                {
                    if ((SCM.autoTestStart == 0x1b) && (SCM.autoTestend == 0x1a))
                    {
                        if (SCM.testFreq1.Length > 0)
                        {
                            if (SCM.testFreqArr.Length < 10)
                            {
                                Array.Resize<string>(ref SCM.testFreqArr, 10);
                            }
                            SCM.testFreqArr[1] = SCM.testFreq2[1];
                            SCM.testFreqArr[2] = SCM.testFreq2[2];
                            SCM.testFreqArr[3] = SCM.testFreq2[3];
                            SCM.testFreqArr[4] = SCM.testFreq2[4];
                            SCM.testFreqArr[5] = SCM.testFreq2[5];
                            SCM.testFreqArr[6] = SCM.testFreq2[6];
                            SCM.testFreqArr[7] = SCM.testFreq2[7];
                            SCM.testFreqArr[8] = SCM.testFreq2[8];
                            SCM.testFreqArr[9] = SCM.testFreq2[9];
                            SCM.freqStar = SCM.testFreq2[10];
                            SCM.freqStop = SCM.testFreq2[11];
                            this.SetFreqency();
                        }
                        else if ((SCM.autoTestStart == 0x1b) && (SCM.autoTestend == 0x1a))
                        {
                            this.timerAutoTestP4_Four.Enabled = false;
                            MessageBox.Show("未设置频率，请设置频率后再自动化测试！", "提示信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                            SCM.autoTestStart = 0;
                            SCM.autoTestend = 0;
                        }
                        SCM.autoTestStart = 0x1c;
                        this.AutoTestSetAntna("端口4", "", "垂直面", "主极化", "+45\x00b0", 4, "");
                    }
                    if ((SCM.autoTestStart == 0x1c) && (SCM.autoTestend == 0x1b))
                    {
                        SCM.autoTestStart = 0x1d;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 0x1b) && (SCM.autoTestend == 0x1a))
                {
                    SCM.autoTestStart = 0x1d;
                    SCM.autoTestend = 0x1c;
                }
            }
            else if ((SCM.autoTestStart == 0x12) && (SCM.autoTestend == 0x11))
            {
                SCM.autoTestStart = 0x1d;
                SCM.autoTestend = 0x1c;
            }
            if ((SCM.autoTestStart == 0x1d) && (SCM.autoTestend == 0x1c))
            {
                SCM.autoTestStart = 0;
                SCM.autoTestend = 0;
                this.timerAutoTestP4_Four.Enabled = false;
                this.listBoxAutoTest.Items[2] = " 测试状态 :未进行自动化测试";
                for (int i = 3; i < 10; i++)
                {
                    this.listBoxAutoTest.Items[i] = "";
                }
                MessageBox.Show("自动化测试完成，请查看数据", "测试完成", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void timerAutoTestP8_eight_Tick(object sender, EventArgs e)
    {
        try
        {
            if (SCM.testFreq1.Length > 0)
            {
                Array.Resize<string>(ref SCM.testFreqArr, 10);
                SCM.testFreqArr[1] = SCM.testFreq1[1];
                SCM.testFreqArr[2] = SCM.testFreq1[2];
                SCM.testFreqArr[3] = SCM.testFreq1[3];
                SCM.testFreqArr[4] = SCM.testFreq1[4];
                SCM.testFreqArr[5] = SCM.testFreq1[5];
                SCM.testFreqArr[6] = SCM.testFreq1[6];
                SCM.testFreqArr[7] = SCM.testFreq1[7];
                SCM.testFreqArr[8] = SCM.testFreq1[8];
                SCM.testFreqArr[9] = SCM.testFreq1[9];
                SCM.freqStar = SCM.testFreq1[10];
                SCM.freqStop = SCM.testFreq1[11];
                Array.Resize<string>(ref SCM.testFreq1, 0);
                this.SetFreqency();
            }
            else if ((SCM.autoTestStart == 1) && (SCM.autoTestend == 0))
            {
                this.timerAutoTestP8_eight.Enabled = false;
                MessageBox.Show("未设置频率，请设置频率后再自动化测试！", "提示信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                SCM.autoTestStart = 0;
                SCM.autoTestend = 0;
            }
            if (SCM.testPort[1].flag && SCM.testPort[1].H)
            {
                if ((SCM.autoTestStart == 1) && (SCM.autoTestend == 0))
                {
                    SCM.autoTestStart = 2;
                    this.AutoTestSetAntna("端口1", "", "水平面", "主极化", "+45\x00b0", 1, "");
                }
                if ((SCM.autoTestStart == 2) && (SCM.autoTestend == 1))
                {
                    SCM.autoTestStart = 3;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 1) && (SCM.autoTestend == 0))
            {
                SCM.autoTestStart = 3;
                SCM.autoTestend = 2;
            }
            if (SCM.testPort[2].flag && SCM.testPort[2].H)
            {
                if ((SCM.autoTestStart == 3) && (SCM.autoTestend == 2))
                {
                    SCM.autoTestStart = 4;
                    this.AutoTestSetAntna("端口2", "", "水平面", "主极化", "+45\x00b0", 2, "");
                }
                if ((SCM.autoTestStart == 4) && (SCM.autoTestend == 3))
                {
                    SCM.autoTestStart = 5;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 3) && (SCM.autoTestend == 2))
            {
                SCM.autoTestStart = 5;
                SCM.autoTestend = 4;
            }
            if (SCM.testPort[3].flag && SCM.testPort[3].H)
            {
                if ((SCM.autoTestStart == 5) && (SCM.autoTestend == 4))
                {
                    SCM.autoTestStart = 6;
                    this.AutoTestSetAntna("端口3", "", "水平面", "主极化", "+45\x00b0", 3, "");
                }
                if ((SCM.autoTestStart == 6) && (SCM.autoTestend == 5))
                {
                    SCM.autoTestStart = 7;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 5) && (SCM.autoTestend == 4))
            {
                SCM.autoTestStart = 7;
                SCM.autoTestend = 6;
            }
            if (SCM.testPort[4].flag && SCM.testPort[4].H)
            {
                if ((SCM.autoTestStart == 7) && (SCM.autoTestend == 6))
                {
                    SCM.autoTestStart = 8;
                    this.AutoTestSetAntna("端口4", "", "水平面", "主极化", "+45\x00b0", 4, "");
                }
                if ((SCM.autoTestStart == 8) && (SCM.autoTestend == 7))
                {
                    SCM.autoTestStart = 9;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 7) && (SCM.autoTestend == 6))
            {
                SCM.autoTestStart = 9;
                SCM.autoTestend = 8;
            }
            if (SCM.testPort[5].flag && SCM.testPort[5].Hxpd)
            {
                if ((SCM.autoTestStart == 9) && (SCM.autoTestend == 8))
                {
                    SCM.autoTestStart = 10;
                    this.AutoTestSetAntna("端口5", "", "水平面", "交叉极化", "+45\x00b0", 5, "");
                }
                if ((SCM.autoTestStart == 10) && (SCM.autoTestend == 9))
                {
                    SCM.autoTestStart = 11;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 9) && (SCM.autoTestend == 8))
            {
                SCM.autoTestStart = 11;
                SCM.autoTestend = 10;
            }
            if (SCM.testPort[6].flag && SCM.testPort[6].Hxpd)
            {
                if ((SCM.autoTestStart == 11) && (SCM.autoTestend == 10))
                {
                    SCM.autoTestStart = 12;
                    this.AutoTestSetAntna("端口6", "", "水平面", "交叉极化", "+45\x00b0", 6, "");
                }
                if ((SCM.autoTestStart == 12) && (SCM.autoTestend == 11))
                {
                    SCM.autoTestStart = 13;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 11) && (SCM.autoTestend == 10))
            {
                SCM.autoTestStart = 13;
                SCM.autoTestend = 12;
            }
            if (SCM.testPort[7].flag && SCM.testPort[7].Hxpd)
            {
                if ((SCM.autoTestStart == 13) && (SCM.autoTestend == 12))
                {
                    SCM.autoTestStart = 14;
                    this.AutoTestSetAntna("端口7", "", "水平面", "交叉极化", "+45\x00b0", 7, "");
                }
                if ((SCM.autoTestStart == 14) && (SCM.autoTestend == 13))
                {
                    SCM.autoTestStart = 15;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 13) && (SCM.autoTestend == 12))
            {
                SCM.autoTestStart = 15;
                SCM.autoTestend = 14;
            }
            if (SCM.testPort[8].flag && SCM.testPort[8].Hxpd)
            {
                if ((SCM.autoTestStart == 15) && (SCM.autoTestend == 14))
                {
                    SCM.autoTestStart = 0x10;
                    this.AutoTestSetAntna("端口8", "", "水平面", "交叉极化", "+45\x00b0", 8, "");
                }
                if ((SCM.autoTestStart == 0x10) && (SCM.autoTestend == 15))
                {
                    SCM.autoTestStart = 0x11;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 15) && (SCM.autoTestend == 14))
            {
                SCM.autoTestStart = 0x11;
                SCM.autoTestend = 0x10;
            }
            if (!(((SCM.autoTestStart != 0x11) || (SCM.autoTestend != 0x10)) || SCM.sdYDFlag))
            {
                SCM.autoTestStart = 0x12;
                this.textBoxSdDW.Text = "-45";
                this.buttonSdDW_Click(sender, e);
                this.listBoxAutoTest.Items[9] = " 当前动作:旋转发射极化，更换极化";
            }
            if (SCM.testPort[1].flag && SCM.testPort[1].Hxpd)
            {
                if ((SCM.autoTestStart == 0x12) && (SCM.autoTestend == 0x11))
                {
                    SCM.autoTestStart = 0x13;
                    this.AutoTestSetAntna("端口1", "", "水平面", "交叉极化", "-45\x00b0", 1, "");
                }
                if ((SCM.autoTestStart == 0x13) && (SCM.autoTestend == 0x12))
                {
                    SCM.autoTestStart = 20;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 0x12) && (SCM.autoTestend == 0x11))
            {
                SCM.autoTestStart = 20;
                SCM.autoTestend = 0x13;
            }
            if (SCM.testPort[2].flag && SCM.testPort[2].Hxpd)
            {
                if ((SCM.autoTestStart == 20) && (SCM.autoTestend == 0x13))
                {
                    SCM.autoTestStart = 0x15;
                    this.AutoTestSetAntna("端口2", "", "水平面", "交叉极化", "-45\x00b0", 2, "");
                }
                if ((SCM.autoTestStart == 0x15) && (SCM.autoTestend == 20))
                {
                    SCM.autoTestStart = 0x16;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 20) && (SCM.autoTestend == 0x13))
            {
                SCM.autoTestStart = 0x16;
                SCM.autoTestend = 0x15;
            }
            if (SCM.testPort[3].flag && SCM.testPort[3].Hxpd)
            {
                if ((SCM.autoTestStart == 0x16) && (SCM.autoTestend == 0x15))
                {
                    SCM.autoTestStart = 0x17;
                    this.AutoTestSetAntna("端口3", "", "水平面", "交叉极化", "-45\x00b0", 3, "");
                }
                if ((SCM.autoTestStart == 0x17) && (SCM.autoTestend == 0x16))
                {
                    SCM.autoTestStart = 0x18;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 0x16) && (SCM.autoTestend == 0x15))
            {
                SCM.autoTestStart = 0x18;
                SCM.autoTestend = 0x17;
            }
            if (SCM.testPort[4].flag && SCM.testPort[4].Hxpd)
            {
                if ((SCM.autoTestStart == 0x18) && (SCM.autoTestend == 0x17))
                {
                    SCM.autoTestStart = 0x19;
                    this.AutoTestSetAntna("端口4", "", "水平面", "交叉极化", "-45\x00b0", 4, "");
                }
                if ((SCM.autoTestStart == 0x19) && (SCM.autoTestend == 0x18))
                {
                    SCM.autoTestStart = 0x1a;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 0x18) && (SCM.autoTestend == 0x17))
            {
                SCM.autoTestStart = 0x1a;
                SCM.autoTestend = 0x19;
            }
            if (SCM.testPort[5].flag && SCM.testPort[5].H)
            {
                if ((SCM.autoTestStart == 0x1a) && (SCM.autoTestend == 0x19))
                {
                    SCM.autoTestStart = 0x1b;
                    this.AutoTestSetAntna("端口5", "", "水平面", "主极化", "-45\x00b0", 5, "");
                }
                if ((SCM.autoTestStart == 0x1b) && (SCM.autoTestend == 0x1a))
                {
                    SCM.autoTestStart = 0x1c;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 0x1a) && (SCM.autoTestend == 0x19))
            {
                SCM.autoTestStart = 0x1c;
                SCM.autoTestend = 0x1b;
            }
            if (SCM.testPort[6].flag && SCM.testPort[6].H)
            {
                if ((SCM.autoTestStart == 0x1c) && (SCM.autoTestend == 0x1b))
                {
                    SCM.autoTestStart = 0x1d;
                    this.AutoTestSetAntna("端口6", "", "水平面", "主极化", "-45\x00b0", 6, "");
                }
                if ((SCM.autoTestStart == 0x1d) && (SCM.autoTestend == 0x1c))
                {
                    SCM.autoTestStart = 30;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 0x1c) && (SCM.autoTestend == 0x1b))
            {
                SCM.autoTestStart = 30;
                SCM.autoTestend = 0x1d;
            }
            if (SCM.testPort[7].flag && SCM.testPort[7].H)
            {
                if ((SCM.autoTestStart == 30) && (SCM.autoTestend == 0x1d))
                {
                    SCM.autoTestStart = 0x1f;
                    this.AutoTestSetAntna("端口7", "", "水平面", "主极化", "-45\x00b0", 7, "");
                }
                if ((SCM.autoTestStart == 0x1f) && (SCM.autoTestend == 30))
                {
                    SCM.autoTestStart = 0x20;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 30) && (SCM.autoTestend == 0x1d))
            {
                SCM.autoTestStart = 0x20;
                SCM.autoTestend = 0x1f;
            }
            if (SCM.testPort[8].flag && SCM.testPort[8].H)
            {
                if ((SCM.autoTestStart == 0x20) && (SCM.autoTestend == 0x1f))
                {
                    SCM.autoTestStart = 0x21;
                    this.AutoTestSetAntna("端口8", "", "水平面", "主极化", "-45\x00b0", 8, "");
                }
                if ((SCM.autoTestStart == 0x21) && (SCM.autoTestend == 0x20))
                {
                    SCM.autoTestStart = 0x22;
                    if (SCM.testFX == 1)
                    {
                        this.buttonTestCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                    }
                    if (SCM.testFX == 2)
                    {
                        this.buttonTestCCW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                    }
                }
            }
            else if ((SCM.autoTestStart == 0x20) && (SCM.autoTestend == 0x1f))
            {
                SCM.autoTestStart = 0x22;
                SCM.autoTestend = 0x21;
            }
            if ((((SCM.testPort[1].V || SCM.testPort[3].V) || (SCM.testPort[3].V || SCM.testPort[4].V)) || ((SCM.testPort[5].V || SCM.testPort[6].V) || SCM.testPort[7].V)) || SCM.testPort[8].V)
            {
                if (((SCM.autoTestStart == 0x22) && (SCM.autoTestend == 0x21)) && !SCM.elYDFlag)
                {
                    if (Math.Abs((float) (0f - SCM.elAngle)) > 0.5)
                    {
                        SCM.autoTestStart = 0x23;
                        this.textBoxElDW.Text = "0";
                        this.buttonElDW_Click(sender, e);
                        this.listBoxAutoTest.Items[9] = " 当前动作:旋转俯仰轴归零";
                    }
                    else
                    {
                        SCM.autoTestStart = 0x23;
                        SCM.autoTestend = 0x22;
                    }
                }
                if (!(((SCM.autoTestStart != 0x23) || (SCM.autoTestend != 0x22)) || SCM.rvYDFlag))
                {
                    SCM.autoTestStart = 0x24;
                    this.textBoxRvDW.Text = "90";
                    this.buttonRvDW_Click(sender, e);
                    this.listBoxAutoTest.Items[9] = " 当前动作:旋转接收极化，更换测试面";
                }
                if (SCM.testPort[1].flag && SCM.testPort[1].V)
                {
                    if ((SCM.autoTestStart == 0x24) && (SCM.autoTestend == 0x23))
                    {
                        SCM.autoTestStart = 0x25;
                        this.AutoTestSetAntna("端口1", "", "垂直面", "主极化", "-45\x00b0", 1, "");
                    }
                    if ((SCM.autoTestStart == 0x25) && (SCM.autoTestend == 0x24))
                    {
                        SCM.autoTestStart = 0x26;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 0x24) && (SCM.autoTestend == 0x23))
                {
                    SCM.autoTestStart = 0x26;
                    SCM.autoTestend = 0x25;
                }
                if (SCM.testPort[2].flag && SCM.testPort[2].V)
                {
                    if ((SCM.autoTestStart == 0x26) && (SCM.autoTestend == 0x25))
                    {
                        SCM.autoTestStart = 0x27;
                        this.AutoTestSetAntna("端口2", "", "垂直面", "主极化", "-45\x00b0", 2, "");
                    }
                    if ((SCM.autoTestStart == 0x27) && (SCM.autoTestend == 0x26))
                    {
                        SCM.autoTestStart = 40;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 0x26) && (SCM.autoTestend == 0x25))
                {
                    SCM.autoTestStart = 40;
                    SCM.autoTestend = 0x27;
                }
                if (SCM.testPort[3].flag && SCM.testPort[3].V)
                {
                    if ((SCM.autoTestStart == 40) && (SCM.autoTestend == 0x27))
                    {
                        SCM.autoTestStart = 0x29;
                        this.AutoTestSetAntna("端口3", "", "垂直面", "主极化", "-45\x00b0", 3, "");
                    }
                    if ((SCM.autoTestStart == 0x29) && (SCM.autoTestend == 40))
                    {
                        SCM.autoTestStart = 0x2a;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 40) && (SCM.autoTestend == 0x27))
                {
                    SCM.autoTestStart = 0x2a;
                    SCM.autoTestend = 0x29;
                }
                if (SCM.testPort[4].flag && SCM.testPort[4].V)
                {
                    if ((SCM.autoTestStart == 0x2a) && (SCM.autoTestend == 0x29))
                    {
                        SCM.autoTestStart = 0x2b;
                        this.AutoTestSetAntna("端口4", "", "垂直面", "主极化", "-45\x00b0", 4, "");
                    }
                    if ((SCM.autoTestStart == 0x2b) && (SCM.autoTestend == 0x2a))
                    {
                        SCM.autoTestStart = 0x2c;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 0x2a) && (SCM.autoTestend == 0x29))
                {
                    SCM.autoTestStart = 0x2c;
                    SCM.autoTestend = 0x2b;
                }
                if ((((SCM.testPort[5].V || SCM.testPort[6].V) || SCM.testPort[7].V) || SCM.testPort[8].V) && !(((SCM.autoTestStart != 0x2c) || (SCM.autoTestend != 0x2b)) || SCM.sdYDFlag))
                {
                    SCM.autoTestStart = 0x2d;
                    this.textBoxSdDW.Text = "45";
                    this.buttonSdDW_Click(sender, e);
                    this.listBoxAutoTest.Items[9] = " 当前动作:旋转发射极化，更换极化";
                }
                if (SCM.testPort[5].flag && SCM.testPort[5].V)
                {
                    if ((SCM.autoTestStart == 0x2d) && (SCM.autoTestend == 0x2c))
                    {
                        SCM.autoTestStart = 0x2e;
                        this.AutoTestSetAntna("端口5", "", "垂直面", "主极化", "+45\x00b0", 5, "");
                    }
                    if ((SCM.autoTestStart == 0x2e) && (SCM.autoTestend == 0x2d))
                    {
                        SCM.autoTestStart = 0x2f;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 0x2d) && (SCM.autoTestend == 0x2c))
                {
                    SCM.autoTestStart = 0x2f;
                    SCM.autoTestend = 0x2e;
                }
                if (SCM.testPort[6].flag && SCM.testPort[6].V)
                {
                    if ((SCM.autoTestStart == 0x2f) && (SCM.autoTestend == 0x2e))
                    {
                        SCM.autoTestStart = 0x30;
                        this.AutoTestSetAntna("端口6", "", "垂直面", "主极化", "+45\x00b0", 6, "");
                    }
                    if ((SCM.autoTestStart == 0x30) && (SCM.autoTestend == 0x2f))
                    {
                        SCM.autoTestStart = 0x31;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 0x2f) && (SCM.autoTestend == 0x2e))
                {
                    SCM.autoTestStart = 0x31;
                    SCM.autoTestend = 0x30;
                }
                if (SCM.testPort[7].flag && SCM.testPort[7].V)
                {
                    if ((SCM.autoTestStart == 0x31) && (SCM.autoTestend == 0x30))
                    {
                        SCM.autoTestStart = 50;
                        this.AutoTestSetAntna("端口7", "", "垂直面", "主极化", "+45\x00b0", 7, "");
                    }
                    if ((SCM.autoTestStart == 50) && (SCM.autoTestend == 0x31))
                    {
                        SCM.autoTestStart = 0x33;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 0x31) && (SCM.autoTestend == 0x30))
                {
                    SCM.autoTestStart = 0x33;
                    SCM.autoTestend = 50;
                }
                if (SCM.testPort[8].flag && SCM.testPort[8].V)
                {
                    if ((SCM.autoTestStart == 0x33) && (SCM.autoTestend == 50))
                    {
                        SCM.autoTestStart = 0x34;
                        this.AutoTestSetAntna("端口8", "", "垂直面", "主极化", "+45\x00b0", 8, "");
                    }
                    if ((SCM.autoTestStart == 0x34) && (SCM.autoTestend == 0x33))
                    {
                        SCM.autoTestStart = 0x35;
                        if (SCM.testFX == 1)
                        {
                            this.buttonTestCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
                        }
                        if (SCM.testFX == 2)
                        {
                            this.buttonTestCCW_Click(sender, e);
                            this.listBoxAutoTest.Items[9] = " 当前动作:逆转方位轴测试";
                        }
                    }
                }
                else if ((SCM.autoTestStart == 0x33) && (SCM.autoTestend == 50))
                {
                    SCM.autoTestStart = 0x35;
                    SCM.autoTestend = 0x34;
                }
            }
            else if ((SCM.autoTestStart == 0x22) && (SCM.autoTestend == 0x21))
            {
                SCM.autoTestStart = 0x35;
                SCM.autoTestend = 0x34;
            }
            if ((SCM.autoTestStart == 0x35) && (SCM.autoTestend == 0x34))
            {
                SCM.autoTestStart = 0;
                SCM.autoTestend = 0;
                this.timerAutoTestP8_eight.Enabled = false;
                this.listBoxAutoTest.Items[2] = " 测试状态 :未进行自动化测试";
                for (int i = 3; i < 10; i++)
                {
                    this.listBoxAutoTest.Items[i] = "";
                }
                MessageBox.Show("自动化测试完成.请查看数据完整性", "测试完成", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
        }
        catch (Exception exception)
        {
            MessageBox.Show(exception.ToString());
        }
    }

    private void timerAZLimit_Tick(object sender, EventArgs e)
    {
        try
        {
            if (SCM.azAngle < 0f)
            {
                SCM.limitl = SCM.azAngle + 360f;
            }
            else
            {
                SCM.limitl = SCM.azAngle;
            }
            if ((SCM.Limit_CWazAngle <= SCM.Limit_angleL) && (SCM.Limit_CWazAngle >= -SCM.Limit_angleL))
            {
                this.labelDnLimDn.BackColor = Color.GreenYellow;
                this.labelDnLimTop.BackColor = Color.GreenYellow;
            }
            if (SCM.Limit_az == 1)
            {
                if (SCM.Limit_CWazAngle >= SCM.Limit_angleL)
                {
                    this.labelDnLimDn.BackColor = Color.Tomato;
                    this.labelDnLimTop.BackColor = Color.GreenYellow;
                    this.buttonAzStop_Click(sender, e);
                }
                if (SCM.limitl < SCM.limit_azangle)
                {
                    SCM.Limit_CWazAngle = ((SCM.Limit_CWazAngle + SCM.limitl) + 360f) - SCM.limit_azangle;
                    SCM.limit_azangle = SCM.limitl;
                }
                else
                {
                    SCM.Limit_CWazAngle = (SCM.Limit_CWazAngle + SCM.limitl) - SCM.limit_azangle;
                    SCM.limit_azangle = SCM.limitl;
                }
            }
            if (SCM.Limit_az == 2)
            {
                if (SCM.Limit_CWazAngle <= -SCM.Limit_angleL)
                {
                    this.buttonAzStop_Click(sender, e);
                    this.labelDnLimDn.BackColor = Color.GreenYellow;
                    this.labelDnLimTop.BackColor = Color.Tomato;
                    SCM.azangleLimtFlag = true;
                }
                if (SCM.limitl > SCM.limit_azangle)
                {
                    SCM.Limit_CWazAngle += (SCM.limitl - 360f) - SCM.limit_azangle;
                    SCM.limit_azangle = SCM.limitl;
                }
                else
                {
                    SCM.Limit_CWazAngle += SCM.limitl - SCM.limit_azangle;
                    SCM.limit_azangle = SCM.limitl;
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void timerEl_Tick(object sender, EventArgs e)
    {
        try
        {
            if (SCM.ElFxint == 1)
            {
                if ((SCM.elAngle < -80f) && (this.aaa == 0))
                {
                    this.trackBarEl.Value = 0xd180;
                    this.trackBarEl_Scroll(sender, e);
                    this.aaa = 1;
                }
                else if (((SCM.elAngle < -70f) && (SCM.elAngle > -80f)) && (this.aaa == 1))
                {
                    this.trackBarEl.Value = 0xeca3;
                    this.trackBarEl_Scroll(sender, e);
                    this.aaa = 2;
                }
                else if (((SCM.elAngle < -60f) && (SCM.elAngle > -70f)) && (this.aaa == 2))
                {
                    this.trackBarEl.Value = 0xf36c;
                    this.trackBarEl_Scroll(sender, e);
                    this.aaa = 3;
                }
                else if ((SCM.elAngle > -50f) && (this.aaa == 3))
                {
                    this.trackBarEl.Value = 0xf5af;
                    this.trackBarEl_Scroll(sender, e);
                    this.aaa = 0;
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void timerMPC08_Tick(object sender, EventArgs e)
    {
        int num = -10;
        try
        {
            if (SCM.Az_angle_Flag == 1)
            {
                MPC08.get_abs_pos(define.azZhou, ref this.az);
                SCM.azAngle += ((Convert.ToSingle(this.az) * 360f) / 800000f) - this.az0;
                this.az0 = (Convert.ToSingle(this.az) * 360f) / 800000f;
                if (SCM.azAngle > 180f)
                {
                    SCM.azAngle -= 360f;
                }
                if (SCM.azAngle < -180f)
                {
                    SCM.azAngle += 360f;
                }
                if (MPC08.check_done(define.azZhou) == 0)
                {
                    SCM.Az_angle_Flag = 0;
                    this.buttonStart();
                    MPC08.get_abs_pos(define.azZhou, ref this.az);
                    SCM.azAngle += ((Convert.ToSingle(this.az) * 360f) / 800000f) - this.az0;
                    this.az0 = (Convert.ToSingle(this.az) * 360f) / 800000f;
                    if (SCM.azAngle > 180f)
                    {
                        SCM.azAngle -= 360f;
                    }
                    if (SCM.azAngle < -180f)
                    {
                        SCM.azAngle += 360f;
                    }
                }
            }
            if (SCM.El_angle_Flag == 1)
            {
                MPC08.get_abs_pos(define.elZhou, ref this.el);
                SCM.elAngle += ((Convert.ToSingle(this.el) * 360f) / 320000f) - this.el0;
                this.el0 = (Convert.ToSingle(this.el) * 360f) / 320000f;
                if (SCM.elAngle > 180f)
                {
                    SCM.elAngle -= 360f;
                }
                if (SCM.elAngle < -180f)
                {
                    SCM.elAngle += 360f;
                }
                if (MPC08.check_done(define.elZhou) == 0)
                {
                    SCM.El_angle_Flag = 0;
                    this.buttonStart();
                    MPC08.get_abs_pos(define.elZhou, ref this.az);
                    SCM.elAngle += ((Convert.ToSingle(this.el) * 360f) / 320000f) - this.el0;
                    this.el0 = (Convert.ToSingle(this.el) * 360f) / 320000f;
                    if (SCM.elAngle > 180f)
                    {
                        SCM.elAngle -= 360f;
                    }
                    if (SCM.elAngle < -180f)
                    {
                        SCM.elAngle += 360f;
                    }
                }
            }
            if (SCM.Sd_angle_Flag == 1)
            {
                MPC08.get_abs_pos(define.sdZhou, ref this.sd);
                SCM.sdAngle = (Convert.ToSingle(this.sd) * 360f) / 400000f;
                if (SCM.sdAngle > 180f)
                {
                    SCM.sdAngle -= 360f;
                }
                if (SCM.sdAngle < -180f)
                {
                    SCM.sdAngle += 360f;
                }
                if (MPC08.check_done(define.sdZhou) == 0)
                {
                    SCM.Sd_angle_Flag = 0;
                    this.buttonStart();
                    MPC08.get_abs_pos(define.sdZhou, ref this.sd);
                    SCM.sdAngle = (Convert.ToSingle(this.sd) * 360f) / 400000f;
                    if (SCM.sdAngle > 180f)
                    {
                        SCM.sdAngle -= 360f;
                    }
                    if (SCM.sdAngle < -180f)
                    {
                        SCM.sdAngle += 360f;
                    }
                }
            }
            if (SCM.Rv_angle_Flag == 1)
            {
                MPC08.get_abs_pos(define.rvZhou, ref this.rv);
                SCM.rvAngle += ((Convert.ToSingle(this.rv) * 360f) / 600000f) - this.rv0;
                this.rv0 = (Convert.ToSingle(this.rv) * 360f) / 600000f;
                if (SCM.rvAngle > 180f)
                {
                    SCM.rvAngle -= 360f;
                }
                if (SCM.rvAngle < -180f)
                {
                    SCM.rvAngle += 360f;
                }
                if (MPC08.check_done(define.rvZhou) == 0)
                {
                    SCM.Rv_angle_Flag = 0;
                    this.buttonStart();
                    MPC08.get_abs_pos(define.rvZhou, ref this.rv);
                    SCM.rvAngle += ((Convert.ToSingle(this.rv) * 360f) / 600000f) - this.rv0;
                    this.rv0 = (Convert.ToSingle(this.rv) * 360f) / 600000f;
                    if (SCM.rvAngle > 180f)
                    {
                        SCM.rvAngle -= 360f;
                    }
                    if (SCM.rvAngle < -180f)
                    {
                        SCM.rvAngle += 360f;
                    }
                }
            }
            if (SCM.Dn_angle_Flag == 1)
            {
                MPC08.get_abs_pos(define.dnZhou, ref this.Xpy);
                SCM.dnAngle += ((Convert.ToSingle(this.Xpy) * 50f) / 999375f) - this.Xpy0;
                this.Xpy0 = (Convert.ToSingle(this.Xpy) * 50f) / 999375f;
                if (MPC08.check_done(define.dnZhou) == 0)
                {
                    SCM.Dn_angle_Flag = 0;
                    this.buttonStart();
                    MPC08.get_abs_pos(define.dnZhou, ref this.Xpy);
                    SCM.dnAngle += ((Convert.ToSingle(this.Xpy) * 50f) / 999375f) - this.Xpy0;
                    this.Xpy0 = (Convert.ToSingle(this.Xpy) * 50f) / 999375f;
                }
            }
            if (SCM.Pt_angle_Flag == 1)
            {
                MPC08.get_abs_pos(define.ptZhou, ref this.Ypy);
                SCM.ptAngle += ((Convert.ToSingle(this.Ypy) * 51f) / 1002797f) - this.Ypy0;
                this.Ypy0 = (Convert.ToSingle(this.Ypy) * 51f) / 1002797f;
                if (MPC08.check_done(define.ptZhou) == 0)
                {
                    SCM.Pt_angle_Flag = 0;
                    this.buttonStart();
                    MPC08.get_abs_pos(define.ptZhou, ref this.Ypy);
                    SCM.ptAngle += ((Convert.ToSingle(this.Ypy) * 51f) / 1002797f) - this.Ypy0;
                    this.Ypy0 = (Convert.ToSingle(this.Ypy) * 51f) / 1002797f;
                }
            }
            if (SCM.Fs_angle_Flag == 1)
            {
                MPC08.get_abs_pos(define.fsZhou, ref this.sj);
                SCM.fsAngle += ((Convert.ToSingle(this.sj) * 40f) / 440000f) - this.sj0;
                this.sj0 = (Convert.ToSingle(this.sj) * 40f) / 440000f;
                if (MPC08.check_done(define.fsZhou) == 0)
                {
                    SCM.Fs_angle_Flag = 0;
                    this.buttonStart();
                    MPC08.get_abs_pos(define.fsZhou, ref this.sj);
                    SCM.fsAngle += ((Convert.ToSingle(this.sj) * 40f) / 440000f) - this.sj0;
                    this.sj0 = (Convert.ToSingle(this.sj) * 40f) / 440000f;
                }
            }
            num = MPC08.check_limit(define.elZhou);
            if (num == 1)
            {
                SCM.elLimFlag = 1;
            }
            else if (num == -1)
            {
                SCM.elLimFlag = 2;
            }
            else
            {
                SCM.elLimFlag = 0;
            }
            num = MPC08.check_limit(define.dnZhou);
            if (num == 1)
            {
                SCM.dnLimFlag = 1;
            }
            else if (num == -1)
            {
                SCM.dnLimFlag = 2;
            }
            else
            {
                SCM.dnLimFlag = 0;
            }
            num = MPC08.check_limit(define.ptZhou);
            if (num == 1)
            {
                SCM.ptLimFlag = 1;
            }
            else if (num == -1)
            {
                SCM.ptLimFlag = 2;
            }
            else
            {
                SCM.ptLimFlag = 0;
            }
            num = MPC08.check_limit(define.fsZhou);
            if (num == 1)
            {
                SCM.fsLimFlag = 1;
            }
            else if (num == -1)
            {
                SCM.fsLimFlag = 2;
            }
            else
            {
                SCM.fsLimFlag = 0;
            }
            if (SCM.HomingFlag == 2)
            {
                if (MPC08.check_home(define.azZhou) == 1)
                {
                    SCM.azHomingFlag = 1;
                }
                if (MPC08.check_home(define.elZhou) == 1)
                {
                    SCM.elHomingFlag = 1;
                }
                if (MPC08.check_home(define.sdZhou) == 1)
                {
                    SCM.sdHomingFlag = 1;
                }
                if (MPC08.check_home(define.rvZhou) == 1)
                {
                    SCM.rvHomingFlag = 1;
                }
                if ((((SCM.azHomingFlag == 1) && (SCM.elHomingFlag == 1)) && (SCM.sdHomingFlag == 1)) && (SCM.rvHomingFlag == 1))
                {
                    SCM.HomingFlag = 0;
                    SCM.azHomingFlag = 0;
                    SCM.elHomingFlag = 0;
                    SCM.sdHomingFlag = 0;
                    SCM.rvHomingFlag = 0;
                    SendKeys.SendWait("Enter");
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("timerMPC08_Tick + " + exception.ToString());
        }
    }

    private void timerQinJiao_Tick(object sender, EventArgs e)
    {
        try
        {
            if ((SCM.testFreqArr.Length < 0) && ((SCM.autoTestStart == 1) && (SCM.autoTestend == 0)))
            {
                this.timerQinJiao.Enabled = false;
                MessageBox.Show("未设置频率，请设置频率后再自动化测试！", "提示信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                SCM.autoTestStart = 0;
                SCM.autoTestend = 0;
            }
            if (((SCM.autoTestStart == 1) && (SCM.autoTestend == 0)) && !SCM.elYDFlag)
            {
                if (Math.Abs((float) (0f - SCM.elAngle)) > 0.5)
                {
                    SCM.autoTestStart = 2;
                    this.textBoxElDW.Text = "0";
                    this.buttonElDW_Click(sender, e);
                    this.listBoxAutoTest.Items[9] = " 当前动作:旋转俯仰轴归零";
                }
                else
                {
                    SCM.autoTestStart = 2;
                    SCM.autoTestend = 1;
                }
            }
            if (((SCM.autoTestStart == 2) && (SCM.autoTestend == 1)) && !SCM.rvYDFlag)
            {
                if (Math.Abs((float) (90f - SCM.rvAngle)) > 0.5)
                {
                    SCM.autoTestStart = 3;
                    this.textBoxRvDW.Text = "90";
                    this.buttonRvDW_Click(sender, e);
                    this.listBoxAutoTest.Items[9] = " 当前动作:旋转接收极化，更换测试面";
                }
                else
                {
                    SCM.autoTestStart = 3;
                    SCM.autoTestend = 2;
                }
            }
            if (((SCM.autoTestStart == 3) && (SCM.autoTestend == 2)) && !SCM.sdYDFlag)
            {
                if (Math.Abs((float) (-45f - SCM.sdAngle)) > 0.5)
                {
                    SCM.autoTestStart = 4;
                    this.textBoxSdDW.Text = "-45";
                    this.buttonSdDW_Click(sender, e);
                    this.listBoxAutoTest.Items[9] = " 当前动作:旋转发射极化，更换极化";
                }
                else
                {
                    SCM.autoTestStart = 4;
                    SCM.autoTestend = 3;
                }
            }
            if ((SCM.autoTestStart == 4) && (SCM.autoTestend == 3))
            {
                SCM.autoTestStart = 5;
                this.AutoTestSetAntna("端口1", "", "垂直面", "主极化", "-45\x00b0", 1, "");
            }
            if ((SCM.autoTestStart == 5) && (SCM.autoTestend == 4))
            {
                SCM.autoTestStart = 6;
                this.buttonTestCW_Click(sender, e);
                this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
            }
            if (((SCM.autoTestStart == 6) && (SCM.autoTestend == 5)) && !SCM.rvYDFlag)
            {
                SCM.autoTestStart = 7;
                if (Math.Abs((float) (-90f - SCM.rvAngle)) < 10f)
                {
                    this.textBoxRvDW.Text = "-90";
                    this.buttonRvDW_Click(sender, e);
                    this.listBoxAutoTest.Items[9] = " 当前动作:旋转接收极化，更换测试面";
                }
                else
                {
                    this.textBoxRvDW.Text = "90";
                    this.buttonRvDW_Click(sender, e);
                    this.listBoxAutoTest.Items[9] = " 当前动作:旋转接收极化，更换测试面";
                }
            }
            if ((SCM.autoTestStart == 7) && (SCM.autoTestend == 6))
            {
                SCM.autoTestStart = 8;
                this.AutoTestSetAntna("端口1", "", "垂直面", "主极化", "-45\x00b0", 1, "1");
            }
            if ((SCM.autoTestStart == 8) && (SCM.autoTestend == 7))
            {
                SCM.autoTestStart = 9;
                this.buttonTestCW_Click(sender, e);
                this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
            }
            if (((SCM.autoTestStart == 9) && (SCM.autoTestend == 8)) && !SCM.sdYDFlag)
            {
                if (Math.Abs((float) (45f - SCM.sdAngle)) > 0.5)
                {
                    SCM.autoTestStart = 10;
                    this.textBoxSdDW.Text = "45";
                    this.buttonSdDW_Click(sender, e);
                    this.listBoxAutoTest.Items[9] = " 当前动作:旋转发射极化，更换极化";
                }
                else
                {
                    SCM.autoTestStart = 10;
                    SCM.autoTestend = 9;
                }
            }
            if ((SCM.autoTestStart == 10) && (SCM.autoTestend == 9))
            {
                SCM.autoTestStart = 11;
                this.AutoTestSetAntna("端口2", "", "垂直面", "主极化", "45\x00b0", 1, "1");
            }
            if ((SCM.autoTestStart == 11) && (SCM.autoTestend == 10))
            {
                SCM.autoTestStart = 12;
                this.buttonTestCW_Click(sender, e);
                this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
            }
            if (((SCM.autoTestStart == 12) && (SCM.autoTestend == 11)) && !SCM.rvYDFlag)
            {
                SCM.autoTestStart = 13;
                if (Math.Abs((float) (90f - SCM.rvAngle)) < 10f)
                {
                    this.textBoxRvDW.Text = "90";
                    this.buttonRvDW_Click(sender, e);
                    this.listBoxAutoTest.Items[9] = " 当前动作:旋转接收极化，更换测试面";
                }
                else
                {
                    this.textBoxRvDW.Text = "90";
                    this.buttonRvDW_Click(sender, e);
                    this.listBoxAutoTest.Items[9] = " 当前动作:旋转接收极化，更换测试面";
                }
            }
            if ((SCM.autoTestStart == 13) && (SCM.autoTestend == 12))
            {
                SCM.autoTestStart = 14;
                this.AutoTestSetAntna("端口2", "", "垂直面", "主极化", "45\x00b0", 1, "");
            }
            if ((SCM.autoTestStart == 14) && (SCM.autoTestend == 13))
            {
                SCM.autoTestStart = 15;
                this.buttonTestCW_Click(sender, e);
                this.listBoxAutoTest.Items[9] = " 当前动作:顺转方位轴测试";
            }
            if ((SCM.autoTestStart == 15) && (SCM.autoTestend == 14))
            {
                SCM.autoTestStart = 0;
                SCM.autoTestend = 0;
                this.timerQinJiao.Enabled = false;
                this.listBoxAutoTest.Items[2] = " 测试状态 :未进行自动化测试";
                for (int i = 3; i < 10; i++)
                {
                    this.listBoxAutoTest.Items[i] = "";
                }
                MessageBox.Show("自动化测试完成.请查看数据完整性", "测试完成", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("timer3_Tick + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void timerRefAngel_Tick(object sender, EventArgs e)
    {
        try
        {
            this.azDisplay();
            this.textBoxAzAngle.Text = string.Format("{0:F}", SCM.azAngle);
            this.elDisplay();
            this.textBoxElAngle.Text = string.Format("{0:F}", SCM.elAngle);
            this.sdDisplay();
            this.textBoxSdAngle.Text = string.Format("{0:F}", SCM.sdAngle);
        }
        catch (Exception exception)
        {
            errLogFunction("timerRefAngel_Tick + " + exception.ToString());
        }
    }

    private void timerRefState_Tick(object sender, EventArgs e)
    {
        try
        {
            if (SCM.autoTestStart == 0)
            {
                if ((SCM.AzFxint == 1) && (SCM.DataTest == 1))
                {
                    this.listBoxAutoTest.Items[3] = " 当前动作:顺转方位轴测试";
                }
                if ((SCM.AzFxint == 2) && (SCM.DataTest == 1))
                {
                    this.listBoxAutoTest.Items[3] = " 当前动作:逆转方位轴测试";
                }
            }
            if ((SCM.DataTest == 0) && (SCM.autoTestStart == 0))
            {
                this.listBoxAutoTest.Items[3] = " 当前动作:暂时没有测试";
            }
            if (SCM.Azbuttonflag > 0)
            {
                if (SCM.azAngle == SCM.azAngleSave)
                {
                    SCM.Azbuttonflag = (byte) (SCM.Azbuttonflag + 1);
                    if (SCM.Azbuttonflag > 3)
                    {
                        SCM.Azbuttonflag = 0;
                        this.buttonStart();
                    }
                }
                else
                {
                    SCM.Azbuttonflag = 1;
                }
                SCM.azAngleSave = SCM.azAngle;
            }
            if (SCM.Elbuttonflag > 0)
            {
                if (SCM.elAngle == SCM.elAngleSave)
                {
                    SCM.Elbuttonflag = (byte) (SCM.Elbuttonflag + 1);
                    if (SCM.Elbuttonflag > 3)
                    {
                        SCM.Elbuttonflag = 0;
                        this.buttonStart();
                    }
                }
                else
                {
                    SCM.Elbuttonflag = 1;
                }
                SCM.elAngleSave = SCM.elAngle;
            }
            if (SCM.Sdbuttonflag > 0)
            {
                if (SCM.sdAngle == SCM.sdAngleSave)
                {
                    SCM.Sdbuttonflag = (byte) (SCM.Sdbuttonflag + 1);
                    if (SCM.Sdbuttonflag > 3)
                    {
                        SCM.Sdbuttonflag = 0;
                        this.buttonStart();
                    }
                }
                else
                {
                    SCM.Sdbuttonflag = 1;
                }
                SCM.sdAngleSave = SCM.sdAngle;
            }
        }
        catch
        {
        }
    }

    private void timerStopAsk_Tick(object sender, EventArgs e)
    {
        try
        {
            SCM.Az_angle_Flag = 0;
            SCM.El_angle_Flag = 0;
            SCM.Sd_angle_Flag = 0;
            SCM.Rv_angle_Flag = 0;
            SCM.Dn_angle_Flag = 0;
            this.timerStopAsk.Enabled = false;
        }
        catch (Exception exception)
        {
            errLogFunction("timer2_Tick + " + exception.ToString());
        }
    }

    private void timerTest_Tick(object sender, EventArgs e)
    {
        try
        {
            if (((SCM.azAngle >= -180f) && (SCM.azAngle < -170f)) && (this.timeTestC == 0))
            {
                this.timeTestC = 1;
                string writeFmt = ":INIT1:CONT ON\n";
                int num = visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
                writeFmt = ":INIT1:CONT OFF\n";
                num = visa32.viPrintf(visa32.vi, writeFmt, writeFmt.Length);
            }
            if ((SCM.azAngle > -177f) && (SCM.azAngle < -175f))
            {
                SCM.azYDFlag = true;
            }
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void toolStripButton10_Click(object sender, EventArgs e)
    {
        try
        {
            cs cs = new cs();
            cs.Show();
            cs.Focus();
        }
        catch (Exception exception)
        {
            errLogFunction(exception.ToString());
        }
    }

    private void toolStripButton2_Click(object sender, EventArgs e)
    {
        if (this.readElec != null)
        {
            if (this.readElec.IsDisposed)
            {
                this.readElec = new ReadElec();
                this.readElec.Show();
                this.readElec.Focus();
            }
            else
            {
                this.readElec.Show();
                this.readElec.Focus();
            }
        }
        else
        {
            this.readElec = new ReadElec();
            this.readElec.Show();
            this.readElec.Focus();
        }
    }

    private void toolStripButton3_Click(object sender, EventArgs e)
    {
        try
        {
            if (this.sSetMark != null)
            {
                if (this.sSetMark.IsDisposed)
                {
                    this.sSetMark = new SetMark();
                    this.sSetMark.Show();
                    this.sSetMark.Focus();
                }
                else
                {
                    this.sSetMark.Show();
                    this.sSetMark.Focus();
                }
            }
            else
            {
                this.sSetMark = new SetMark();
                this.sSetMark.Show();
                this.sSetMark.Focus();
            }
        }
        catch (Exception exception)
        {
            errLogFunction("设置MARKtoolStripButton3_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void toolStripButton4_Click(object sender, EventArgs e)
    {
        this.ThreadFunc();
    }

    private void toolStripButton5_Click(object sender, EventArgs e)
    {
        try
        {
            if (this.AutoTestForm != null)
            {
                if (this.AutoTestForm.IsDisposed)
                {
                    this.AutoTestForm = new autoTestOption();
                    this.AutoTestForm.Show();
                    this.AutoTestForm.Focus();
                }
                else
                {
                    this.AutoTestForm.Show();
                    this.AutoTestForm.Focus();
                }
            }
            else
            {
                this.AutoTestForm = new autoTestOption();
                this.AutoTestForm.Show();
                this.AutoTestForm.Focus();
            }
        }
        catch (Exception exception)
        {
            errLogFunction("toolStripButton5_Click+ " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void toolStripButton7_Click(object sender, EventArgs e)
    {
        Process.Start(AppDomain.CurrentDomain.BaseDirectory + "帮助文档.chm");
    }

    private void toolStripButton8_Click(object sender, EventArgs e)
    {
        try
        {
            if (AboutFrom != null)
            {
                if (AboutFrom.IsDisposed)
                {
                    AboutFrom = new About();
                    AboutFrom.Show();
                    AboutFrom.Focus();
                }
                else
                {
                    AboutFrom.Show();
                    AboutFrom.Focus();
                }
            }
            else
            {
                AboutFrom = new About();
                AboutFrom.Show();
                AboutFrom.Focus();
            }
        }
        catch (Exception exception)
        {
            errLogFunction("关于AToolStripMenuItem_Click + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void toolStripButton9_Click(object sender, EventArgs e)
    {
        try
        {
            if ((readData == null) || readData.IsDisposed)
            {
                readData = new ReadData();
                readData.Show();
                readData.Focus();
            }
            else
            {
                readData.Focus();
            }
        }
        catch
        {
            MessageBox.Show("数据文件丢失");
        }
    }

    private void trackBarAz_Scroll(object sender, EventArgs e)
    {
        int num3 = 0;
        int num4 = 0;
        try
        {
            int num = this.trackBarAz.Value;
            this.colorSliderAz.Value = this.trackBarAz.Value;
            this.labelAzV.Text = ((((float) num) / 10f)).ToString("0.0") + "度/秒";
            float num5 = Convert.ToSingle((double) (800000.0 / (((((0xffff - num) * 0.007538105) * 2.0) * 800000.0) / 360.0)));
            if (this.serialPortScm.IsOpen)
            {
                SCM.Send_Data[1] = 0x44;
                SCM.Send_Data[3] = 0x10;
                SCM.Send_Data[4] = Convert.ToByte((int) (num / 0x100));
                SCM.Send_Data[5] = Convert.ToByte((int) (num % 0x100));
                if ((SCM.Send_Data[4] == 0xff) || (SCM.Send_Data[4] == 0xfe))
                {
                    SCM.Send_Data[4] = Convert.ToByte((int) (0xff - SCM.Send_Data[4]));
                    num3 = 1;
                }
                if ((SCM.Send_Data[5] == 0xff) || (SCM.Send_Data[5] == 0xfe))
                {
                    SCM.Send_Data[5] = Convert.ToByte((int) (0xff - SCM.Send_Data[5]));
                    num4 = 1;
                }
                int num2 = num3 & num4;
                SCM.Send_Data[2] = Convert.ToByte(num2);
                this.serialPortScm.Write(SCM.Send_Data, 0, SCM.Send_Data.Length);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("trackBarAz_Scroll + " + exception.ToString());
        }
    }

    private void trackBarDn_Scroll(object sender, EventArgs e)
    {
        try
        {
            int num = this.trackBarDn.Value;
            switch (num)
            {
                case 1:
                    num = 0x7d0;
                    break;

                case 2:
                    num = 0x1f3b;
                    break;

                case 3:
                    num = 0x2ed8;
                    break;

                case 4:
                    num = 0x3e76;
                    break;

                case 5:
                    num = 0x4e13;
                    break;
            }
            dnHighSpeed = num;
            this.labelDnV.Text = ((((float) (num * 500)) / Convert.ToSingle(0xf3fcf))).ToString("0.0") + "mm/秒";
            this.colorSliderDn.Value = this.trackBarDn.Value;
        }
        catch (Exception exception)
        {
            errLogFunction("trackBarDn_Scroll + " + exception.ToString());
        }
    }

    private void trackBarEl_Scroll(object sender, EventArgs e)
    {
        int num3 = 0;
        int num4 = 0;
        try
        {
            int num = this.trackBarEl.Value;
            this.colorSliderEl.Value = this.trackBarEl.Value;
            this.labelElV.Text = ((((float) num) / 10f)).ToString("0.0") + "度/秒";
            if (this.serialPortScm.IsOpen)
            {
                SCM.Send_Data[1] = 0x45;
                SCM.Send_Data[3] = 0x10;
                SCM.Send_Data[4] = Convert.ToByte((int) (num / 0x100));
                SCM.Send_Data[5] = Convert.ToByte((int) (num % 0x100));
                if ((SCM.Send_Data[4] == 0xff) || (SCM.Send_Data[4] == 0xfe))
                {
                    SCM.Send_Data[4] = Convert.ToByte((int) (0xff - SCM.Send_Data[4]));
                    num3 = 1;
                }
                if ((SCM.Send_Data[5] == 0xff) || (SCM.Send_Data[5] == 0xfe))
                {
                    SCM.Send_Data[5] = Convert.ToByte((int) (0xff - SCM.Send_Data[5]));
                    num4 = 1;
                }
                int num2 = num3 & num4;
                SCM.Send_Data[2] = Convert.ToByte(num2);
                this.serialPortScm.Write(SCM.Send_Data, 0, SCM.Send_Data.Length);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("trackBarEl_Scroll + " + exception.ToString());
        }
    }

    private void trackBarFS_Scroll(object sender, EventArgs e)
    {
        try
        {
            int num = this.trackBarFS.Value;
            switch (num)
            {
                case 1:
                    num = 0x44c;
                    break;

                case 2:
                    num = 0x1130;
                    break;

                case 3:
                    num = 0x19c8;
                    break;

                case 4:
                    num = 0x2260;
                    break;

                case 5:
                    num = 0x2af8;
                    break;
            }
            this.colorSliderFS.Value = this.trackBarFS.Value;
            fsHighSpeed = num;
            this.labelFsV.Text = ((((float) (num * 400)) / Convert.ToSingle(0x6b6c0))).ToString("0.0") + "mm/秒";
        }
        catch (Exception exception)
        {
            errLogFunction("trackBarAz_Scroll + " + exception.ToString());
        }
    }

    private void trackBarPt_Scroll(object sender, EventArgs e)
    {
        try
        {
            int num = this.trackBarPt.Value;
            switch (num)
            {
                case 1:
                    num = 0x7ae;
                    break;

                case 2:
                    num = 0x1eb9;
                    break;

                case 3:
                    num = 0x2e15;
                    break;

                case 4:
                    num = 0x3d72;
                    break;

                case 5:
                    num = 0x4cce;
                    break;
            }
            ptHighSpeed = num;
            this.labelPtV.Text = ((((float) (num * 510)) / Convert.ToSingle(0xf4d2d))).ToString("0.0") + "mm/秒";
            this.colorSliderPt.Value = this.trackBarPt.Value;
        }
        catch (Exception exception)
        {
            errLogFunction("trackBarPt_Scroll + " + exception.ToString());
        }
    }

    private void trackBarRv_Scroll(object sender, EventArgs e)
    {
        try
        {
            int num = this.trackBarRv.Value;
            switch (num)
            {
                case 1:
                    num = 0x341;
                    break;

                case 2:
                    num = 0x683;
                    break;

                case 3:
                    num = 0xd05;
                    break;

                case 4:
                    num = 0x1388;
                    break;

                case 5:
                    num = 0x1a0b;
                    break;

                case 6:
                    num = 0x208d;
                    break;

                case 7:
                    num = 0x2710;
                    break;

                case 8:
                    num = 0x3415;
                    break;

                case 9:
                    num = 0x411b;
                    break;
            }
            rvHighSpeed = num;
            this.labelRvV.Text = ((((float) (num * 360)) / Convert.ToSingle((long) 0x927c0L))).ToString("0.0") + "度/秒";
            this.colorSliderRv.Value = this.trackBarRv.Value;
        }
        catch (Exception exception)
        {
            errLogFunction("trackBarRv_Scroll + " + exception.ToString());
        }
    }

    private void trackBarSd_Scroll(object sender, EventArgs e)
    {
        int num3 = 0;
        int num4 = 0;
        try
        {
            int num = this.trackBarSd.Value;
            this.labelSdV.Text = ((((float) num) / 10f)).ToString("0.0") + "度/秒";
            this.colorSliderSd.Value = this.trackBarSd.Value;
            if (this.serialPortScm.IsOpen)
            {
                SCM.Send_Data[1] = 0x48;
                SCM.Send_Data[3] = 0x45;
                SCM.Send_Data[4] = Convert.ToByte((int) (num / 0x100));
                SCM.Send_Data[5] = Convert.ToByte((int) (num % 0x100));
                if ((SCM.Send_Data[4] == 0xff) || (SCM.Send_Data[4] == 0xfe))
                {
                    SCM.Send_Data[4] = Convert.ToByte((int) (0xff - SCM.Send_Data[4]));
                    num3 = 1;
                }
                if ((SCM.Send_Data[5] == 0xff) || (SCM.Send_Data[5] == 0xfe))
                {
                    SCM.Send_Data[5] = Convert.ToByte((int) (0xff - SCM.Send_Data[5]));
                    num4 = 1;
                }
                int num2 = num3 & num4;
                SCM.Send_Data[2] = Convert.ToByte(num2);
                this.serialPortScm.Write(SCM.Send_Data, 0, SCM.Send_Data.Length);
            }
        }
        catch (Exception exception)
        {
            errLogFunction("trackBarSd_Scroll + " + exception.ToString());
        }
    }

    private void upSort(ref float[] MainDataAngle, ref float[] MainRvDataAngle, ref float[] MainDataElec)
    {
        try
        {
            for (int i = 0; i < (MainDataAngle.Length - 1); i++)
            {
                for (int j = i + 1; j < MainDataAngle.Length; j++)
                {
                    if (MainRvDataAngle[i] > MainRvDataAngle[j])
                    {
                        float num3 = MainDataAngle[i];
                        MainDataAngle[i] = MainDataAngle[j];
                        MainDataAngle[j] = num3;
                        float num4 = MainRvDataAngle[i];
                        MainRvDataAngle[i] = MainRvDataAngle[j];
                        MainRvDataAngle[j] = num3;
                        float num5 = MainDataElec[i];
                        MainDataElec[i] = MainDataElec[j];
                        MainDataElec[j] = num5;
                    }
                }
            }
        }
        catch (Exception exception)
        {
            errLogFunction("upSort" + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    public static void WriteINI(string Section, string Key, string Value, string filename)
    {
        try
        {
            string filePath = AppDomain.CurrentDomain.BaseDirectory + filename;
            define.WritePrivateProfileString(Section, Key, Value, filePath);
        }
        catch (Exception exception)
        {
            errLogFunction("WriteINI + " + exception.ToString());
        }
    }

    public static void WriteSystemOption()
    {
        try
        {
            WriteINI("VNA", "VNA", Convert.ToString(define.VNA), "SystemOption.ini");
            WriteINI("VNA", "VNAConnect", Convert.ToString(define.VNAConnect), "SystemOption.ini");
            WriteINI("VNA", "VNAType", Convert.ToString(define.VNAType), "SystemOption.ini");
            WriteINI("VNA", "VNATcpIP", Convert.ToString(define.VNATcpIP), "SystemOption.ini");
            WriteINI("VNA", "VNAGPIB", Convert.ToString(define.VNANI), "SystemOption.ini");
            WriteINI("VNA", "VNAUSB", Convert.ToString(define.VNAUSB), "SystemOption.ini");
            WriteINI("VNA", "Signal", Convert.ToString(define.Signal), "SystemOption.ini");
            WriteINI("VNA", "SigType", Convert.ToString(define.SigType), "SystemOption.ini");
            WriteINI("VNA", "SigCom", Convert.ToString(define.SigCom), "SystemOption.ini");
            WriteINI("VNA", "SigGPIB", Convert.ToString(define.SigNI), "SystemOption.ini");
            WriteINI("VNA", "SigTcpIP", Convert.ToString(define.SigTcpIP), "SystemOption.ini");
            WriteINI("ATTS", "comScm", Convert.ToString(define.comScm), "SystemOption.ini");
            WriteINI("ATTS", "comAz", Convert.ToString(define.comAz), "SystemOption.ini");
            WriteINI("ATTS", "comDn", Convert.ToString(define.comDn), "SystemOption.ini");
            WriteINI("ATTS", "comEl", Convert.ToString(define.comEl), "SystemOption.ini");
            WriteINI("ATTS", "comPt", Convert.ToString(define.comPt), "SystemOption.ini");
            WriteINI("ATTS", "comPtAngle", Convert.ToString(define.comPtAngle), "SystemOption.ini");
            WriteINI("ATTS", "comNSd", Convert.ToString(define.comNSd), "SystemOption.ini");
            WriteINI("ATTS", "comRv", Convert.ToString(define.comRv), "SystemOption.ini");
            WriteINI("ATTS", "comSwitch", Convert.ToString(define.comSwitch), "SystemOption.ini");
            WriteINI("ATTS", "comGF", Convert.ToString(define.comGF), "SystemOption.ini");
            WriteINI("ATTS", "Scm", Convert.ToString(define.Scm), "SystemOption.ini");
            WriteINI("ATTS", "Az", Convert.ToString(define.Az), "SystemOption.ini");
            WriteINI("ATTS", "Dn", Convert.ToString(define.Dn), "SystemOption.ini");
            WriteINI("ATTS", "El", Convert.ToString(define.El), "SystemOption.ini");
            WriteINI("ATTS", "Pt", Convert.ToString(define.Pt), "SystemOption.ini");
            WriteINI("ATTS", "Rv", Convert.ToString(define.Rv), "SystemOption.ini");
            WriteINI("ATTS", "Sd", Convert.ToString(define.NSd), "SystemOption.ini");
            WriteINI("ATTS", "Switch", Convert.ToString(define.Switch), "SystemOption.ini");
            WriteINI("ATTS", "GF", Convert.ToString(define.GF), "SystemOption.ini");
            WriteINI("ATTS", "ScmAz", Convert.ToString(define.ScmAz), "SystemOption.ini");
            WriteINI("ATTS", "ScmDn", Convert.ToString(define.ScmDn), "SystemOption.ini");
            WriteINI("ATTS", "ScmEl", Convert.ToString(define.ScmEl), "SystemOption.ini");
            WriteINI("ATTS", "ScmRv", Convert.ToString(define.ScmRv), "SystemOption.ini");
            WriteINI("ATTS", "ScmNSd", Convert.ToString(define.ScmNSd), "SystemOption.ini");
            WriteINI("ATTS", "ScmPt", Convert.ToString(define.ScmPt), "SystemOption.ini");
            WriteINI("Other", "OpenZeroButton", Convert.ToString(define.OpenZeroButton), "SystemOption.ini");
            WriteINI("Other", "ConnetDevice", Convert.ToString(define.ConnetDevice), "SystemOption.ini");
            WriteINI("MapColor", "MapColor1", Convert.ToString(getprams.MapColor[1].ToArgb()), "SystemOption.ini");
            WriteINI("MapColor", "MapColor2", Convert.ToString(getprams.MapColor[2].ToArgb()), "SystemOption.ini");
            WriteINI("MapColor", "MapColor3", Convert.ToString(getprams.MapColor[3].ToArgb()), "SystemOption.ini");
            WriteINI("MapColor", "MapColor4", Convert.ToString(getprams.MapColor[4].ToArgb()), "SystemOption.ini");
            WriteINI("MapColor", "MapColor5", Convert.ToString(getprams.MapColor[5].ToArgb()), "SystemOption.ini");
            WriteINI("MapColor", "MapColor6", Convert.ToString(getprams.MapColor[6].ToArgb()), "SystemOption.ini");
            WriteINI("MapColor", "MapColor7", Convert.ToString(getprams.MapColor[7].ToArgb()), "SystemOption.ini");
            WriteINI("MapColor", "MapColor8", Convert.ToString(getprams.MapColor[8].ToArgb()), "SystemOption.ini");
            WriteINI("MapColor", "MapColor9", Convert.ToString(getprams.MapColor[9].ToArgb()), "SystemOption.ini");
            WriteINI("MapColor", "LineColor", Convert.ToString(getprams.LineColor.ToArgb()), "SystemOption.ini");
            WriteINI("MapColor", "BackColor", Convert.ToString(getprams.BackColor.ToArgb()), "SystemOption.ini");
            WriteINI("MapColor", "LeftMargin", Convert.ToString(getprams.LeftMargin), "SystemOption.ini");
            WriteINI("MapColor", "RightMargin", Convert.ToString(getprams.RightMargin), "SystemOption.ini");
            WriteINI("MapColor", "TopMargin", Convert.ToString(getprams.TopMargin), "SystemOption.ini");
            WriteINI("MapColor", "DownMargin", Convert.ToString(getprams.DownMargin), "SystemOption.ini");
            WriteINI("MapColor", "MaxElec", Convert.ToString(getprams.MaxElec), "SystemOption.ini");
            WriteINI("MapColor", "MinElec", Convert.ToString(getprams.MinElec), "SystemOption.ini");
            WriteINI("MapColor", "KeduAngle", Convert.ToString(getprams.KeduAngle), "SystemOption.ini");
            WriteINI("MapColor", "KeduElec", Convert.ToString(getprams.KeduElec), "SystemOption.ini");
            WriteINI("AngleData", "testFX", Convert.ToString(SCM.testFX), "SystemOption.ini");
            WriteINI("AngleData", "testZhou", Convert.ToString(SCM.testZhou), "SystemOption.ini");
            WriteINI("AngleData", "testMode", Convert.ToString(SCM.testMode), "SystemOption.ini");
            WriteINI("AngleData", "azLimit", Convert.ToString(SCM.Limit_CWazAngle), "SystemOption.ini");
            WriteINI("AngleData", "azAngle", Convert.ToString(SCM.azAngle), "SystemOption.ini");
            WriteINI("AngleData", "elAngle", Convert.ToString(SCM.elAngle), "SystemOption.ini");
            WriteINI("AngleData", "dnAngle", Convert.ToString(SCM.dnAngle), "SystemOption.ini");
            WriteINI("AngleData", "NsdAngle", Convert.ToString(SCM.sdAngle), "SystemOption.ini");
            WriteINI("AngleData", "ptAngle", Convert.ToString(SCM.ptAngle), "SystemOption.ini");
            WriteINI("AngleData", "rvAngle", Convert.ToString(SCM.rvAngle), "SystemOption.ini");
            WriteINI("AngleData", "FSAngle", Convert.ToString(SCM.fsAngle), "SystemOption.ini");
            WriteINI("AngleData", "azAngleZero", Convert.ToString(SCM.azAngleZero), "SystemOption.ini");
            WriteINI("AngleData", "elAngleZero", Convert.ToString(SCM.elAngleZero), "SystemOption.ini");
            WriteINI("AngleData", "dnAngleZero", Convert.ToString(SCM.dnAngleZero), "SystemOption.ini");
            WriteINI("AngleData", "NsdAngleZero", Convert.ToString(SCM.sdAngleZero), "SystemOption.ini");
            WriteINI("AngleData", "ptAngleZero", Convert.ToString(SCM.ptAngleZero), "SystemOption.ini");
            WriteINI("AngleData", "rvAngleZero", Convert.ToString(SCM.rvAngleZero), "SystemOption.ini");
            string str = "";
            for (int i = 0; i < SCM.AntnaMode.Length; i++)
            {
                str = str + SCM.AntnaMode[i] + ",";
            }
            WriteINI("AntnaMode", "AntnaMode", str, "SystemOption.ini");
        }
        catch (Exception exception)
        {
            errLogFunction("Main--WriteSystemOption + " + exception.ToString());
            MessageBox.Show(exception.Message, "错误信息", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private void 取数据ToolStripMenuItem1_Click(object sender, EventArgs e)
    {
    }

    // Nested Types
    public delegate void mouseg();
}

